---
import Default from "@astrojs/starlight/components/Head.astro";
import type {Props} from "@astrojs/starlight/props";

const { entry } = Astro.props;
const hasCustomOGImage = Astro.props.entry.data.head.find((t) =>
  t.attrs.property === "og:image" ? true : false
);

// Extract metadata from frontmatter - handle both patterns
// Pattern 1: metadata wrapper object
// Pattern 2: fields directly in frontmatter
const metadata = entry.data.metadata || {};
const directFields = entry.data as any;

// Combine both sources, with metadata wrapper taking precedence
const keywords = metadata.keywords || directFields.keywords || [];
const topics = metadata.topics || directFields.topics || [];
const audience = metadata.audience || directFields.audience || [];
const complexity = metadata.complexity || directFields.complexity;
const updated = metadata.updated || directFields.updated;
const featured = metadata.featured || directFields.featured;
const deprecated = metadata.deprecated || directFields.deprecated;
const aiSummary = metadata['ai-summary'] || directFields['ai-summary'];

// Handle updated field - convert date to string if needed
const updatedString = updated instanceof Date ? updated.toISOString() : updated;

// Combine keywords from different sources
const allKeywords = [
  ...keywords,
  ...topics,
  ...audience,
  complexity,
  entry.data.title,
  entry.data.description
].filter(Boolean);

// Create structured data for better SEO
const structuredData: any = {
  "@context": "https://schema.org",
  "@type": "TechArticle",
  "headline": entry.data.title,
  "description": entry.data.description,
  "keywords": allKeywords.join(", "),
  "author": {
    "@type": "Organization",
    "name": "Kinde"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Kinde",
    "url": "https://kinde.com"
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  },
  "articleSection": topics.join(", "),
  "articleBody": entry.data.description,
  "wordCount": entry.data.description?.length || 0,
  "dateModified": updatedString,
  "inLanguage": "en-US",
  "isAccessibleForFree": true,
  "educationalLevel": complexity || "Beginner",
  "audience": {
    "@type": "Audience",
    "audienceType": audience.join(", ")
  }
};

// Add featured/deprecated status if available
if (featured !== undefined) {
  structuredData.isPartOf = {
    "@type": "CreativeWork",
    "isFeatured": featured
  };
}

if (deprecated !== undefined) {
  structuredData.isDeprecated = deprecated;
}
---

<Default {...Astro.props} />

<!-- Enhanced SEO Meta Tags -->
<meta name="keywords" content={allKeywords.join(", ")} />
<meta name="article:section" content={topics.join(", ")} />
<meta name="article:tag" content={keywords.join(", ")} />
<meta name="article:difficulty" content={complexity || "Beginner"} />
{updatedString && <meta name="article:modified_time" content={updatedString} />}
{featured && <meta name="article:featured" content={featured.toString()} />}
{deprecated && <meta name="article:deprecated" content={deprecated.toString()} />}

<!-- Enhanced Open Graph Tags -->
<meta property="og:keywords" content={allKeywords.join(", ")} />
<meta property="og:article:section" content={topics.join(", ")} />
<meta property="og:article:tag" content={keywords.join(", ")} />
{complexity && <meta property="og:article:difficulty" content={complexity} />}
{updatedString && <meta property="og:article:modified_time" content={updatedString} />}

<!-- Enhanced Twitter Card Tags -->
<meta name="twitter:description" content={entry.data.description} />
{allKeywords.length > 0 && <meta name="twitter:keywords" content={allKeywords.join(", ")} />}

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<!-- AI Summary for enhanced search -->
{aiSummary && <meta name="ai-summary" content={aiSummary} />}

<!-- Custom OG Image if not already set -->
{!hasCustomOGImage && entry.data.social_sharing_image_url && (
  <meta property="og:image" content={entry.data.social_sharing_image_url} />
)}
