---
page_id: 9b0c1d2e-3f4a-5b6c-7d8e-9f0a1b2c3d4e
title: Kinde Documentation - Authenticate
description: "Complete documentation for Kinde's authenticate section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - authenticate
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - authenticate
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's authenticate section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Authenticate

This is the complete documentation for Kinde's authenticate section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Authenticate - About auth - About Kinde authentication

> Learn about Kinde's authentication methods including password, passwordless, social sign-in, and enterprise connections.

authentication, sign up, sign in, password, passwordless, social login, enterprise, SSO
authenticate

Kinde makes authentication easy by providing a range of methods to choose from. Allow your users to sign up or sign in: - [by invitation only](/authenticate/custom-configurations/disable-sign-up/) - using self-sign-up (default) - [with a password](/authenticate/authentication-methods/password-authentication/) - [passwordless](/authenticate/authentication-methods/passwordless-authentication/) (Applied by default in all new Kinde businesses) - with a [phone number](/authenticate/authentication-methods/phone-authentication/) - with a range of [social sign in options](/authenticate/social-sign-in/add-social-sign-in/), like Google, Apple, Slack, and more - via [enterprise connections](/authenticate/enterprise-connections/about-enterprise-connections/) such as Cloudflare or SAML Authentication can be set per environment, and can be changed for different applications, e.g. your production web app and mobile app can have different authentication requirements. You can start simple with email self-sign-up, and then add more options as needed, such as social sign in and multi-factor authentication. ## Multi-domain authentication Kinde supports: - authenticated sessions across domains and subdomains - users switching between domains and subdomains Kinde supports multi-domain authentication where the primary domain is the same, but there are different subdomains. For example, `website.yourdomain.com`, `app.yourdomain.com`, `docs.yourdomain.com`. This is similar to how Google manages authentication for `calendar.google.com`, `mail.google.com`, etc. Once a user is signed in to one domain or subdomain, they can switch to another and remain authenticated. To do this, you need to initiate the flow with `prompt=none` as part of the auth URL. This checks for a session on Kinde invisibly. If it exists the user experiences a seamless session between sites, and if a session doesn’t exist, they are prompted to reauthenticate. See also, [Manage authentication across applications](/authenticate/manage-authentication/user-auth-applications/). ## Rate limiting and identity management issues if third party keys not entered When setting up third party authentication, such as [social sign in](/authenticate/social-sign-in/add-social-sign-in/), ensure you have added the third party app, and included the Client ID and Client Secret (Keys) to the configuration screens in your live environment. If you don’t use your own app's keys: - Kinde will fall back to using our own credentials as a proxy, which will cause rate limiting - For Apple SSO specifically, if you don't use your own app from the start, users will be permanently associated with the wrong app and cannot be transferred later Using the Kinde app is okay for local development environments, but not for live production environments. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/d7bdcd1a-1800-4e8f-780f-ea7d56c37400/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Get started with authentication Before setting up authentication, think about what your audience preferences are and how you want to manage access in the short and longer term. Enabling social sign in GitHub, for example, might be expected if your audience are software developers. Here’s a common set of tasks for getting started. 1. [Set up user authentication](/authenticate/authentication-methods/set-up-user-authentication/) 2. [Add social sign in](/authenticate/social-sign-in/add-social-sign-in/) 3. [Enable multi-factor authentication](/authenticate/multi-factor-auth/enable-multi-factor-authentication/)

# Authenticate - About auth - Ways to authenticate

> Detailed guide to all authentication methods supported by Kinde including email, phone, social, and enterprise authentication.

email authentication, password, passwordless, phone auth, SMS, social login, enterprise SSO, OTP
authenticate

Kinde supports the following authentication methods. For instructions on how to switch on each method for your apps, see [Set up user authentication](/authenticate/authentication-methods/set-up-user-authentication/). ## Email authentication ### Password You can set up authentication so users can authenticate via email using a [password](/authenticate/authentication-methods/password-authentication/). The password needs to be at least 8 characters and popular passwords are blocked. If allowing this method, you should encourage users to use a password manager to increase security. Users will be prompted to verify their email address when they first sign up, using a one time code. <Aside type="warning"> If you switch your users from passwordless to password, Kinde will first check if a password exists for the user when they next sign in. If a password doesn't exist, we verify the email address and ask user to set the password. The next time they sign in, they will use the email + password. Note that they enter their password on a different screen to their email. </Aside> ### Passwordless <Aside> Email + passwordless is switched on for all new Kinde businesses by default </Aside> For [passwordless](/authenticate/authentication-methods/passwordless-authentication/) authentication, set up authentication so users can authenticate via email or username using a one time code. When you activate this option, users will be sent a one-time password (OTP) to confirm their identity when they sign in. This option is more secure than using passwords, which need to be stored and protected by the user. Users will be prompted to verify their email address when they first sign up, also using an OTP. Kinde does not currently support magic links as a passwordless authentication method, as they are less secure than an OTP. ## Phone authentication <Aside> You need to have a [Twilio](https://www.twilio.com/en-us) account set up before implementing phone authentication in your production environment. See [Set up phone authentication](/authenticate/authentication-methods/phone-authentication/) for more information. </Aside> You can allow users to authenticate using their phone number as their sign in identity. This is a passwordless method. Once set up, users enter their phone number on the sign in screen and then enter a one-time passcode (sent via SMS) on the next screen. ### Passwordless via SMS For users to receive a sign in code via SMS, you need to set up a connection to [Twilio](https://www.twilio.com/en-us), who offer a messaging service for authenticating via SMS. You will need a Twilio account to set up this auth option in Kinde. See [Set up phone authentication](/authenticate/authentication-methods/phone-authentication/). Once set up, users will receive a one time code via SMS that enables them to complete the sign up process to your application or site. If you’re switching to Kinde from another auth provider, you can [import phone numbers with other user details](/manage-users/add-and-edit/import-users-in-bulk/) (such as email, first name, last name, etc.) to support authentication. ### OTP message format The SMS message that users receive through Kinde auth complies with OTP best practice. Here’s an example: <aside> 123456 is your one-time code to sign in to xxxx@login.xxx.au #123456 </aside> The content and format of the OTP SMS message is not editable. You’ll notice that the last part of the message includes a duplication of the OTP - `@bound_domain.xxx.dk #OTP_CODE` in the last line of the message. This keeps the OTP secured to the specified domain and allows browsers to reliably extract the OTP. The reason the OTP is included at the start of the message as well, is so that it can be read easily from a short notification popup. ## Social authentication You can let users sign up and sign in using social profiles. This requires some admin setup work and developer skills. **Returning users matched by email** Unlike some other authentication providers, Kinde automatically matches some accounts on sign up by matching verified email addresses. This means that if a user signs up with Google the first time, and they come back and sign up again with Slack, and the same email is detected (and the emails are verified), then the accounts get linked. See the [individual social sign in](/authenticate/social-sign-in/add-social-sign-in/) instructions. ## Enterprise authentication Kinde supports the use of [Microsoft Entra ID](/authenticate/enterprise-connections/azure/) and [SAML](/authenticate/enterprise-connections/custom-saml/) as an enterprise-level single sign on (SSO) authentication methods. These methods are more suited to big corporate and government organizations.

# Authenticate - About auth - User identity and verification

> Understanding how user identity and verification works in Kinde, including identity types, trusted providers, and verification processes.

user identity, verification, trusted providers, email verification, social identity, enterprise identity, profile sync
authenticate

A key part of making authentication secure, is through verification of user identities. Verification usually happens at sign up, to ensure the person signing up exists and is the intended person gaining access to your app or project. This topic is a conceptual overview of how identity works in Kinde. There are two parts to a user’s identity in Kinde: - Kinde profile - first name, last name, and picture - Identity details - information a user can sign in with: Email, phone, social, enterprise. This is explained in more detail below. ## Identity When we use the term ‘identity’, we’re referring to a unique identifier that allows a user to sign in and be verified. An email, phone number, SSO provider, etc. When a user tries to access a system or service, they provide their identity along with additional credentials (e.g. password, one-time password OTP) to verify their identity and gain access. ## Types of identities ### Identity credentials This refers to an email, phone number, or username. Identity credentials are created for a user when they first sign up with an email address, phone number, or username. If it’s the first identity to be added, it will be marked as primary. You can [manually add these user identities](/manage-users/add-and-edit/add-manage-user-identities/). ### Social A social identity is created when a user signs up with a social account or when they sign in with a trusted provider, who supplies a verified email that matches an existing email identity in Kinde. If a user signs up with a trusted social provider that provides us a verified email, and an email identity does not exist for the user, Kinde creates an email identity with this email. They can use this email to sign in with (if an email authentication method is enabled for your application). ### Enterprise An enterprise identity is created when a user signs up via an enterprise connection, or when they sign in via a trusted provider who supplies a verified email that matches an existing email identity. Users with enterprise identities in Kinde can't also have other identity types in Kinde. E.g. a user can have an email identity and a social identity. But if a user has an enterprise identity, they cannot have other identities. In this case, identity information is sourced with the identity provider and is managed via the identity provider, not in Kinde. ## Trusting emails from providers ### Trusted emails A trusted email provider is one that guarantees the email they issue is verified and also does not allow the user to change their primary email address. Currently Google is the only provider we treat as trusted by default. But you can choose to trust emails from any provider when you configure them in Kinde (See below). You can also choose not to trust Google emails if you want. **Google example** 1. When a user signs up, the Kinde profile first name, last name and picture are populated from Google. 2. If Google is a trusted provider, we create a social identity and an email identity. 3. The user can sign in with either Google or their email (if this auth method is allowed). ### Untrusted emails This isn’t to say that other email providers are not trustworthy, this purely relates to email addresses and the guarantee that it will not change. **LinkedIn example** 1. When a user signs up, the Kinde profile first name, last name and picture are populated from LinkedIn. 2. If LinkedIn is an untrusted email provider, we only create a social identity. 3. At this stage the user can only sign in with their LinkedIn account. ### Trust an untrusted provider When you set up an enterprise connection or a social connection, you can select the option to trust them. For example, go to **Settings > Authentication > Social connections** and select **Configure** on a tile. You’ll see the **Trust this connection** switch. Switch on or off as you like. ## Email sign up flow example 1. When a user signs up with email, the Kinde profile first name, last name are populated by the user (if you ask for it as part of the sign up flow). Their picture will be populated from Gravatar if it exists. 2. Kinde creates a primary contact email using the address they signed up with. They can only sign in with this email address. 3. If the same user returns and signs in with a trusted connection, e.g. Google, Kinde recognises that a user exists and the email address is from a trusted provider, so we add a Google identity to their profile. 4. The Kinde profile first name, last name and picture are updated by Google (if profile syncing is also turned on). 5. The user can sign in using either email or Google. ## Keeping identities in sync ### Social provider syncing If a social provider gives us a new first name, last name or picture for a user, Kinde updates these fields in the user profile to match those supplied to us. This is on by default, but you can turn it off if you wish to keep a static profile. [About profile sync](/manage-users/about/). If you have syncing off at an environment level but turned on at a social connection level we will honor the request for the social connection to sync. ### Enterprise connection syncing If an enterprise provider gives us a new first name, last name, or picture for a user, Kinde updates these fields in the user profile to match those supplied to us. This is on by default, but you can turn it off if you wish to keep a static profile. [About profile sync](/manage-users/about/). If you have syncing off at an environment level but turned on at an enterprise connection level we will honor the request for the enterprise connection to sync. ## Identity verification Verification is an authentication security measure that checks the person seeking system access is who they say they are. In addition, an up to date identity provides a secure method to contact a user. Email identity details are required, for example, to reset a user’s password (requested or forced), and are needed to reliably send OTPs and trigger other auth mechanisms, like auth apps. ## Username identities must have an email At Kinde, we don’t treat username identities the same as phone and email identities. If you want users to sign in and authenticate with usernames, they still need to verify themselves (if only once) via email. ## Cases in usernames Kinde treats usernames as case-insensitive. In other words, we ignore case. We do this because it eliminates the possibility of auth issues and fraud when two usernames are identical in every aspect except the case of one of their letters. We are happy to support users choosing an aesthetically pleasing username combination, like `RosyRose` or `BuilderBob`. We just don't also support separate identities for `rosYrosE` and `BUilderbob`. ## When an identity changes For security reasons, you can’t edit a user’s verified identity. But we know it still needs to be possible. People change emails, change names, get new phone numbers, etc. You can update identities by adding a new identity and deleting the old one. See [Add and manage user identities](/manage-users/add-and-edit/add-manage-user-identities/), or [via the Kinde API](/kinde-apis/management/).

# Authenticate - About auth - Top questions about Kinde authentication

> A collection of the top questions and answers about how to set up and configure Kinde authentication for your user's needs.

login, sign in, popup, error, sessions, tokens, auth
authentication, enterprise auth, SSO, social sign-in, authentication issues, user access control, user access, user authentication

Here’s some short answers to the most common authentication questions. Click on any question to expand the answer. <Aside title="Ask the docs"> Type **@kindeAI** to access 24/7 global support in the **#ask-kinde-ai** channel in the Kinde [Slack](https://join.slack.com/t/thekindecommunity/shared_invite/zt-1vyq8qilj-jFH5V27jfFnHk~BuBSU0ZA) or [Discord](https://discord.gg/KdkCXRNTFn) communities. </Aside> ## Authentication methods & core functionality <details> <summary><strong>How do I choose the right Kinde authentication method for my SaaS product's user base?</strong></summary> Think about who you're building for and what they're used to. If you're targeting developers, they'll probably expect GitHub or GitLab sign-in options. Building something for everyday consumers? Google and Apple sign-in will feel familiar and remove friction. Got enterprise customers? They'll likely need SAML or Microsoft Entra ID to keep their IT teams happy. You don't need to figure it all out upfront. Start simple with email authentication and add more options as you grow. Your web app and mobile app can even have different auth requirements if that makes sense for your users. [Learn more about authentication methods](/authenticate/about-auth/about-authentication/) </details> <details> <summary><strong>What's the difference between Kinde's password and passwordless authentication, and which should I implement?</strong></summary> With passwords, your users create and remember their own passwords (we enforce 8+ characters and block common ones). With passwordless, we send them a one-time code via email or SMS instead. Passwordless is genuinely more secure - no passwords to store, steal, or forget, and codes expire after 2 hours. Just know you can't mix both methods for the same app - it's one or the other. If you're building something mobile-first or want to reduce support tickets about forgotten passwords, passwordless is your friend. [Password authentication guide](/authenticate/authentication-methods/password-authentication/) | [Passwordless authentication guide](/authenticate/authentication-methods/passwordless-authentication/) </details> <details> <summary><strong>How does Kinde's automatic account linking work?</strong></summary> Kinde automatically connect accounts when someone uses the same verified email across different sign-in methods. So if someone first signs up with Google, then later tries to create an account with Slack using the same email, we'll link them together automatically. No duplicate accounts, no confusion. They can sign in with either method to access the same account. Once your users verify their email with any method, all their sign-in options with that email will work seamlessly together. [Learn about identity and verification](/authenticate/about-auth/identity-and-verification/) </details> <details> <summary><strong>Can I set different Kinde authentication requirements for different parts of my application?</strong></summary> Absolutely! This is one of those features that sounds complicated but actually makes total sense. Set up your baseline authentication methods at the environment level, then customize per application or organization as needed. Maybe your main web app uses social sign-in to keep things simple, while your mobile app needs phone authentication, or you want business customers to use MFA while keeping consumer sign-up super easy. It's all about matching the auth experience to what makes sense for each user group. [Configure authentication options](/authenticate/authentication-methods/set-up-user-authentication/) </details> <details> <summary><strong>How do I handle Kinde authentication across multiple domains and subdomains?</strong></summary> We've got this covered with multi-domain authentication. Think about how Google lets you stay signed in whether you're on Gmail, Calendar, or Drive - same idea. Users can hop between `website.yourapp.com`, `app.yourapp.com`, `docs.yourapp.com` and stay authenticated. The trick is using `prompt=none` in your auth URL, which invisibly checks for an existing session. If they're already signed in elsewhere, it's seamless. If not, they'll get prompted to sign in again. [About Kinde authentication](/authenticate/about-auth/about-authentication/) </details> <details> <summary><strong>What happens when my users can't receive their Kinde auth verification codes?</strong></summary> Tell them to check their spam folder first. This fixes it most of the time because email providers can be overly protective. For SMS codes, make sure they've got decent cell reception. If they're taking too long (codes expire after 2 hours), they'll need to request a fresh one. And if you're using SMS auth, double-check that your Twilio setup is working properly - that's usually where things go sideways. [Passwordless authentication troubleshooting](/authenticate/authentication-methods/passwordless-authentication/) </details> ## Social sign-in <details> <summary><strong>How do I set up Kinde social authentication without compromising security for my production app?</strong></summary> Before you go live, you absolutely must swap out Kinde's default social credentials with your own. We let you use ours for testing, but keeping them in production is asking for trouble - security risks, performance issues, and you'll be stuck if you ever want to switch providers. Create your own apps with Google, GitHub, Apple, whatever you're using, grab your Client ID and Client Secret, and put them into Kinde's social connection settings. Don't forget to add your custom domain callbacks if you're using those. [Add and manage social connections](/authenticate/social-sign-in/add-social-sign-in/) </details> <details> <summary><strong>Some social providers don't provide email addresses. How does Kinde maintain these user identities?</strong></summary> Some social providers (looking at you, X/Twitter and Apple) don't always hand over email addresses, but we need them for security things like password resets. When this happens, we'll ask your users for an email address just once during their first sign-up. After that one-time thing, they can sign in with their social account without any hassle. It's a small bump in the road that keeps everyone secure. [X social sign-in](/authenticate/social-sign-in/twitter/) | [Apple social sign-in](/authenticate/social-sign-in/apple/) </details> <details> <summary><strong>How can I use Kinde to create a seamless social authentication experience for my users?</strong></summary> If you're going all-in on social auth (no email/password fallbacks), you can create a pretty slick experience. Users click your sign-in button and boom - straight to Google's or Apple's account picker. Set up custom authentication pages and use the `connectionId` parameter to skip our initial screens entirely. The only catch? We'll still handle verification and MFA screens because, well, security matters and we're good at it. [Custom authentication pages](/authenticate/custom-configurations/custom-authentication-pages/) </details> <details> <summary><strong>Should I mark social connections as "trusted providers" in Kinde?</strong></summary> Generally, no - leave this off for better security. "Trusted provider" means we'll take their word that emails are verified, but here's the thing: people change email addresses, and social providers don't always keep up. Only flip this switch if you're 100% certain the provider maintains verified, current email addresses. When in doubt, err on the side of caution. [Social connections configuration](/authenticate/social-sign-in/add-social-sign-in/) </details> ## Enterprise authentication & SAML <details> <summary><strong>How do I set up Kinde SAML authentication for enterprise customers?</strong></summary> SAML setup is where things get a bit technical, but stick with us. Kinde acts as the service provider while your enterprise customer brings their own identity provider (Google Workspace, Microsoft Entra ID, Cloudflare, whatever they're using). You'll create an enterprise connection in Kinde, make up a unique Entity ID (just a random string like "870sa9fbasfasdas23aghkhc12zasfnasd"), and get their IdP metadata URL. They'll need to add your ACS URL to their setup. Pro tip: generate certificate and private key pairs for extra security, and always test in a sandbox environment first. [Custom SAML setup](/authenticate/enterprise-connections/custom-saml/) </details> <details> <summary><strong>What do I use home realm domains for in Kinde enterprise connections?</strong></summary> Home realm domains are basically a shortcut that makes enterprise sign-in smoother. When you set `bigcorp.com` as a home realm domain, anyone with a "@bigcorp.com" email gets automatically routed to their company's sign-in flow - no extra clicks needed. Just remember that each domain can only be used once across all your connections, so no sharing. And the SSO button disappears by default when you use this (though you can bring it back if needed). [Microsoft Entra ID setup](/authenticate/enterprise-connections/azure/) </details> <details> <summary><strong>What's the best way to migrate enterprise users to Kinde?</strong></summary> Get your enterprise connections set up in Kinde first - SAML, Entra ID, whatever they're using. Then when you import their user data (via CSV or JSON), we'll automatically match everyone to the right connection based on their email addresses. This means their sign-in experience stays exactly the same - they won't even notice you've switched to Kinde behind the scenes. Import their roles and permissions too if you've got them. [Migrate to Kinde](/get-started/switch-to-kinde/switch-to-kinde-for-user-authentication/) </details> <details> <summary><strong>How do I handle enterprise users who are already signed into their identity provider with Kinde?</strong></summary> When enterprise users sign out of your app, they're only signing out of Kinde, not their company's identity provider (like Entra ID). This is totally normal for federated auth - it's how most enterprise setups work. If your customer really needs full sign-out from both systems, you'll need to build additional logout flows, but honestly, most companies prefer it this way. [Entra ID SAML connection](/authenticate/enterprise-connections/entra-id-saml/) </details> ## Multi-factor authentication <details> <summary><strong>How do I use Kinde to implement MFA for different types of customers?</strong></summary> MFA is one of those things where one size definitely doesn't fit all. You can set it up for everyone (environment level) or get granular with specific customer segments (organization level). Finance and government customers? They'll probably want mandatory MFA. Consumer-facing app? Maybe make it optional so you don't scare people away. Kinde supports email codes, SMS codes, and authenticator apps as second factors. Just don't use the same method twice - as in don't make email the primary and secondary auth method. That could be confusing. [Enable multi-factor authentication](/authenticate/multi-factor-auth/enable-multi-factor-authentication/) </details> <details> <summary><strong>Can I exempt certain users or connections from MFA requirements in Kinde?</strong></summary> Yep, you've got options here. You can exempt specific roles (maybe only admins need MFA) or exempt enterprise connections where MFA is already handled by their company's identity provider. Nobody wants double MFA - that's just annoying. Set these exemptions at the organization level, and if someone has a mix of exempt and non-exempt roles, MFA kicks in by default (better safe than sorry). [Set MFA per organization](/authenticate/multi-factor-auth/mfa-per-org/) </details> <details> <summary><strong>How do I help users who are having trouble with MFA?</strong></summary> Make the instructions super clear for each method you support. For authenticator apps, walk them through the QR code scanning and emphasize saving those backup codes (they will lose them otherwise). For SMS, double-check they're entering phone numbers correctly with country codes. For email codes, check spam folder. Always give users a way to contact you when they get locked out - it happens to the best of us. You can also [reset MFA for a user](/manage-users/access-control/reset-multi-factor-authentication-for-a-user/). [Multi-factor authentication guide](/authenticate/multi-factor-auth/enable-multi-factor-authentication/) </details> ## Username authentication <details> <summary><strong>Do people still use username authentication? Does Kinde allow this?</strong></summary> Absolutely Kinde supports this. Username auth is perfect when you want to give users more personality in their sign-in experience or when your app has that community vibe (think gaming platforms or developer tools). They'll still need to verify their email once for security (we're not animals), but after that they can sign in with their chosen username. Works with both password and passwordless methods, so you've got flexibility there. [Username authentication guide](/authenticate/authentication-methods/username-authentication/) </details> <details> <summary><strong>How does Kinde handle username uniqueness and case sensitivity?</strong></summary> We treat usernames as case-insensitive because life's too short for "BuilderBob" vs "builderbob" authentication headaches. Users can still make their aesthetic choices like "RosyRose" or "DevDan" for display, but behind the scenes we're not picky about capitalization. This prevents fraud attempts and those frustrating "username not found" moments when someone forgets their exact capitalization. [Username authentication details](/authenticate/authentication-methods/username-authentication/) </details> <details> <summary><strong>What happens if a user changes their password when using both email and username authentication in Kinde?</strong></summary> Both methods share the same password! If someone can sign in with both their email and username, changing the password for one affects both. It keeps things simple for users (one password to remember) and prevents the confusion of having different passwords for the same account. We think this makes way more sense than forcing people to juggle multiple credentials. [Username authentication configuration](/authenticate/authentication-methods/username-authentication/) </details> ## Device Authorization Flow <details> <summary><strong>When should I use Kinde's device authorization flow instead of regular authentication?</strong></summary> Device authorization flow is perfect for situations where typing is a nightmare - think smart TVs, gaming consoles, IoT devices, or anything without a proper keyboard. Instead of watching users struggle with TV remote controls to spell out "MyComplexPassword123!", the device shows them a simple code to enter on their phone or laptop where typing doesn't suck. It's basically Netflix's approach: the TV shows a code, you enter it on your phone, boom - you're authenticated. Much better user experience, and way more secure. [Device Authorization Flow](/authenticate/device-authorization-flow/overview/). </details> <details> <summary><strong>How does Kinde's device authorization flow work, and what should I tell my users?</strong></summary> Here's the flow: your device (let's say a smart TV app) requests a device code from Kinde, then shows users a simple code and a URL like "Go to `yourapp.com/device` and enter code: ABC123". Users grab their phone, visit that URL, sign in normally (with all their usual auth methods available), enter the code, and authorize the device. Meanwhile, your TV app is polling our servers asking "Are they done yet? Are they done yet?" until we give it the green light with tokens. The whole thing happens in parallel - no hanging around waiting. [Device Authorization Flow](/authenticate/device-authorization-flow/overview/) </details> <details> <summary><strong>What are the security benefits of Kinde's device authorization flow?</strong></summary> It keeps credentials off devices you don't control, which is huge for security. Users never enter their actual passwords on the TV, CLI, or IoT device - they authenticate on their trusted phone or laptop instead. Plus, they get access to all their usual security features like MFA, social sign-in, and password managers. The codes expire quickly, we rate-limit the polling to prevent abuse, and users always see a proper consent screen before authorizing access. It's basically taking the most secure part of OAuth (browser-based auth) and making it work for devices that can't do browsers. [About authentication methods](/authenticate/about-auth/authentication-methods/) </details> <details> <summary><strong>How do I handle Kinde device authorization flow errors and edge cases?</strong></summary> The main errors you'll see are `authorization_pending` (user hasn't finished yet - keep polling), `slow_down` (you're polling too aggressively - back off), and `expired_token` (codes expired - start over). Handle these gracefully in your app rather than crashing. Users might also get confused about which device they're supposed to use for what, so make your instructions crystal clear. And remember, some users will start the process but never finish it - that's normal, just clean up expired sessions. [OAuth token validation and errors](/build/tokens/token-validation-errors/) </details> <details> <summary><strong>What's the best UX for presenting Kinde device codes to users?</strong></summary> Keep it simple and obvious. Show the code clearly (big, readable font), include the full URL they need to visit, and consider showing both a QR code and the manual entry option. Don't overwhelm them with too much text - just "Go to `yourapp.com/device` on your phone and enter: ABC123" works perfectly. If you can, show some kind of progress indicator so they know the app is waiting for them to complete the process. And please, test this with actual humans - what seems obvious to developers often isn't to regular users. </details> ## Custom configurations & user experience <details> <summary><strong>What do I need to set up Kinde phone authentication for my users?</strong></summary> You'll need a paid Twilio business account - this isn't something we can handle for free because SMS costs money. Before you dive in, check if you need 10DLC registration (10 Digit Long Code) for your region - it's required in some places for business messaging. Read up on Twilio's A2P (Application to Person) messaging guidelines too. Once you've got that sorted, plug your Twilio details into Kinde, pick between using their messaging service (better for global apps) or a specific phone number, and set your default country. [Set up phone authentication](/authenticate/authentication-methods/phone-authentication/) </details> <details> <summary><strong>Can I customize the SMS message that Kinde users receive?</strong></summary> Nope, and here's why - we use a standard format that meets security best practices and works across different languages. The message looks like: "123456 is your one-time code to sign in to [xxxx@login.xxx.au](mailto:xxxx@login.xxx.au) #123456". That weird duplication at the end? It's for security. We know it might not match your brand perfectly, but it keeps everyone safe and compliant. [Phone authentication details](/authenticate/authentication-methods/phone-authentication/) </details> <details> <summary><strong>How can I create a more seamless Kinde sign-up experience for invited users?</strong></summary> Use the `login_hint` parameter to pre-fill email fields when you know who's trying to sign in - it's like having their name already on the guest list. You can also create a unified experience where users don't have to choose between "sign up" or "sign in" (because honestly, who remembers if they've been here before?). Skip asking for first and last names if you want to keep things really minimal. Every little bit of friction you remove makes a difference. [Pre-populate user identity](/authenticate/custom-configurations/prepopulate-identity-sign-in/) | [Manage authentication experience](/authenticate/custom-configurations/authentication-experience/) </details> <details> <summary><strong>What's the best way to handle profile pictures and user data with Kinde?</strong></summary> We automatically grab profile pictures from email providers like Google and use Gravatar as backup when pictures are missing. If you'd rather handle profile pics your own way or just hate blank avatars, you can switch off the Gravatar fallback. Fair warning: Apple is pretty stingy with user data - they don't pass through avatars or much profile info, so don't expect much there. [Authentication experience customization](/authenticate/custom-configurations/authentication-experience/) </details> <details> <summary><strong>How can I pass additional parameters to identity providers through Kinde?</strong></summary> Upstream parameters let you send extra data during authentication - either the same value every time (static) or something unique per user (dynamic). Common use case: passing `login_hint` to pre-fill sign-in forms or enabling those handy account switchers you see on Google. Each provider supports different parameters (check their docs), and you can even rename parameters using aliases if your IdP is picky about naming. [Pass parameters to identity providers](/authenticate/auth-guides/pass-params-idp/) </details> ## Developer questions <details> <summary><strong>Why does Kinde authentication state get lost when users refresh the page in single-page apps?</strong></summary> We store tokens in memory for security - it protects against both CSRF and XSS attacks, which is definitely worth the trade-off. But yeah, it means page refreshes wipe the tokens. The best fix? Use our Custom Domains feature, which lets us set secure httpOnly cookies on your domain. For local development, there's an escape hatch called `is_dangerously_use_local_storage`, but seriously, don't use that in production - the name isn't kidding about the danger part. [JavaScript SDK guide](m/developer-tools/sdks/frontend/javascript-sdk/) | [React SDK guide](/developer-tools/sdks/frontend/react-sdk/) </details> <details> <summary><strong>How do I implement Kinde authentication in a React application without losing user state?</strong></summary> Wrap your app in the KindeProvider - it's your new best friend for managing auth state. Use hooks like `useKindeAuth()` to check if someone's signed in, and always check the `isLoading` state before making decisions (nobody likes flickering UI). For production, definitely set up custom domains so you can use secure cookies. Handle your post-auth redirects properly, and your users will never know how complex this stuff really is under the hood. [React SDK implementation](/developer-tools/sdks/frontend/react-sdk/) </details> <details> <summary><strong>What's the best approach for handling Kinde authentication callbacks in different frameworks?</strong></summary> Each framework has its own quirks. Next.js App Router wants `app/api/auth/[kindeAuth]/route.js`, Pages Router prefers `pages/api/auth/[...kindeAuth].js`, and vanilla JavaScript means you're handling the OAuth dance yourself. Always make sure your callback URLs match what you've configured in Kinde (case-sensitive, protocol-specific). Use our SDK callback handlers instead of rolling your own - we've already dealt with all the edge cases. [Next.js App Router SDK](/developer-tools/sdks/backend/nextjs-sdk/) | [Using Kinde without SDK](/developer-tools/about/using-kinde-without-an-sdk/) </details> <details> <summary><strong>How can I protect API endpoints and validate Kinde tokens properly?</strong></summary> Use our backend SDKs or validate JWT tokens manually - either works, but the SDKs handle the fiddly bits for you. The `getToken()` method gives you bearer tokens for API calls. On your backend, always check the token's audience claim matches your API and verify it hasn't expired. And please, never put client secrets in frontend code - that's like leaving your house key under the doormat. [TypeScript SDK guide](/developer-tools/sdks/backend/typescript-sdk/) </details> ## Troubleshooting & common issues <details> <summary><strong>How do I use Kinde to help my users who forgot their passwords?</strong></summary> Users can hit "forgot password" on the sign-in screen and we'll send them a one-time code via email to reset it. As an admin, you can also trigger password resets through the Kinde dashboard or API (as long as they have a verified email). There's also the option to set a temporary password for them, but you'll need to send it through your own channels - we won't email passwords directly because that's not secure. [Password reset procedures](/authenticate/authentication-methods/password-authentication/) </details> <details> <summary><strong>How should I help users who aren't receiving Kinde SMS auth codes?</strong></summary> Start with the basics - did they enter their phone number correctly with the right country code? Do they have cell reception? Are they in a country where SMS might be restricted? Then check your end - is your Twilio account funded and configured properly? SMS delivery can be finicky, especially internationally, so having backup contact methods is always smart. [Phone authentication setup](/authenticate/authentication-methods/phone-authentication/) </details> <details> <summary><strong>How should I help users who aren't receiving Kinde auth codes via email?</strong></summary> Start with the basics - could the email have been caught in their spam or been caught by their organization's firewall and have been added to a supression list? Have them check this first. If you have [custom SMTP email delivery](/integrate/third-party-tools/kinde-resend-custom-smtp/) set up, you should be able to check logs from the delivery provider. If you rely on Kinde to deliver emails, check the same basic things with the recipient and ask them to try again. If you need to, contact the Kinde support team to check our logs to see if there was an email disruption. [Phone authentication setup](/authenticate/authentication-methods/phone-authentication/) </details> <details> <summary><strong>If I want to change which providers can be used for auth in Kinde, how do I support my customers?</strong></summary> If users were relying on a social or enterprise connection that got removed or changed, they're stuck until you fix it. Before deleting any connection, make sure nobody's using it for auth. If you need to switch providers, set up the new one first, then help users transition by linking their accounts or setting up alternative auth methods. Always have a backup plan. [Manage social connections](/authenticate/social-sign-in/add-social-sign-in/) </details> <details> <summary><strong>Why are my Kinde authentication redirects failing?</strong></summary> Nine times out of ten, it's a URL mismatch. Your callback URLs in Kinde need to match exactly what's in your app code and any social provider configs - we're talking case-sensitive, protocol-specific matching here. If you're using custom domains, double-check that your DNS records are set up correctly and SSL certificates are active. Also remember that custom domain tokens and Kinde subdomain tokens don't play nice together - pick one and stick with it. [Custom domain setup](/build/domains/pointing-your-domain/) </details> <details> <summary><strong>How do I debug Kinde OAuth 2.0 authentication errors?</strong></summary> The error names are pretty self-explanatory once you know what to look for. `invalid_client` usually means wrong client ID or secret, `invalid_grant` means your authorization code expired (they only last a short time), and `invalid_scope` means you're asking for something we don't support. Check your credentials first, make sure you're exchanging codes quickly, and verify your requested scopes are valid. Give users helpful error messages instead of raw OAuth codes - nobody wants to see "invalid_grant" when they're just trying to sign in. [OAuth 2.0 validation and errors](/build/tokens/token-validation-errors/) </details> <details> <summary><strong>What should I check in Kinde when users report authentication isn't working on mobile?</strong></summary> Mobile auth has its own special challenges. For React Native, make sure your deep linking is configured properly with the right URL schemes for both iOS and Android. Check that your redirect URLs use the correct custom scheme format like `myapp://your_kinde_domain.kinde.com/kinde_callback`. And here's a fun fact: Google doesn't support auth in webview, so make sure you're using proper browser-based flows. If your users are not receiving verification codes and you have Twilio set up, you can check the Twilio logs to help you troubleshoot. [React Native SDK](/developer-tools/sdks/native/react-native-sdk/) and [Set up phone auth with Twilio](/authenticate/authentication-methods/phone-authentication/) </details> <details> <summary><strong>How do I handle Kinde authentication state persistence across different environments?</strong></summary> For production, custom domains are your friend - they enable secure cookie storage that survives page refreshes. For local development, you can use the local storage escape hatch (just remember to remove it before going live). On your backend, implement proper session management using encrypted cookies or shared cache systems if you're running multiple servers. The right approach depends on your architecture, but security should always come first. [TypeScript SDK session management](/developer-tools/sdks/backend/typescript-sdk/) </details> ## Best practices & security <details> <summary><strong>What security considerations should I communicate to my customers about Kinde authentication choices?</strong></summary> Be honest about the security trade-offs without scaring people away. Passwordless is genuinely more secure than passwords, MFA adds real protection (not just security theater), and social sign-in can be both convenient and secure when done right. If you're offering password auth, nudge users toward password managers - most people's password habits are... not great. And here's something most auth providers won't tell you: we store passwords as encrypted hashes that literally cannot be deciphered, so even we can't see what users set. [Password authentication security](/authenticate/authentication-methods/password-authentication/) </details> <details> <summary><strong>How do I ensure my Kinde authentication setup scales with business growth?</strong></summary> Start simple and add complexity as you need it - don't over-engineer from day one. Begin with email auth, then layer in social sign-in, MFA, and enterprise connections as your customer base grows. Use organizations to handle multi-tenant setups where each customer needs their own user management. Set up your foundation at the environment level, then customize per organization when customers have specific needs. And seriously, implement custom domains early if you can - it makes everything smoother later. [Kinde for different business models](/build/set-up-options/kinde-business-model/) </details> <details> <summary><strong>What's the recommended approach for handling user migration from other auth providers to Kinde?</strong></summary> Set up your auth methods in Kinde first, then export and import user data via CSV or JSON. If you import passwords too, your users won't notice anything changed - which is exactly what you want. If you're switching auth methods (like going passwordless), give users a heads up about what's changing. Test everything in a sandbox environment first, and keep an eye out for edge cases like users who change their passwords during the migration window. [Switch to Kinde migration guide](/get-started/switch-to-kinde/switch-to-kinde-for-user-authentication/) </details> ## Advanced integration <details> <summary><strong>How do I implement Kinde custom authentication pages while maintaining security?</strong></summary> You can build your own sign-up and sign-in pages to match your brand perfectly, but we'll still handle the security-critical stuff like verification and MFA. Use connection IDs and login hints in your auth URLs to route users directly to specific authentication methods. Think of it as having your cake and eating it too - custom experience with bulletproof security. Just remember that some screens (password entry, code verification) stay with us because that's where the security magic happens. [Custom authentication pages](/authenticate/custom-configurations/custom-authentication-pages/) </details> <details> <summary><strong>What's the best way to handle cross-subdomain authentication in Kinde, for complex applications?</strong></summary> Custom domains and proper cookie configuration are your best friends here. Set cookies to the root domain instead of subdomains so they're accessible across your entire ecosystem. For PHP apps, we've got helper functions to make this easy. Test everything thoroughly across all your subdomains - nothing's more embarrassing than users getting stuck switching between `app.yoursite.com` and `dashboard.yoursite.com`. [PHP SDK domain configuration](/developer-tools/sdks/backend/php-sdk/) </details> <details> <summary><strong>How should I configure Kinde authentication for different business models (B2C vs B2B)?</strong></summary> B2C is straightforward - configure everything at the business level with easy social sign-in and email auth. B2B gets more interesting because you're serving multiple companies, each with their own needs. Use organizations to create separate tenant management, set up enterprise connections for business customers who need SAML or Entra ID, and keep simpler social auth for any consumer-facing parts of your platform. It's all about matching Kinde auth options to what your customer actually needs. [Business model configuration](/build/set-up-options/kinde-business-model/) </details>

# Authenticate - About auth - User communication in Kinde

> Learn about how Kinde communicates with users through emails and SMS for authentication purposes.

user communication, email, SMS, OTP, verification, Twilio, webhooks
authenticate

Kinde only sends emails or texts to users as part of the authentication experience, for example to send one-time passwords or to verify user identity for self-sign-up. We’ve kept communication features to a bare minimum for authentication, so that we do not send unwanted or unsolicited communication to users, on behalf of your business. ## Emails sent from Kinde The following emails are sent from no-reply@kinde.com. - Invitations to join your business on Kinde when you manually add a new team member - Export data warning emails to ensure only authorized people can get user data out of your business. - (Unless you enter custom email sender details) verification and authentication emails for sign-up, sign-in, multi-factor authentication, and password reset. To configure authentication emails to come from your own email provider, see [Customize email sender](/get-started/connect/customize-email-sender/). ## Kinde does not send emails in these situations - Invitations to users if you add them via API - Invitations to users if you add them in bulk via import - Emails to team members about your Kinde subscription or admin activity If you want certain user events in Kinde to trigger an email, you can set this up with [webhooks](/integrate/webhooks/add-manage-webhooks/). ## Communication when users are added in bulk Our features for adding users in bulk (such as via API or import) are designed with a smooth migration experience in mind. Rather than send confusing emails to existing user bases, we enable a silent transfer of the authentication experience, between your previous supplier and Kinde. That’s why we don’t send emails when users are added to Kinde this way. <Aside> Use [webhooks](/integrate/webhooks/add-manage-webhooks/) to prompt actions triggered by Kinde events </Aside> ## SMS communication for phone authentication Kinde supports [phone authentication](/authenticate/authentication-methods/phone-authentication/) as a primary and secondary authentication factor. To use phone authentication, you need to have a [Twilio](https://www.twilio.com/en-us) account and configure the account details in Kinde. Twilio is a third-party provider who offer bulk messaging services. When a user authenticates via phone number, an SMS containing a one-time passcode is sent. The SMS is in a specific format that cannot be edited. ```text 123456 is your one-time code to sign in to [kinde business URL] #123456 ``` Kinde does not communicate anything else to users via SMS.

# Authenticate - Auth guides - Guide to enterprise auth and user identities

> Understanding why Kinde enforces one enterprise identity per user for security, account integrity, and simplified tenant management.

enterprise identity, SSO, identity provider, IdP, security, account integrity, tenant management
authenticate

At Kinde, each user can only have one enterprise identity provider (IdP) connection as part of their user profile. This is because we want to keep things simple, secure, and reliable. We get asked about this regularly, so this document explains our reasoning from a security and architectural perspective. ## What is an enterprise connection? An enterprise connection allows users to sign in to your product using their organization’s identity provider — such as Okta, Azure AD, or Google Workspace. This enables Single Sign-On (SSO), centralized user management, and improved security for enterprise customers. ## Why only one identity per user? Many customer identity platforms, including Kinde, enforce a one-to-one relationship between a user and an enterprise connection. Here’s why: ### 1. Prevents identity conflicts If a user could sign in through multiple enterprise providers, it becomes difficult to determine whether those identities belong to the same person. This can result in: - Duplicate accounts for the same user - Conflicting user attributes (email, name, roles, etc.) - Confusion around permissions and organization membership Restricting to a single enterprise connection ensures a consistent and predictable identity model. ### 2. Security and account Integrity Allowing multiple enterprise connections introduces significant security risks: - **Risk of account hijacking:** If a user can link multiple IdPs, and identity claims like email or subject ID (`sub`) overlap or are not verified consistently, it becomes possible for unauthorized users to gain access to another user’s account. - **Inconsistent identity claims:** Different IdPs use different formats and identifiers. One provider may use an email address, another a unique internal ID. Reconciling these automatically increases the risk of incorrect mappings and privilege escalation. - **Reduced auditability:** Security audits and access logs rely on a single, traceable identity. If a user can authenticate through multiple IdPs, it becomes harder to guarantee that all actions are traceable to a single, verified identity. - **Clear accountability:** With one connection per user, the responsibility for identity management, password resets, session revocation, and breach response remains clearly with the source identity provider. ### 3. Simplified tenant and access management In multi-tenant applications, each enterprise typically has its own workspace or organization. Supporting one IdP per user: - Keeps tenant boundaries clean - Prevents role or permission leakage between organizations - Simplifies access control logic ## What if someone needs access to multiple organizations? We support users belonging to multiple organizations within Kinde. In edge cases (such as contractors working across companies) we recommend adding [enterprise connections at the organization level](/authenticate/enterprise-connections/enterprise-connections-b2b/). This means the user signs in directly to the relevant organization, with no confusion about where to be routed. This feature is only available on the Kinde Scale plan. If you are not on the relevant plan, other ways to handle this include: - Use separate emails for each organization - Use different auth methods per organization ## Built for security, designed for clarity This choice to allow only one enterprise identity per user aligns with industry best practices and helps keep your users, data, and systems secure. By enforcing this, Kinde provides a stable and trusted identity layer you can build on with confidence. If you have any questions about more advanced SSO or identity configurations, [contact our team](https://kinde.com/contact). We’re happy to help.

# Authenticate - Auth guides - Mixed auth set up for B2B and B2C

> Complete guide to setting up unified authentication for mixed B2B and B2C businesses using Kinde Scale plan features.

B2B, B2C, mixed authentication, enterprise connections, SAML, organizations, home realm discovery
authenticate

If you have an app or site that supports a mix of business customers and direct customers, this guide shows you how to set up authentication in Kinde to meet both these needs. For example, say you run a finance business and you have separate sign-ins for accounting business partners and direct customers. Accounting businesses sign in with an enterprise identity, e.g. SAML and direct customers sign in with email and an OTP. This topic explains how to create a simple, unified experience for both groups. ## You’ll need the Kinde Scale plan To set up authentication for a mixed B2B and B2C business that includes multiple enterprise connections, you need to be on the [Kinde Scale plan](https://kinde.com/pricing/). This is the only Kinde plan that gives you access to the features you need: - Multiple enterprise connections (e.g. SAML) - Advanced organizations - for managing users and access for business customers You get 5 enterprise connections and 5 advanced organizations included with Kinde Scale. You can add more, but costs apply. ## How to build a unified sign-in experience A unified experience is where everyone signs in through the same sign in screen, and they are routed to the relevant workflow for authentication. ![unified sign in](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/a14aa42c-3c66-45de-dc80-ee7c9df41b00/public) This simplifies the sign in experience for all your users, including your enterprise connections. ### Example of a unified authentication experience This is what happens behind the scenes with the auth setup. ![image.png](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/ff106642-c42f-44cf-4a89-84406a717000/public) ### Step 1: Set up auth for your B2C users In this scenario, your direct customers will sign in with email and a one-time-passcode (OTP). To set this up: 1. [Enable email + code authentication in your business.](/authenticate/authentication-methods/passwordless-authentication/) 2. [Set email + code as the sign in method in your default organization.](/authenticate/manage-authentication/organization-auth-experience/) 3. (Optional) [Set an organization policy to allow users to sign up to the default org using an email address](/build/organizations/allow-user-signup-org/). ### Step 2: Set up auth for your B2B users Authentication for business customers can be more complex, with additional security considerations and set up time involved. For example, a partner business may require employees to only access your web app using their business email and for authentication to be centralised with their own identity provider via SAML. Let’s go through the process for setting up 5 SAML enterprise connections for 5 different business customers. 1. [Add 5 separate enterprise connections to Kinde](/authenticate/enterprise-connections/about-enterprise-connections/). E.g. EC1, EC2, EC3, and so on. 1. Configure each connection with the domain information, including email domains in the [home realm discovery](/authenticate/enterprise-connections/about-enterprise-connections/#home-realm-discovery) field. You may need to ask the customer’s IT team for this information. 2. (Recommended) Switch on the **Create user on sign up** option to [enable JIT provisioning](/authenticate/enterprise-connections/provision-users-enterprise/). 2. [Create 5 organizations](/build/organizations/add-and-manage-organizations/), one for each business customer (and connection), and select only [the relevant enterprise connection for each organization](/authenticate/manage-authentication/organization-auth-experience/). For example: | For this org… | Switch on this auth connection… | | -------------- | ------------------------------- | | Organization 1 | EC1 (domain x home realm) | | Organization 2 | EC2 (domain y home realm) | | Organization 3 | EC3 (domain a home realm) | | Organization 4 | EC4 (domain b home realm) | | Organization 5 | EC5 (domain c home realm) | 3. In each organization: 1. Go to **Policies** and add the relevant domain to the **Allowed domains** field. 2. Select **Auto-add users from allowed domains**. This activates JIT provisioning for users signing up from this domain. 3. Select **Save**. With home realm discovery and allowed domains set, when a user enters an email that matches the domain name they will be routed through that enterprise connection. There is no need for them to self-select which connection they belong to. ### Step 3: Enable authentication for your application To achieve the above scenario, all the supported sign-in methods need to be switched on in your application. For example, switch on Email + code, EC1, EC2, EC3, EC4, and EC5. ![Auth options to switch on in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/cf3a393d-b977-4de3-2bd1-dae72ec93f00/public) ## Optimize your auth flow This unified model of authentication can be extended to 10’s or 100’s of organizations, all while maintaining the same sign in screen. Other situations you can cater for include: - [Adding MFA for an organization's users](/authenticate/multi-factor-auth/mfa-per-org/) - Adding other [enterprise connections](/authenticate/enterprise-connections/about-enterprise-connections/) (e.g. [Google Workspace](/authenticate/enterprise-connections/custom-saml-google-workspace/) or [Microsoft Entra ID](/authenticate/enterprise-connections/azure/)) - [Auto-assigning user roles](/manage-users/roles-and-permissions/default-user-roles/)

# Authenticate - Auth guides - Pass parameters to identity providers

> Learn how to pass static and dynamic parameters to identity providers during authentication for improved user experience.

upstream params, identity provider, OAuth 2.0, SAML, login_hint, prompt, account switcher
authenticate

You can pass provider-specific parameters to an Identity Provider (IdP) during authentication. These are also known as 'upstream params'. The values your pass can either be static per connection or dynamic per user. There's a number of reason why you might want to use upstream params: - to create a smoother sign in experience - by passing the email through - to offer an account switcher (such as the Google account switcher) during sign in Upstream params are available for OAuth 2.0 connections, e.g. [social connections](/authenticate/social-sign-in/add-social-sign-in/), [Entra ID OAuth 2.0 enterprise connection](/authenticate/enterprise-connections/azure/), and as part of [advanced configurations](/authenticate/enterprise-connections/advanced-saml-configurations/) in SAML connections. ## Limitations Every identity provider has their own set of supported parameters and values, so you'll need to check their documentation to determine which URL parameters are supported. ## Static parameters Static parameters can be useful when you have specific values you always want to pass on to the IDP. These are set in the connecction configuration screen. ![Screen shot of google connection screen and upstream params field](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/3fa86bd8-9005-4022-7118-fc93ce4f4a00/public) The Upstream parameter field accepts JSON and the structure is as follows: ```json { "<param_name_to_pass>": { "value": "<your_hardcoded_value>" } } ``` Replace `<param_name_to_pass>` with the name of the parameter you wish to pass upstream to the IDP. Replace `<your_hardcoded_value>` with the value of the parameter you wish to pass upstream. ### Example: Force the google account selector to display on sign in If you want Google to always show the account selector even if the user is already logged in with a Google account, pass the `prompt=select_account` parameter from Kinde. This is how that would look: ```json { "prompt": { "value": "select_account" } } ``` Now, when your user clicks on the Google button and Kinde creates the URL to redirect to Google, it will append`&prompt=select_account`. ## Dynamic parameters Dynamic parameters cover the case where you don't know the value of the parameter ahead of time, and it needs to be populated on the fly during the auth flow. For example, if you need to pass on a parameter that was provided to Kinde in the auth URL. This is the structure. ```json { "<param_name_to_pass>": { "alias": "<dynamic_param_name>" } } ``` The `alias` keyword tells Kinde which parameter from your auth url to use, and the value to pass upstream to the IDP. Here is an example where we provide `login_hint` as part of the auth URL, where the email [`&login_hint=hello@example.com`](mailto:&login_hint=hello@example.com) is included on the URL. ```html https://<your_kinde_subdomain >.kinde.com/oauth2/auth ?response_type=code &client_id=<your_kinde_client_id> &redirect_uri=<your_app_redirect_url> &scope=openid%20profile%20email &state=abc &login_hint=hello@example.com</your_app_redirect_url ></your_kinde_client_id ></your_kinde_subdomain > ``` In this case both Kinde and the IDP use the parameter name `login_hint` so the configuration is the same on both sides: Add this to the connection configuration: } } ```` In this case we are saying pass the `login_hint` parameter upstream to the IDP with the value Kinde received in the `login_hint` auth url param. So `&login_hint=hello@example.com` would be passed on to the provider. Where the `alias` becomes especially powerful is when you want to re-map a parameter name to match the one an IDP expects. For example, let’s say that our IDP expects `username` instead of `login_hint` for the same value, in this case our JSON would look like this: ```json { "username": { "alias": "login_hint" } } ```` In this case we are saying pass the `username` parameter upstream to the IDP with the value Kinde received in the `login_hint` auth url param. We remap the email value from `login_hint` to `username` and the parameter `&username=hello@example.com` would be passed on to the IDP. ## Kinde-provided aliases When an email address is populated during the auth flow, we make this available via the `login_hint` alias. You might use this if you are using Home realm discovery with an Entra ID OAuth2.0 connection, and you want to pass the URL that the user entered on Kinde as the `login_hint`, upstream to Entra, to prevent the user having to enter their email twice. If the user enters `hello@example.com` in the Kinde email field with the following configuration active, we set the `login_hint` parameter to `hello@example.com` via the Kinde provided alias. ```json { "login_hint": { "alias": "login_hint" } } ``` ## Multiple parameters You can send multple parameters this way and mix-and-match between dynamic and static in the same configuration. For example if the user entered `hello@example.com` and the following was configured: ```json { "prompt": { "value": "login" }, "username": { "alias": "login_hint" } } ``` This would result in `&prompt=login&username=hello@example.com` ## Supported aliases The values which can be used as an `alias` are: - `prompt` - `login_hint` If you need other aliases added, let us know via a [feedback form](https://updates.kinde.com/).

# Authenticate - Authentication methods - About email authentication

> Comprehensive overview of email authentication methods including verification, account linking, and customization options.

email authentication, email verification, account linking, Gravatar, login_hint, profile pictures
authenticate

The most common application signup and sign in method for users is email. Kinde supports a number of approaches to email authentication. You can set up email authentication so that: - users sign up with their preferred email, but don’t need a password - users sign up with their preferred email and set their own password - only [users you invite](/authenticate/custom-configurations/disable-sign-up/) can sign up and sign in using email ## Verification code email from Kinde to your users To verify a user, Kinde sends a verification code to the email they sign up with. If you’ve also enabled passwordless authentication, this is also where the one time code is sent each time they sign in. The verification email has limited customizations. - You can add your own logo - You can change the sender name, but you cannot change the sender email address - You cannot edit the email content - Email content references your [business] name in Kinde. For example: <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c38710e9-889e-440e-5b6d-3421bb377900/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## All email sign-ups must verify their email address If your authentication method requires users to sign up with an email, they will be prompted to verify their email address using a one time code. Even if they subsequently sign on using their own password, the user must verify their email the first time by entering a one time code. If a user signs up via a social provider that does not require an email (such as Twitter or Apple), or via another OAuth2 protocol that does not pass the email to us, they will be prompted to enter an email address so their account can be verified. <Aside> The exception for the above is if you import users and the `email_verified` parameter is `true`. </Aside> ## Kinde automatically links accounts with verified emails Unlike some other authentication providers, Kinde automatically matches accounts on sign up by matching verified email addresses. This means that if a user signs up with Google the first time, and they come back and sign up again with Slack, and the same email is detected (and we know they are both verified), then the accounts get linked. This reduces duplication and creates a better experience for users. ## Pre-populate the email field on sign in If you only allow users that you invite to sign up or sign in to your app, you can pre-populate the email field in the sign in window. This can only be achieved by including the `login_hint` parameter as part of the `login` method. It cannot be set in the Kinde UI. When your project knows which user it is trying to authenticate, it can provide their email in this parameter as a hint to Kinde. Passing this hint pre-fills the email box on the sign-up and sign-in screens. ## How profile pictures are passed to Kinde Typically, Kinde receives user profile pictures via the email provider, e.g. Google. If no picture is attached to a profile, Kinde sets the picture to use a Gravatar URL instead. See also [Switch off Gravatar fallback](/authenticate/custom-configurations/authentication-experience/#switch-off-gravatar-fallback-for-profile-pictures).

# Authenticate - Authentication methods - Email deliverability in Kinde

> Guide to email deliverability best practices including custom email senders, authentication records, and troubleshooting delivery issues.

email deliverability, SMTP, SPF, DMARC, DKIM, email authentication, spam prevention
authenticate

Kinde encourages users to configure their own email sender, so that verification and other emails are sent form your own business, and not Kinde. When emails are sent via Kinde, we support the email routing, and are proactive about monitoring verification email deliverability and speed. This topic describes email delivery via Kinde, deliverability factors, and some common reasons why delivery can fail. ## Manage your own email sender By default, when you first start using Kinde, all emails are sent from @kinde.com. But you can set up your environments to use your own email, so users receive authentication emails from @yourbusiness.com. You’ll want to configure this before your production environment goes live. All you need is to add SMTP details in Kinde settings. See [Customize email sender](/get-started/connect/customize-email-sender/). ## Emails sent from Kinde Even if you enter custom sender details, these emails will still be sent from Kinde: - Invitation to join business team - triggered by manual or API addition of team member - Warnings and notifications of data export ## Deliverability factors Email delivery is dependent on a number of factors. ### IP address reputation and blocklists Email providers check against a pool of IP addresses and domain blocklists to help protect against bad actors. They constantly monitor to make sure IP addresses are not on any of these lists. If you experience issues, check that your domain doesn't exist on any of these lists. ### Domain name reputation Every domain name (i.e. `example.com`, `kinde.com`, etc.) has its own reputation score. Newer domains do not have a high score, and this may impact deliverability. ### Setup a real email address Email providers will check if there's an actual mailbox behind the "from address" of an email. Make sure when you set your custom email sender, that you use a real email address such as `notifications@yourbusiness.com`. ### Email content Kinde email content is optimized to (as far as we can) ensure our communications don’t get identified by providers as spam. Maintaining deliverability is one of the reasons we have limited the ability to edit email content. ### SPF, DMARC, and DKIM for email authentication SPF (Sender Policy Framework), DMARC (Domain-based Message Authentication, Reporting, and Conformance), and DKIM (DomainKeys Identified Mail) are email authentication methods used to combat email spoofing, phishing, and other forms of email fraud. These records add a digital signature to every outgoing message, which allows your provider to verify that emails were actually sent from you. Almost all email providers look for these to be set as a strong signal of legitimacy. ### Strengthen email authentication with your provider You and your email provider are ultimately responsible for ensuring the right level security and risk management for email authentication. Because Kinde allows you to use any provider you like, check their documentation to find out if their policies and approach meet your needs. ## Provider-related issues Despite all we can do, verification emails still occasionally end up in spam or quarantined. The cases below are specific, but might help you troubleshoot is they arise. ### Gmail Delivery addresses that are part of Google Workspace can sometimes be delayed by about 4 minutes, due to pre-delivery message scanning. It can help to sign up for Gmail's postmaster tools, to help troubleshoot issues. ### Microsoft (Hotmail / Outlook / Office365) Microsoft Defender's aggressive anti-spam filters sometimes stop verification emails reaching certain Outlook inboxes. Then the email is placed in quarantine and the administrator has to restore it, for it to be delivered. With Kinde, this should be rare, as we only send OTPs and not magic links. Access Outlook Sender Support and check you are following recommendations.

# Authenticate - Authentication methods - Password authentication

> Complete guide to password authentication in Kinde including security features, password strength requirements, and reset options.

password authentication, password strength, password reset, security, hash encryption, MFA
authenticate

Password authentication is where an end user supplies and maintains their own password to access your app or project. Depending on your authentication needs and security requirements, you might be okay to allow users to authenticate with a password. However, we recommend using a more secure method, such as through one-time-passwords, or by adding [multi-factor authentication](/authenticate/multi-factor-auth/about-multi-factor-authentication/) to the sign in experience. ## Passwords and identity verification To reset a password for a user, or allow them to reset their own password, they need to have a [verified contact identit](/authenticate/about-auth/identity-and-verification/)y such as an email in their Kinde profile. You’ll need this to securely set a temporary password or to trigger a password reset for a user. ## Password visibility and encryption The way Kinde is built ensures that user passwords can only be stored as hash-encrypted strings, meaning they are not visible and cannot be deciphered or accessed to be exploited. Neither you in your business or Kinde can see any passwords that a user has set. ## Password strength Kinde supports the following password requirements: - 8 character minimum - Blocking of 1,000,000 most common passwords - 5 incorrect attempts locks account out for 5 minutes - No complexity requirements or character limitations - combined with allowing long passwords, this provides better security and ease of use. For example, it’s harder for a computer to crack `FiremanSoccerPoodleLemon` than `FireSoc!22`, and also easier for a human to remember. If using passwords for authentication, we do recommend adding multi-factor authentication as a requirement or option, for added security. ## Options for resetting a password There are several ways to reset a user’s password. ### The user can select ‘forgot password’ User’s can trigger a password reset by selecting ‘forgot password’ when they attempt to sign in. When they do this, they will be sent a one-time passcode via email. When they enter the code, they will be prompted to reset their password. ### Force a password reset via Kinde or API You can trigger a password reset via the Kinde admin or via API. This is only suitable if you have an email for the user, as they will be sent a one-time passcode when they try to sign in next. They must enter the code to reset their password. See [Reset a user’s password](/manage-users/access-control/reset-user-password/). ### Issue a temporary password You can set a single-use password for new or existing users via the Kinde admin or via the Kinde Management API. Once you set the password, you need to communicate it to the user via your own chosen method - it cannot be sent from Kinde. The user enters the temporary password to sign up or sign in, then they set their own password. See [Set a temporary password](/manage-users/access-control/set-temporary-password/). ## Enable password authentication across apps 1. Go to **Settings > Authentication**. 2. In the **Password** section, select **Configure** on the relevant password tile: **Email + password** or **Username**. A configuration window opens. 3. Scroll to the bottom and switch password authentication on for the apps you want. 4. Select **Save**. ## Enable password authentication for a single app 1. Go to **Settings > Applications**. 2. Select **Configure** on the relevant application tile. 3. Select **Authentication** in the menu. 4. Switch on the password options you want. 5. Select **Save**.

# Authenticate - Authentication methods - Passwordless authentication

> Guide to passwordless authentication using one-time passcodes (OTP) via email or phone, including setup and security considerations.

passwordless authentication, OTP, one-time passcode, email code, phone code, security
authenticate

Passwordless authentication is a type of authentication that does not require end-users to set or maintain passwords for access to an application. Instead, they authenticate using a one-time passcode (OTP). <Aside> The email + passwordless method is switched on by default in all new Kinde businesses </Aside> ## About one-time passcodes (OTPs) Kinde does not support magic links as a password alternative, instead, we prefer to use one-time passcodes (OTPs) as they are more secure, and require manual entry as opposed to a single click. For example, someone with access to your email could click a link to get instant access to an application, but they cannot use the code unless they have initiated the correct sign in flow and have your sign-in identity as well. If you receive the OTP via SMS, someone would need to have your device and unlock code, to access it. A OTP can be issued via email or phone, depending how you have set up authentication. It is also common to use OTPs as a factor in [multi-factor authentication](/authenticate/multi-factor-auth/about-multi-factor-authentication/). Passcodes issued from Kinde expire after 2 hours. ## Set up passwordless authentication 1. In Kinde, go to **Settings >** **Authentication**. 2. In the **Passwordless** section, select **Configure** on the relevant tile. 3. If you select the **Email + code** tile: 1. Select which applications will use this authentication method. 2. Select **Save**. 4. If you select the **Phone** tile: 1. Select which applications will use this authentication method. 2. Select **Save**. 5. If you select the **Username + code** tile: 1. Select which applications will use this authentication method. 2. Select **Save**. <Aside> **You can test this feature** but passwordless phone authentication requires that you have a [Twilio](https://www.twilio.com/en-us) account. You need to enter your Twilio account details and [upgrade to Kinde Pro](https://kinde.com/pricing/) if you want your users to authenticate this way. [Learn more](/authenticate/authentication-methods/phone-authentication/). </Aside> ## If a user does not receive a code It should not happen often, but occasionally users do not receive their passcode. Here's a few suggestions. - Tell the user to check their junk folder - some email providers, systems, and devices have security in place to prevent spam. An OTP from an unknown provider (like Kinde) might get accidentally treated as such. - Once or twice we have come across a domain provider who has added Kinde to a denylist and OTPs from us get rejected. You'll need to contact us so we can investigate and arrange allowlisting. This is a very rare cause of failed OTPs. ## Attack protection settings Kinde allows you to control the number of sign-in attempts a user gets, how long they get locked out after a failed sign-in attempt, etc. See [Attack protection](/build/set-up-options/attack-protection/).

# Authenticate - Authentication methods - Set up phone or SMS authentication

> Complete setup guide for phone/SMS authentication using Twilio, including configuration, MFA integration, and message formatting.

phone authentication, SMS, Twilio, MFA, A2P messaging, 10DLC, verification code
authenticate

You can allow users to use their phone as a primary method for authentication. This is a passwordless method, where the user is sent a verification code via SMS. SMS can also be included as a secondary factor if you have [multi-factor authentication](/authenticate/multi-factor-auth/about-multi-factor-authentication/) set up. <Aside> This feature requires paid third-party services to use. Rates and limitations apply. </Aside> ## (Existing phone auth Twilio users only) Switch on SMS for MFA 1. In Kinde, go to **Settings > Environment > SMS**. 2. Scroll to the bottom and switch on the **Use this service for SMS MFA** option. 3. Select **Save**. ## Benefits of using a third-party SMS service instead of Kinde - Gives you full control over the SMS delivery nuances, such as SenderID, country registrations, and detailed delivery metrics. - You can register dedicated short codes or sender IDs in countries that have strict SMS sending regulations like Ireland, NZ and Canada, which will greatly improve deliverability. - Access to delivery logs and other service quality details for troubleshooting. ## SMS provider requirements (Twilio) SMS authentication requires the services of a messaging provider, in this case, [Twilio](https://www.twilio.com/en-us). You need a [Twilio](https://www.twilio.com/en-us) business account to ensure messaging works for local and overseas phone numbers. Phone authentication interactions are also known as [A2P (Application to Person)](https://www.twilio.com/docs/glossary/what-a2p-sms-application-person-messaging) messaging. Before you implement A2P, check if you need to register your business for 10DLC (10 Digit Long Code) support to be able to send messages, as this is required in some locations. We also recommend you check [Twilio’s guidelines for setting up messaging](https://www.twilio.com/en-us/guidelines/sms), and carefully follow procedures for registration, and SMS policies for all relevant countries. ## What you need <Aside> If you just want to test this feature first, Kinde allows you to send 10 SMS messages per month without setting up Twilio. If you want the feature to be live for your users, you must implement the full Twilio setup. </Aside> You’ll need the following details that are in the dashboard of your [Twilio account](https://www.twilio.com/en-us). - The SID of your Twilio account - The Auth Token for your Twilio account - Your Twilio phone number or the Messaging Service SID (if you set one up) ![Twilio account info](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/1da93a0a-9fd3-437f-5357-be90f3f3c200/public) Refer to the [Twilio documentation](https://www.twilio.com/docs/messaging/services/tutorials/send-messages-with-messaging-services) for assistance setting up. ## Configure phone SMS auth in Kinde After you set this up, you can use SMS for both phone authentication and SMS MFA. 1. In Kinde, go to **Settings > Environment > SMS**. 2. Select the **Default country** that you want to show on the authentication screen when users sign in. 3. Enter the Twilio details from your Twilio account (see above) in the relevant fields. ![twilio details](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4c857ff9-ff87-44ea-a488-3e2b511caf00/public) 4. In the **SMS source** field, select either the **Use** **Messaging service** or **Use phone number**. Verification codes will be sent from whichever you choose. <Aside> Note that the Twilio messaging service is more suitable for global applications as it detects where the sign in comes from and sends from an appropriate number. </Aside> 5. Depending on your selection in the previous step, enter either the **Messaging service SID** or Twilio **Phone number** in the relevant field. ![Twilio config](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/749a80bc-d6b7-40b0-950a-650c7775b900/public) 6. Select if you want to use a fallback service if the provider service is interrupted. ![option to use kinde sms as fallback](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/9bdd2ef1-c308-4307-c84e-bc8ffdbfe200/public) 7. Select **Save**. ## Switch on phone authentication for an application After you have set up Twilio details, you’re ready to switch on phone or SMS auth for your applications. 1. Go to **Settings > Environment > Authentication**. 2. In the **Passwordless** section, select **Configure** on the **Phone** tile. 3. Switch on the auth method for the applications you want. 4. Select **Save**. ## Switch on SMS as a factor in MFA If MFA is required or optional for your users, you may want to use the Twilio service for SMS MFA. 1. Go to **Settings > Environment > Multi-factor auth**. 2. Under **Additional authentication methods**, switch on **SMS**. 3. Select **Save**. ## SMS message format You can’t customize the code message that user’s receive. We use a standard format as follows, to allow for easier translation. **Your verification code is [xxxxxx]** ## Connection ID When you configure phone authentication, you’ll see that a Connection ID is automatically assigned. If you’re building a [custom authentication experience](/authenticate/custom-configurations/custom-authentication-pages/), you’ll need the ID to trigger the phone authentication workflow.

# Authenticate - Authentication methods - Select authentication options

> Comprehensive guide to configuring all authentication methods in Kinde including email, phone, username, social, and enterprise connections.

authentication setup, email auth, phone auth, username auth, social auth, enterprise auth, SAML, OAuth
authenticate

Kinde supports many authentication options that let you control how users access your applications. You can set different authentication requirements for different applications, and also for different organizations (if you use [organizations](/build/organizations/add-and-manage-organizations/)). Set up all your required authentication methods at the Environment level first. ## Switch on **email authentication** 1. Go to **Settings > Environment > Authentication**. 2. Select **Configure** on the **Email** tile in either the **Passwordless** or **Password** section. 3. In the window that appears, switch the authentication option on or off for each application you have. Note that you **cannot** use passwordless and password authentication for the same app. 4. Select **Save**. ## Switch on phone authentication You can allow users to authenticate using their phone number as their sign in identity. For full details, see [Set up phone authentication](/authenticate/authentication-methods/phone-authentication/). 1. Go to **Settings > Environment > Authentication**. 2. In the **Passwordless** section, select **Configure** on the **Phone** tile. 3. In the window that appears, switch the authentication option on or off for each application you have. 4. Select **Save**. ## Switch on username + password authentication You can allow users to authenticate using a username as their sign-in identity. They will still need to provide an email on sign-up, but will be able to sign in with a username-password combination from then on. Learn more about using [usernames for auth](/authenticate/authentication-methods/username-authentication/). 1. Go to **Settings > Environment > Authentication**. 2. In the **Password** section, select **Configure** on the **Username** tile. 3. In the window that appears, switch the authentication option on or off for each application you have. 4. Select **Save**. ## Switch on username + passwordless authentication You can allow users to authenticate using a username as their sign-in identity. They will still need to provide an email on sign-up, but will be able to sign in with a username-OTP combination from then on. Learn more about using [passwordless auth](/authenticate/authentication-methods/passwordless-authentication/). 1. Go to **Settings > Environment > Authentication**. 2. In the **Passwordless** section, select **Configure** on the **Username + code** tile. 3. In the window that appears, switch the authentication option on or off for each application you have. 4. Select **Save**. ## Switch on **social authentication** 1. Go to **Settings > Environment > Authentication**. 2. In the **Social connections** section, select **Add connection**. 3. In the window that appears, select the social apps you want and then select **Save**. 4. You need to set up the connection to each social app you chose, see [Add social sign in](/authenticate/social-sign-in/add-social-sign-in/). ## Use enterprise or custom authentication Follow the instructions for the relevant authentication method. See: - [Microsoft Entra ID](/authenticate/enterprise-connections/azure/) (was Azure AD) - [SAML](/authenticate/enterprise-connections/custom-saml/) ## Add and manage social and enterprise connections via API Use [Kinde’s management API](/kinde-apis/management#tag/connections) to manage social and enterprise connections. You can view a list of connections, add a new connection, identify a connection, and update existing connections.

# Authenticate - Authentication methods - SMS deliverability in Kinde

> Guide to SMS deliverability including regional considerations, sender ID configuration, and country-specific delivery rates.

SMS deliverability, Twilio, sender ID, regional delivery, 10DLC, A2P messaging
authenticate

Kinde encourages customers to configure their own SMS sender, so that verification, country registrations, sender IDs, and deliverability metrics are controlled and managed by you. When SMS messages are sent via Kinde, we use our regional shared service provider and attempt delivery on a best-effort basis. As Kinde is a service provider, there are limitations when applying for dedicated short codes or sender IDs in countries with strict SMS-sending regulations. This topic describes SMS delivery via Kinde, deliverability factors, and some common reasons why delivery can fail. ## Manage your own SMS sender By default, when you first start using Kinde, all SMS messages are sent from Kinde's shared service provider. We recommend configuring your own SMS sender so that users receive authentication messages branded with your business. Configure this before your production environment goes live. Simply add your SMS details in Kinde settings. See [Set up phone or SMS authentication](/authenticate/authentication-methods/phone-authentication/) for step-by-step instructions. ## Deliverability factors when using Kinde's default SMS shared service provider Kinde provides no guarantees on SMS delivery and attempts delivery as best effort only. ### Countries with known good delivery due to Kinde involvement The following countries have been tested and are known to have good delivery due to Kinde registering with the respective regulatory bodies. - Australia (LONG CODE, SENDER ID) - Canada (LONG CODE) - Great Britain (SENDER ID) - Ireland (SENDER ID) - United States (TOLL FREE) ### Countries with known good delivery without Kinde involvement The following countries have known good delivery without Kinde registering with the respective regulatory bodies. - Generally the rest of the EU - South Africa ### Countries with known bad delivery The following countries have known bad delivery rates. - India - New Zealand - United Arab Emirates ## Sender ID Kinde has set up a shared Sender ID for all customers using the default SMS shared service provider. This cannot be changed. **Sender ID:** `KindeAuth` To brand the Sender ID to your business, you will need to configure your own SMS delivery provider. See [Set up phone or SMS authentication](/authenticate/authentication-methods/phone-authentication/). ## SMS content The content of the SMS is not editable due to strict one-time passcode requirements and industry best practices. An example of the SMS content is below. ``` 123456 is your one-time code to sign in to {Business Name} @business.kinde.com #123456 ```

# Authenticate - Authentication methods - Username authentication

> Guide to username-based authentication including unique constraints, sign-up flow, and integration with password/passwordless methods.

username authentication, unique usernames, case insensitive, sign-up flow, identity verification
authenticate

Along with email and phone number, Kinde supports authentication where a username is the user’s sign-in identity. On sign-up or registration, the user will need to do a one-time validation of their identity via email - for security - but they can subsequently use a username to sign in. <Aside title="Capture other names with properties"> The `username` field is designed for use in the authentication flow, if you want your customers to set a username, display name, or handle as part of their profile in your app, you can add a different property to capture this data. See [Add and manage properties](/properties/work-with-properties/manage-properties/). </Aside> ## Usernames must be unique There are several ways usernames can be added to a user’s profile: - Manually in Kinde - Via API - Self-created by the user on registration - imported with user profiles Kinde treats usernames as case-insensitive. In other words, we ignore case. We do this because it eliminates the possibility of auth issues and fraud when two usernames are identical in every aspect except the case of one of their letters. We are happy to support users choosing an aesthetically pleasing username combination, like `RosyRose` or `BuilderBob`. We just don't also support separate identities for `rosYrosE` and `BUilderbob`. Regardless of how a username is added, it must be unique (in more than case). If a username already exists, an error will be returned. ## The sign-up flow For security reasons, Kinde doesn’t allow fully anonymous users. So when a user signs up, they will need to supply an email, in addition to a username. The email can then be used to verify their identity. The username can be supplied by you, or can be created by the user. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c4f7ed33-ef8b-442e-14f0-bc12a4f5c100/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## The sign-in flow When a user signs in, they enter their username and proceed with a [password](/authenticate/authentication-methods/password-authentication/) or a [passwordless OTP](/authenticate/authentication-methods/passwordless-authentication/). Either way, it’s a quick process for sign in. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/ce25d6b7-0e5c-4f0c-0851-996a8315fb00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Why an email is required In order to be sure that you are signing up a real person, you need to have a way of contacting new users to verify their identity. Without identity verification, the authentication experience you provide could be vulnerable to security threats, fraud, bots, etc. Once an email is verified, we add this email identity for the user. If the auth method is passwordless, this is where we send the OTPs. An email is also required for [password resets](/manage-users/access-control/reset-user-password/). ## Enable username authentication in Kinde 1. In Kinde, go to **Settings > Authentication**. 2. Select **Configure** on the **Username** (password) or the **username + code** (passwordless) tile. A configuration window opens. 3. Select which apps will support username authentication. 4. Select **Save**. The sign up flow will be updated for the applications you selected. ## Rules for usernames - Usernames must be unique - 2-64 characters, no spaces - Can include letters, numbers, -dashes, \_underscores (no special characters) - Case is ignored. Jane and jane are treated the same. ## One password for multiple identities Users can only have a single password in Kinde. If you allow both email-password and username-password authentication for a user, the password is shared across both their identities. For example, changing a user’s password for username affects their email sign-in and vice-versa. See [the password rules](/authenticate/authentication-methods/password-authentication/#password-strength).

# Authenticate - Custom configurations - Manage organization-level auth features

> Guide to advanced organization features including custom policies, default roles, email senders, custom domains, and organization-level MFA.

advanced organizations, organization policies, default roles, custom email sender, custom domains, organization MFA
authenticate

<Aside type="upgrade"> Only businesses on the [Kinde Scale plan](https://kinde.com/pricing/) can enable advanced organization features. Additional fees apply. </Aside> When you enable advanced organizations features, you can access extended features for individual organizations. Customizations include: - Additional access control via [policies](/build/organizations/organization-access-policies/) - Select [default roles](/manage-users/roles-and-permissions/default-user-roles/#enable-default-roles-in-an-organization) for users who join an organization - Set [custom email sender details](/build/organizations/email-sender-organization/), so users in specific orgs receive OTP and other emails from the custom address (requires own SMTP) - Organization-level [custom domains](/build/domains/organization-custom-domain/) - Organization-level [multi-factor authentication](/authenticate/multi-factor-auth/mfa-per-org/) Read our blog about why you might need [advanced organizations in Kinde](https://kinde.com/blog/authentication/advanced-organizations/). ## Enable advanced organization features <Aside type="warning"> Note: You can activate advanced features for 5 organizations on the Kinde Scale plan. After that, there is a monthly cost for each organization that is enabled to use advanced features. </Aside> 1. In Kinde, go to **Organizations**. 2. Search or browse for the organization you want and select the name to show the org details. 3. Select **Authentication**. 4. In the **Activate advanced organization features** box, select **Activate**. ## Disable advanced organization features <Aside type="warning"> Note that when you disable advanced features, all advanced settings revert to global business settings. This could cause breaking changes in apps that rely on custom authentication for the organization. Your next bill will also be adjusted. </Aside> 1. In Kinde, go to **Organizations**. 2. Search or browse for the organization you want and select the name to show the org details. 3. Scroll to the bottom of the **Details** page and select **Remove advanced org features**. 4. In the confirmation window, follow the prompts.

# Authenticate - Custom configurations - Manage the authentication experience

> Comprehensive guide to customizing the authentication experience including unified sign-up, name requirements, marketing consent, and profile picture settings.

authentication experience, unified sign-up, seamless registration, marketing consent, Gravatar, login_hint
authenticate

Kinde aims to give you as much control of your user’s sign up and sign in experience as possible, without compromising security. Here are some options for customizing the authentication experience in your applications. You’ll find these in Kinde: **Settings > Applications > View details** on your application. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/f8d6db00-fa71-41d0-7c1c-630508f6c300/public" alt="Application switches for custom sign in behaviour" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Use your own sign up and sign in screens Kinde offers custom authentication, allowing you to use your own sign up and sign in screens, bypassing the landing screens provided by Kinde. You can enable this for social sign in, email, phone, enterprise connections, or any combination of these sign up methods you support. See [Custom sign-up and sign-in pages](/authenticate/custom-configurations/custom-authentication-pages/) for more details. ## Create a unified sign-up / registration experience (seamless sign up) You can allow all users to register and sign from the same authentication screen, without forcing them to create an account first. To do this: 1. Update your app to redirect all authentication through the registration flow. To do this, change the link for the `sign in` button to go to the `register` button on the authentication screen. In Next.js, for example, you would change `<LoginLink>` to use `<RegisterLink>` instead. 2. Switch off the requirement to ask for first name and last name on registration (see section below). 3. Go to **Settings > Applications > View details** on your application. Scroll to the **Authentication experience** section. 4. Switch off the **Show 'Already have an account? Sign in' on registration page** option. 5. Go to **Design > Page content**, then select **Sign up page** in the dropdown. Update the copy on the sign up page to cater for both the registration and sign in experience. 6. Select **Save**. The result is: - Users with an account will authenticate - Users without an account will be registered - Nobody will see a prompt to create an account You can do this for any authentication method, e.g. email + password, email + OTP, phone + SMS OTP, social connection, or enterprise connection. ![Example before and after register screen shot](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/03883607-f9f2-4b1a-b3cf-9773d2683400/public) ## Ask for first name and last name on sign up By default, the Kinde sign up flow includes fields for users to enter their first name and last name. However, if you don’t want to collect user’s names, you can easily switch this off. This can make the sign up experience a bit faster, because when a user goes to sign up, all they need is their email, phone number, or their social sign in. **To switch off the name requirement for sign up** 1. Go to **Settings > Applications > View details** on your application. 2. Scroll to the **Authentication experience** section. 3. Switch off **Ask for user first name and last name**. 4. Select **Save**. ## Request consent for marketing on sign up If you want, you can add a checkbox to the sign up screen for collecting user consent to receive marketing communications. See [Request user consent for marketing on sign up](/design/pages/marketing-consent/) for details. ## Switch off Gravatar fallback for profile pictures Typically, Kinde receives user profile pictures via the email provider, e.g. Google. If no picture is attached to a profile, Kinde sets the picture to use a Gravatar URL instead. Gravatar sends us a profile URL and either the user picture (if available) or a blank avatar is displayed in Kinde. To avoid blank avatars and to handle profile pictures a different way, you can switch off the Gravatar fallback. 1. Go to **Settings > Applications** and select **View details** on your application. 2. Scroll to the **Authenticaton experience** section and switch off the **Use Gravatar fallback** option. 3. Select **Save**. Read more about [email authentication](/authenticate/authentication-methods/email-authentication/). ## Pre-populate user identity for sign in Create a smoother sign up and sign in experience for users by passing `login_hint` with the auth URL. This prefills the user’s sign in identity, saving them from manually entering their email or phone number. You might want to do this, for example, if you invite users to sign up via email and you want to reduce friction and make signing in faster. See [Pre-populate user identity on sign in](/authenticate/custom-configurations/prepopulate-identity-sign-in/) for details. ## Include 'escape hatch' URLs for authentication errors You can include URLs in error messages so that users can click them to go back to the sign in screen or your home page. 1. Go to **Settings > Applications** and select **View details** on your application. 2. Set the **Application homepage URI** and the **Application login URI**. 3. Select **Save**.

# Authenticate - Custom configurations - Custom sign-up and sign-in pages

> Step-by-step guide to creating custom authentication pages while maintaining Kinde's security for verification and MFA processes.

custom authentication pages, connection ID, login_hint, social auth, email auth, phone auth, enterprise auth
authenticate

You can host your own custom sign up and sign in pages to use with Kinde. Integrate your own designs for the initial sign up and sign in page, and still get the security of Kinde’s auth (and verification) process. This gives you the best of both worlds: the security of hosted auth, and the ability to customize the initial sign-up experience for your users. <Aside title="Customizing the entire authentication experience"> Bring your own HTML / CSS and JavaScript to our hosted pages [with Kinde's custom UI feature](/design/customize-with-code/customize-with-css-html/). </Aside> ## Custom sign in for social authentication If you only allow users to sign up and sign in with social authentication - such as Google or Apple - then you can achieve a headless-type experience. Users sign up or sign in from your custom screen, then get pushed straight through to the social provider’s account selection screen. For example: <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/20ed27ab-5a0a-47b5-b66e-025013c60400/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Custom sign in for email authentication If you allow email sign up and sign in, the initial Kinde screen can be bypassed, but the Kinde code verification screen will still appear before sign in is completed. When a user signs up (say, via email), they do this in fields on your custom sign in screen. Then for verification, they see Kinde’s verification code screen. After that, it’s all you again. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b08b9164-775c-4de7-669e-87ebaa329200/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Screens that remain securely hosted by Kinde This feature lets you to bypass Kinde’s initial sign in screens, but the following screens are still hosted by Kinde and are part of our secure auth experience. - Enter password or One-time password (OTP) screens (see example above) - Multi-factor authentication screens - The organization switcher (if you support multiple organizations) - The screen where users can choose to create an account if one was not found ## Step 1: Switch on the custom auth option for your application 1. Go to **Settings** > **Applications**. 2. Select **View details** on the application you want to switch on custom auth for. 3. Scroll down and switch on the **Use your own sign-up and sign-in screens** option in the **Authentication experience** section. 4. Select **Save**. ## Step 2: Get the auth method connection ID Each authentication type you have set up in Kinde has a unique **Connection ID** attached to it. You need to add this connection ID to your screen design code, so that the Kinde screens get bypassed when users interact. 1. Go to **Settings > Authentication.** 2. Select **Configure** on the relevant authentication method tile. For example, the **Google** tile under the **Social connections** section. 3. Copy the **Connection ID** and paste it somewhere you can access later. 4. Select **Save** or **Cancel**. 5. Repeat for each authentication method you want to be included on your custom sign in screen. ## Step 3: Add the Connection ID to your design code There are different steps depending on the authentication method you use. Update your code for all that apply. ### Social sign in Add the `connectionId` to the auth url. Here is an example using React: ```jsx <button onClick={() => login({ connectionId: "conn_6a95dec504d34dc286dc80e8df9f6099" }) } > Sign in with Google </button> ``` You can now test if it works by signing in to your project or app. ### Email sign in Add the `connectionId` and `loginHint` params to the auth url. The `login_hint` enables you to pre-populate the email for the user, skipping the step where they have to enter their identity/email. It also tells us where to send their one time password for passwordless verification. Here is an example using React. ```jsx <button onClick={() => login({ connectionId: "conn_e5f80aa5258e4685bf629b38003ee954", loginHint: "dave@kinde.com" }) } > Sign in with email </button> ``` You can now test if it works by signing in to your project or app. ### Phone sign in Add `connectionId` and `loginHint` params to the auth url. The `loginHint` enables you to pre-populate the phone for the user, skipping the step where they have to enter their phone number. It also tells us where to send their one time password for passwordless verification. The `loginHint` needs to be in one of these formats `phone:<intl_number>:<country_code>` or `phone:<+intl_number>:<country_code>`. The ‘+’ symbol is optional, as long as the country code is included. Here is an example using React: ```jsx <button onClick={() => login({ connectionId: "conn_e1d49977648149a2a32fde844f1ff9e5" loginHint: "phone:+61466043123:au" }) } > Sign in with phone </button> ``` You can now test if it works by signing in to your project or app. ### Enterprise sign in (Entra ID or SAML) Add the `connectionId` to the auth url. This takes the user directly to the enterprise authentication process. Here is an example using React: ```jsx <button onClick={() => login({ connectionId: "conn_6a95dec504d34dc286dc80e8df9f6099" }) } > Sign in to [project name] </button> ```

# Authenticate - Custom configurations - Disable self sign-up

> Guide to disabling self sign-up for your business or specific organizations, allowing only selective user addition via import, manual addition, or API.

disable sign-up, self sign-up, invitation only, user management, organization policies
authenticate

You can prevent users from signing up to your business, and only add users selectively. You might do this if you only want to give access to employees or members. Disabling sign-ups applies across an environment. Depending on your Kinde plan, you may can also [manage sign-ups per organization](/build/organizations/allow-user-signup-org/). ## Disable self sign-up for your business 1. Go to **Settings > Environment > Policies**. 2. Switch off the **Allow self-sign up** option. You can then [import users](/manage-users/add-and-edit/import-users-in-bulk/), [add them manually](/manage-users/add-and-edit/add-and-edit-users/), or add them [via the Kinde API](/kinde-apis/management#tag/users/post/api/v1/user). ## Disable self sign-up to an organization You can disable self sign-up per organization. However, if you allow self sign-up in your business (and have not disabled it as per the above procedure), at least one organization must allow sign-ups. 1. Go to **Organizations**. 2. Select the organization you want to disable sign-ups for. 3. Go to **Policies**. 4. Switch off the **Allow org members to be auto-added** option. 5. Select **Save**.

# Authenticate - Custom configurations - Pre-populate user identity on sign in

> Guide to pre-populating user identity fields using login_hint parameter for email, phone, and username authentication to improve user experience.

login_hint, pre-populate, user identity, email, phone, username, authentication UX
authenticate

You can create a smoother sign-up and sign-in experience by passing a login_hint when users authenticate. When the user arrives at the sign-in page, their credentials are pre-filled, saving them time. This works for emails, phone numbers, and usernames. You might want to do this, for example, to reduce friction and make signing up extra easy. ## Enable login_hint Add the `login_hint` parameter to the sign up/sign in request on your app or site. ### Email example ```jsx <button onClick={() => login({ authUrlParams: { login_hint: "dave@kinde.com" } }) } > Continue </button> ``` ### Phone example ```jsx <button onClick={() => login({ authUrlParams: { login_hint: "phone:+61444110110:au" } }) } > Continue </button> ``` ### Username example ```jsx <button onClick={() => login({ authUrlParams: { login_hint: "username:Bob_the_dog" } }) } > Continue </button> ```

# Authenticate - Custom configurations - Proxy your Kinde auth pages through Cloudflare

> Guide to proxying Kinde authentication pages through Cloudflare to leverage advanced security features like WAF and bot mitigation.

Cloudflare proxy, WAF, bot mitigation, custom domain, DNS, SSL, security
authenticate

You can take advantage of Cloudflare’s advanced security features such as their WAF and bot mitigation tools by proxying your Kinde hosted auth pages through Cloudflare. ## What you need - A Cloudflare account - A domain managed in Cloudflare ## Set up the custom domain 1. Set up a custom domain in your Kinde business, see [Use your own custom domain](/build/domains/pointing-your-domain/). 2. Set up DNS records for the domain in Cloudflare. We will change this from DNS once the records have been validated. DNS validation confirms the record before we set the proxy. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/11ab78a6-3b68-4424-2228-b45806f1a400/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Set up the proxy Once you receive the email that the custom domain has been set up in Kinde, go to Cloudflare and change the custom domain record from **DNS only** to **Proxied**. <Aside type="warning" title="Important"> Leave the ACME challenge record as DNS. This is used to verify domain ownership each time the certificate needs to be renewed and cannot be proxied. </Aside> <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/1c91bc73-5252-4062-2bb0-af877e945200/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> <Aside type="warning" title="Important"> Ensure your encryption mode in the Cloudflare dashboard is set to either **Full** or **Full (strict)**. For security purposes, Kinde enforces HTTPS on it's web services, which means **Flexible** or **Off** will not work. </Aside> ## Create a Cloudflare Managed Challenge To test the proxied domain, create a WAF rule to show a Cloudflare Managed Challenge on all incoming requests. For example, create a rule to match the hostname of the custom domain used in Kinde and the request originating from Australia. The action is to show a **Managed Challenge**. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/2aba2c16-a345-4179-3075-52485a126c00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" />

# Authenticate - Custom configurations - Redirect users

> Guide to redirecting users after authentication using cookies, local storage, or the state parameter for secure post-auth navigation.

user redirect, callback URL, state parameter, CSRF protection, local storage, cookies
authenticate

After authenticating a user in Kinde, you can return them to a specific page within your application. Users are initially redirected back to the requested [Callback url](/get-started/connect/callback-urls/) you have included in your allowlist within Kinde. This is necessary to complete the token exchange and finalize the authentication flow. ## When to set a specific redirect A callback URL is not always where you want users redirected after authentication. You may want users to land on a specific dashboard page, or to trigger authentication if a user tries to access a protected page in your application. In both those cases, you can store a URL to redirect the user back to their intended page (after authentication) to provide a more seamless experience. ## Redirect without an SDK Most of our SDKs include a mechanism for redirecting users. However, if you are not using a Kinde SDK, use one of the following methods. 1. Store the intended URL in a cookie or local storage. 2. Use the `state` parameter. ## Store the URL in a cookie or local storage For single page applications the simplest is probably to leverage local storage to store the desired URL. Prior to redirecting to Kinde: ```jsx localStorage.setItem("nextUrl", "/some-protected-route"); ``` After authentication is complete: ```jsx const nextUrl = localStorage.getItem("nextUrl"); window.location.replace(nextUrl); ``` For server-side applications you can achieve the same thing with a cookie - essentially setting the next URL before redirecting to Kinde and fetching the value post-authentication. The implementation will depend on your language or framework choice. ## Use the state parameter You should be using the state parameter already to protect against CSRF attacks. [(Here's how Kinde uses the State param)](/get-started/learn-about-kinde/kinde-product-security/#csrf-protections-via-state-parameter). Essentially it's a random string that you would store in your application, so when you receive the response from Kinde you can validate it matches the one you sent. Because it is just a string, you can leverage it to store additional information, like the intended destination of your user. 1. Generate a random string in your application. For this example we will use:`BlueFox0101`. 2. Use this string as key for an object with the value of your application state and store this locally. For example: ```jsx { "BlueFox0101" : { nextUrl: '/some-protected-route', } } ``` 3. When you redirect your user to Kinde to complete the authentication flow, include the random string as the `state` param: ```jsx https://<your_kinde_subdomain>.kinde.com/oauth2/auth ?response_type=code &client_id=<your_kinde_client_id> &redirect_uri=<your_app_redirect_url> &scope=openid%20profile%20email &state=BlueFox0101 ``` 4. After the user has authenticated, they will be redirected back to your application and the `state` value will be included in the url: ```jsx https://<your_application>.com/auth/callback ?code=<some_unique_code> &scope=openid%20profile%20email &state=BlueFox0101 ``` 5. As part of your callback processing and response validation, verify that the `state` returned in the URL above matches the random string you stored locally. If it does, retrieve the rest of the application state (like the nextUrl). 6. Use the `code` param to complete the token exchange (as per the [Use Kinde without an SDK](/developer-tools/about/using-kinde-without-an-sdk/#handling-the-callback) guide) and once the exchange is complete use the `nextUrl` to redirect the user. ## **Limitations and considerations** - Choose a storage method based on your application type. | App Type | Recommended storage | | --------------- | ------------------- | | Regular Web App | Cookie or session | | SPA | Local browser | | Native App | Memory or local | - `State` parameter values are not unlimited. `414 Request-URI Too Large` means you should try a smaller value. - Passing URLs in plain text or in any predictable way is unsafe. Ensure that the `state` parameter value is unique and opaque to ensure that it can be used for defence against CSRF and phishing attacks. - If the `state` parameter value is stored in a cookie, it should be signed to prevent forgery. ## A secure way to store redirect information The `state` parameter can mitigate [**CSRF attacks**](https://en.wikipedia.org/wiki/Cross-site_request_forgery) by using a unique and non-guessable value associated with each authentication request about to be initiated. That non-guessable value allows you to prevent the attack by confirming that the value coming from the response, matches the one you sent. The `state` parameter is also a string, so you can encode any information in it. You can send a random value when starting an authentication request and validate the received value when processing the response. You store something on the client application side (in cookies, session, or local storage) that allows you to perform the validation. Kinde SDKs handle `state` generation and validation automatically.

# Authenticate - Custom configurations - Static IP

> Guide to using a static IP address for your Kinde business.

static-ip, infrastructure, whitelist
authenticate

<Aside type="upgrade"> Only businesses on the [Kinde Enterprise plan](https://kinde.com/pricing/) can enable a static IP address for their Kinde business. Additional fees apply. </Aside> For companies who work in highly regulated industries such as government, financial services, or education, it is a common requirement to maintain strict 'whitelists' for accessing the internet. For customers with these requirements, Kinde can provide static IP addresses. ## Dynamic IPs are used by default Kinde uses AWS public cloud to host our services. We make use of AWS's highly scalable infrastructure to ensure the best availability and performance. This infrastructure design means that your Kinde business is assigned a DNS address created during onboarding, which will have a dynamic IP address managed by AWS. You then whitelist the Kinde business domain or your custom domain, to ensure that your customers can access authentication to your product. ## Request a static IP address For Kinde enterprise customers who have strict IP-based whitelists, Kinde can provide a pair of static IP addresses. We use AWS's Global Accellerator to provision 2 IP addresses assigned to your Kinde business and custom domain, which will ensure that the IP addresses are always the same. Please reach out to our team at support@kinde.com to discuss your requirements.

# Authenticate - Device authorization flow - Call your API using device authorization flow

Once you've received an access token from the device authorization flow, you can use it to call your protected APIs. This guide shows you how to validate tokens, handle scopes, and make authenticated API requests. ## Use the access token from the device authorization flow The access token you receive from the device authorization flow is a standard OAuth 2.0 Bearer token. Include it in the `Authorization` header of your API requests: ```bash curl -X GET https://your-api.com/protected-resource \ -H "Authorization: Bearer YOUR_ACCESS_TOKEN" ``` ## Token validation in the device authorization flow Before processing API requests, validate the access token to ensure it's valid and hasn't expired: ### Validate with Kinde's userinfo endpoint ```bash curl -X GET https://<your-subdomain>.kinde.com/oauth2/v2/user_profile \ -H "Authorization: Bearer YOUR_ACCESS_TOKEN" ``` **Success response**: ```json { "sub": "kp_c3143a4b50ad43c88e541d9077681782", "provided_id": "some_external_id", "name": "John Snow", "given_name": "John", "family_name": "Snow", "updated_at": 1612345678, "email": "john.snow@example.com", "email_verified": true, "picture": "https://example.com/john_snow.jpg", "preferred_username": "john_snow", "id": "kp_c3143a4b50ad43c88e541d9077681782" } ``` **Error response** (invalid token): ```json { "error": "invalid_token", "error_description": "The access token is invalid or expired" } ``` ### Validate with your own API You can also validate tokens in your own API by verifying the JWT signature and claims: ```javascript +// Node.js example using jsonwebtoken with JWKS +const jwt = require("jsonwebtoken"); +const jwksClient = require("jwks-rsa"); + +const client = jwksClient({ + jwksUri: "https://<your-subdomain>.kinde.com/.well-known/jwks" +}); + +function getKey(header, callback) { + client.getSigningKey(header.kid, (err, key) => { + const signingKey = key.publicKey || key.rsaPublicKey; + callback(null, signingKey); + }); +} + +function validateToken(token) { + return new Promise((resolve, reject) => { + jwt.verify(token, getKey, { algorithms: ["RS256"] }, (err, decoded) => { + if (err) { + resolve({ valid: false, error: err.message }); + } else { + resolve({ valid: true, user: decoded }); + } + }); + }); +} ``` ## Scope enforcement for device authorization Access tokens include scopes that determine what resources the user can access. Check the required scopes before processing requests: ```javascript // Example: Check if user has required scope function hasRequiredScope(token, requiredScope) { const decoded = jwt.decode(token); const tokenScopes = decoded.scope.split(" "); return tokenScopes.includes(requiredScope); } // Usage if (!hasRequiredScope(accessToken, "read:users")) { return res.status(403).json({error: "Insufficient scope"}); } ``` ## Common API patterns for device authorization ### Protected resource endpoint ```javascript // Express.js example app.get("/api/protected-resource", authenticateToken, (req, res) => { // req.user contains the decoded token payload res.json({ message: "Access granted", user: req.user }); }); function authenticateToken(req, res, next) { const authHeader = req.headers["authorization"]; const token = authHeader && authHeader.split(" ")[1]; if (!token) { return res.status(401).json({error: "Access token required"}); } // Validate token with Kinde fetch("https://<your-subdomain>.kinde.com/oauth2/v2/user_profile", { headers: { Authorization: `Bearer ${token}` } }) .then((response) => { if (!response.ok) { throw new Error("Invalid token"); } return response.json(); }) .then((user) => { req.user = user; next(); }) .catch((error) => { return res.status(401).json({error: "Invalid token"}); }); } ``` ### Error handling for device authorization Handle common token-related errors: ```javascript function handleTokenError(res, error) { switch (error.error) { case "invalid_token": // Token is invalid or expired return res.status(401).json({error: "Please re-authenticate"}); case "insufficient_scope": // Token doesn't have required permissions return res.status(403).json({error: "Insufficient permissions"}); default: return res.status(500).json({error: "Authentication error"}); } } ``` ## Security best practices for device authorization ### Token storage - **Never store tokens in localStorage**: Use secure HTTP-only cookies or memory storage - **Validate tokens server-side**: Always validate tokens on your backend, not just the client ### Rate limiting Implement rate limiting for token validation requests: ```javascript const rateLimit = require("express-rate-limit"); const tokenValidationLimiter = rateLimit({ windowMs: 15 * 60 * 1000, // 15 minutes max: 100, // limit each IP to 100 requests per windowMs message: "Too many token validation requests" }); app.use("/api/protected-resource", tokenValidationLimiter); ``` ### Logging and monitoring Log authentication events for security monitoring: ```javascript function logAuthEvent(token, action, success) { console.log({ timestamp: new Date().toISOString(), action: action, success: success, userId: token.user_id, scopes: token.scope }); } ``` ## Testing your API Test your protected endpoints with the access token: ```bash # Test with curl curl -X GET https://your-api.com/protected-resource \ -H "Authorization: Bearer YOUR_ACCESS_TOKEN" # Test with JavaScript fetch('https://your-api.com/protected-resource', { headers: { 'Authorization': 'Bearer YOUR_ACCESS_TOKEN' } }) .then(response => response.json()) .then(data => console.log(data)); ```

# Authenticate - Device authorization flow - About the device authorization flow

Kinde's device authorization flow adheres to `RFC 8628`, also known as the OAuth 2.0 Device Authorization Grant. It enables authorization for devices with limited input capabilities, such as smart TVs, gaming consoles, or IoT devices. Users authenticate on a secondary device (like a phone or computer) while the primary device receives the access token. ## How the device authentication flow works 1. **Device requests authorization**: The device requests a device code and user code from Kinde. 2. **User authenticates**: The user visits a verification URI on another device and enters the user code. 3. **Device polls for token**: The device polls the token endpoint until authorization is complete. 4. **Access granted**: The device receives an access token and can call protected APIs. ## Endpoints for the device authorization flow ### Device authorization endpoint **URL**: `https://<your-subdomain>.kinde.com/oauth2/device/auth` **Method**: `POST` **Content-Type**: `application/x-www-form-urlencoded` **Parameters**: - `client_id` (optional): Your application's client ID - can be omitted if you have set an application as the default for device flows - `audience` (optional): The audience to use for the request **Response**: ```json { "device_code": "kinde_dc_device_code_here", "user_code": "CSLDFDUU", "verification_uri": "https://<your-subdomain>.kinde.com/device", "verification_uri_complete": "https://<your-subdomain>.kinde.com/device?user_code=CSLDFDUU", "expires_in": 600, "interval": 5, "qr_code": "data:image/png;base64,..." } ``` ### Token endpoint **URL**: `https://<your-subdomain>.kinde.com/oauth2/token` **Method**: `POST` **Content-Type**: `application/x-www-form-urlencoded` **Parameters**: - `grant_type`: `urn:ietf:params:oauth:grant-type:device_code` - `client_id`: Your application's client ID - `device_code`: The device code received from the authorization endpoint **Success response**: ```json { "access_token": "eyJ...", "expires_in": 86400, "scope": "", "token_type": "bearer" } ``` The scope field may be empty because granted scopes are carried in the access token’s scope claim. **Example error response**: ```json { "error": "authorization_pending", "error_description": "The user has not yet completed the authorization" } ``` ## Polling behavior The device must poll the token endpoint at regular intervals until the user completes authentication: - **Initial interval**: Use the `interval` value from the device authorization response (typically 5 seconds). - **Slow down**: If you receive a `slow_down` error, increase the polling interval by 5 seconds. - **Maximum time**: Stop polling after the `expires_in` time (typically 30 minutes). ## Device authorization flow error codes | Error Code | Description | Action | | ----------------------- | ------------------------------------ | ------------------------------ | | `authorization_pending` | User hasn't completed authentication | Continue polling | | `slow_down` | Polling too frequently | Increase interval by 5 seconds | | `access_denied` | User denied the authorization | Stop polling | | `expired_token` | Device code has expired | Request a new device code | | `server_error` | Misconfigured device code | Request a new device code | ## Security considerations for device authorization - **User code format**: User codes are formatted as `XXXXXXXX` for easy entry. - **Verification URI**: Users should verify they're on the correct domain. - **Token expiration**: Access tokens expire after 1 hour by default. ## Specifying an audience in a device authorization request If an `audience` is specified in the request, the access token will include the audience in the `aud` claim. Kinde supports requesting multiple audiences. The API must be authorized for the device authorization application. ## Scopes and permissions for a device authorization request If an audience is specified in the request, any scopes which are belong to that audience that are granted to the user by their role will also be granted to the device. The list of scopes will be displayed on the consent screen. If the user consents, the scopes will be included in the `scope` claim of the access token.

# Authenticate - Device authorization flow - Quick start

The 'Device Authorization Flow' allows users to authenticate on one device (like a TV or smart device) using another device (like a phone or computer). This is perfect for devices with limited input capabilities. In this quick start, you'll learn how to implement the device authorization flow using Kinde in just 5 minutes. ## Prerequisites for the device authorization flow - `curl` or a similar HTTP client ## Step 1: Create a Device Authorization app 1. From the Kinde home page select **Add application**. 2. Enter a name for the application. 3. Choose **Device and IoT**. 4. Select **Save**. 5. Make a note of the Client ID, you'll need this later. ## Step 2: Enable an authentication method for your application 1. Go to **Settings > Authentication**. 2. Select **Configure** on the **Passwordless** > **Email + code** card. 3. Under **Applications** select the application you created in step 1. 4. Select **Save**. ## Step 3: Request a device code Request a device code from Kinde's authorization endpoint: ```bash curl -X POST https://<your-subdomain>.kinde.com/oauth2/device/auth \ -H "Content-Type: application/x-www-form-urlencoded" \ -d "client_id=<YOUR_CLIENT_ID>" ``` The response will include a `device_code`, `user_code`, and `verification_uri`: ```json { "device_code": "kinde_dc_...", "user_code": "CSLDFDUU", "verification_uri": "https://<your-subdomain>.kinde.com/device", "verification_uri_complete": "https://<your-subdomain>.kinde.com/device?user_code=CSLDFDUU", "expires_in": 600, "interval": 5, "qr_code": "data:image/png;base64,..." } ``` ## Step 4: Display the user code Show the `user_code` to the user and provide the `verification_uri_complete` or QR code from the response. The user should: 1. Visit the `verification_uri_complete` URL on their phone or computer. 2. Complete the authentication process. ## Step 5: Poll for the access token While the user is authenticating, poll the token endpoint: ```bash curl -X POST https://<your-subdomain>.kinde.com/oauth2/token \ -H "Content-Type: application/x-www-form-urlencoded" \ -d "grant_type=urn:ietf:params:oauth:grant-type:device_code" \ -d "client_id=<YOUR_CLIENT_ID>" \ -d "device_code=<YOUR_DEVICE_CODE>" ``` Continue polling every 5 seconds (or the `interval` value from the response) until you receive a successful response like: ```json { "access_token": "eyJ...", "expires_in": 86400, "scope": "", "token_type": "bearer" } ``` ## Step 6: Use the access token Once you have received the access token, you can call your protected APIs: ```bash curl -X GET https://your-api.com/protected-resource \ -H "Authorization: Bearer YOUR_ACCESS_TOKEN" ``` ## Default app for device flows When you set up a default app for device flows, this will be the application that is used if no Client ID is specified in the request. 1. Select **Settings** > **Applications** 2. Select the Device Authorization application you want to set as default 3. Select **Set as default** 4. Select **Save**

# Authenticate - Device authorization flow - Troubleshooting device authorization

This guide helps you diagnose and resolve common issues with device authorization flow. Learn how to handle errors, debug problems, and implement proper error recovery. ## Common error codes during device authorization ### authorization_pending **Error**: `authorization_pending` **Description**: The user hasn't completed the authorization process yet. **Solution**: Continue polling the token endpoint. This is normal behavior. ```javascript // Example: Handle authorization_pending if (error === "authorization_pending") { console.log("User has not completed authorization yet. Continue polling..."); // Wait for the specified interval before next poll setTimeout(pollForToken, interval * 1000); } ``` ### slow_down **Error**: `slow_down` **Description**: You're polling too frequently. **Solution**: Increase the polling interval by 5 seconds. ```javascript // Example: Handle slow_down if (error === "slow_down") { console.log("Polling too fast. Increasing interval..."); interval += 5; // Increase interval by 5 seconds setTimeout(pollForToken, interval * 1000); } ``` ### access_denied **Error**: `access_denied` **Description**: The user denied the authorization request. **Solution**: Stop polling and inform the user they need to try again. ```javascript // Example: Handle access_denied if (error === "access_denied") { console.log("User denied authorization"); showErrorMessage("Authorization was denied. Please try again."); stopPolling(); } ``` ### expired_token **Error**: `expired_token` **Description**: The device code has expired (typically after 30 minutes). **Solution**: Request a new device code. ```javascript // Example: Handle expired_token if (error === "expired_token") { console.log("Device code expired"); showErrorMessage("This code has expired. Please request a new one."); requestNewDeviceCode(); } ``` ## Polling mistakes during device authorization ### Too frequent polling **Problem**: Polling more frequently than the recommended interval. **Solution**: Always respect the `interval` value from the device authorization response. ```javascript // Good: Respect the interval function pollForToken(deviceCode, interval = 5) { setTimeout(() => { // Make token request checkTokenStatus(deviceCode); }, interval * 1000); } // Bad: Polling too frequently function pollForToken(deviceCode) { setInterval(() => { // This polls every 1 second - too frequent! checkTokenStatus(deviceCode); }, 1000); } ``` ### Not handling `slow_down` properly **Problem**: Not increasing the interval when receiving `slow_down` errors. **Solution**: Implement exponential backoff. ```javascript let currentInterval = 5; // Start with 5 seconds function pollForToken(deviceCode) { checkTokenStatus(deviceCode).then((response) => { if (response.error === "slow_down") { currentInterval += 5; // Increase by 5 seconds console.log(`Increasing interval to ${currentInterval} seconds`); } // Continue polling with updated interval setTimeout(() => pollForToken(deviceCode), currentInterval * 1000); }); } ``` ### Not stopping on errors **Problem**: Continuing to poll after receiving fatal errors. **Solution**: Stop polling for non-recoverable errors. ```javascript function pollForToken(deviceCode) { checkTokenStatus(deviceCode).then((response) => { if (response.error) { switch (response.error) { case "authorization_pending": // Continue polling setTimeout(() => pollForToken(deviceCode), interval * 1000); break; case "slow_down": // Increase interval and continue interval += 5; setTimeout(() => pollForToken(deviceCode), interval * 1000); break; case "access_denied": case "expired_token": // Stop polling - these are fatal errors stopPolling(); handleError(response.error); break; } } else { // Success - stop polling handleSuccess(response); } }); } ``` ## Network issues during device authorization ### Connection timeouts **Problem**: Network requests timing out. **Solution**: Implement proper timeout handling and retry logic. ```javascript function checkTokenStatus(deviceCode) { return fetch("https://<your-subdomain>.kinde.com/oauth2/token", { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded" }, body: new URLSearchParams({ grant_type: "urn:ietf:params:oauth:grant-type:device_code", client_id: "<YOUR_CLIENT_ID>", device_code: deviceCode }), timeout: 10000 // 10 second timeout }) .then((response) => response.json()) .catch((error) => { console.error("Network error:", error); // Retry after a delay setTimeout(() => checkTokenStatus(deviceCode), 5000); }); } ``` ### DNS resolution issues **Problem**: Cannot resolve the Kinde domain. **Solution**: Verify your domain configuration and network connectivity. ```bash # Test DNS resolution nslookup <your-subdomain>.kinde.com # Test connectivity curl -I https://<your-subdomain>.kinde.com/oauth2/v2/device_authorization ```

# Authenticate - Enterprise connections - Manage enterprise connections

> Comprehensive overview of enterprise authentication connections including SAML, Microsoft Entra ID, Google Workspace, Okta, and Cloudflare with provisioning options.

enterprise connections, SAML, Microsoft Entra ID, Google Workspace, Okta, Cloudflare, SSO, JIT provisioning
authenticate

Enterprise authentication is a common method for managing user access to systems in large organizations. Kinde supports a number of enterprise connection types, including: - [Custom SAML](/authenticate/enterprise-connections/custom-saml/) - [Microsoft Entra ID](/authenticate/enterprise-connections/azure/) (was Azure AD) WS Federated or Open ID - [Microsoft Entra ID (SAML)](/authenticate/enterprise-connections/entra-id-saml/) - [Google Workspace](/authenticate/enterprise-connections/custom-saml-google-workspace/) (via SAML) - [Okta](/authenticate/enterprise-connections/okta-saml-connection/) (via SAML) - [Cloudflare](/authenticate/enterprise-connections/cloudflare-saml/) (via SAML) - [LastPass](/authenticate/enterprise-connections/lastpass-sso/) (via SAML) <Aside type="upgrade"> The number of enterprise connections you can have depends on your [Kinde plan](https://kinde.com/pricing/). </Aside> ## Provisioning for enterprise connections Kinde offer a number of provisioning options for enterprise connections, including **just in time (JIT)** provisioning and **pre-provisioning** options. See [Provisioning users with enterprise connections](/authenticate/enterprise-connections/provision-users-enterprise/) ## How identities are handled in enterprise connections Users with enterprise identities in Kinde can’t also have other identity types in Kinde. E.g. a user can have an email identity and a social identity. But if a user has an enterprise identity, they cannot have other identities. In this case, identity information is sourced with the identity provider (IdP) and is managed via the identity provider, not in Kinde. Learn more about [identities in Kinde](/authenticate/about-auth/identity-and-verification/). ## Enterprise connections for B2B businesses Many businesses have businesses for customers (B2B), and use Kinde organizations to manage authentication and access. Kinde lets you set a number of enterprise authentication features at the organization level, see [Enterprise authentication for B2B](/authenticate/enterprise-connections/enterprise-connections-b2b/). ## Session sign out behavior When enterprise connection users sign out, they are only signed out of the Kinde session, they are not signed out of the identity provider. We do not force sign out of the IdP because this could break existing sessions the user is signed into, for other applications. This behavior also applies for social connections, where a third party is the identity provider. ## Routing in enterprise connections When users sign up via an enterprise connection with single-sign-on (SSO), they are routed to the identity provider (IdP) for identity verification. This happens when they select the SSO button on the home screen. You can set up a more seamless routing option using home realm discovery. ### Home realm discovery Home realm discovery routes users based on their email domain. So when a user enters their email and selects the continue button, they are routed to their IdP based on the email domain, to authenticate. For example if the user enters [chris@acme.com](mailto:chris@acme.com) Kinde checks which IdP uses the [**acme.com**](http://acme.com/) domain and silently verifies his identity. He only signs in once. Note that this feature has nothing to do with security or access control and everything to do with routing. Not to be confused with setting access restrictions for [domain allowlists](/authenticate/enterprise-connections/enterprise-connections-b2b/). Learn more about [home realm discovery](/authenticate/enterprise-connections/home-realm-discovery/). ## Show or hide the SSO sign-in button on the auth page When you set up enterprise auth in Kinde, an SSO button appears on the authentication page which is linked to the IdP by default. Users can select this as a sign up method, similar to how they might select a Google or Facebook sign-in option. For a more seamless experience, you can hide the SSO button by entering a home realm domain for the connection (more info above). Users will be routed silently via their IdP when they enter their credentials. If you have multiple enterprise auth methods (E.g. SAML and Entra ID), you may not want to show multiple SSO buttons. Here's the options for showing and hiding, depending how many enterprise auth methods you add: ### (Option 1) Hide all SSO buttons If you configure home realm discovery in each enterprise auth method, all SSO buttons will be hidden by default. The user enters their credentials and they are silently authenticated against the relevant IdP based on email domain. ### (Option 2) Show a universal SSO button for all If you would prefer users explicitly choose to sign in with SSO, you can add a universal button to the sign in screen. 1. Go to **Settings > Applications > Your application**. 2. On the **Details** page scroll down to the **Authentication experience** section. 3. Switch on **Show 'Sign in with SSO' button**. Users click the universal button, enter their credentials, and get routed silently to the IdP for verification. ## Enterprise connections only allow service provider log in, not identity provider log in If you run a B2B business, you might allow your business customers to use their own identity provider setup (like Okta SAML) to access your app. When you set up an enterprise connection to support this, make them aware they can only sign in via your app's auth gateway, with Kinde as the auth service provider. The customer cannot sign in to your app via their own connection setup - also known as IdP-initiated login. ## Disable an enterprise connection <Aside type="danger"> Before you disable a connection, make sure that there are no users relying on it for authentication. Once disabled, the sign in option becomes unavailable to users. </Aside> 1. Navigate to the connection in Kinde. Via **Organization > Authentication** or via **Settings > Authentication**. 2. For an organization-level connection: 1. Select the three dots menu on the connection tile. 2. Select **Disable connection**. 3. Confirm the action in the confirmation window. 3. For an enterprise level connection: 1. Select **Configure** on the connection tile. 2. Scroll down and disable the connection for each application. 3. Select **Save**. Confirm the action in the confirmation message. ## Delete an enterprise connection <Aside type="danger"> Before you delete a connection, make sure that there are no users relying on it for authentication. Once deleted, the sign in option becomes unavailable to users. This action can’t be reversed. </Aside> 1. Navigate to the connection in Kinde. Via **Organization > Authentication** or via **Settings > Authentication**. 2. Select the three dots menu on the connection tile. 3. Select **Delete connection**. 4. Confirm the action in the confirmation window.

# Authenticate - Enterprise connections - Advanced SAML configurations

> Advanced SAML configuration options including Name ID formats, signing algorithms, protocol bindings, and upstream parameters for enterprise authentication.

SAML, Name ID, signing algorithm, protocol binding, upstream parameters, RSA-SHA256, HTTP POST binding
authenticate

When you set up a SAML connection, you might need to include advanced configurations to meet identity provider requirements, and to get the connection running properly and securely. Here's some of the advanced options you will come across when setting up a connection. ## Name ID Name ID (Name Identifier) is a key element in a SAML assertion that uniquely identifies the user (subject) within a given SAML context. It is included in the `Subject` element of the SAML assertion and is critical for identifying and linking user identities between your Identity Provider (IdP) and Kinde. Available Name ID formats: - **Unspecified**: No particular format is required - **EmailAddress**: A user is identified by their email address - **Persistent**: A stable, opaque identifier intended to remain consistent across sessions - **Transient**: A short-lived identifier, often used in single sign-on (SSO) scenarios for one-time use The Name ID you select in Kinde must be supported and configured in your IdP. ## Sign request algorithm The Sign Request Algorithm defines the cryptographic algorithm used to sign SAML requests (AuthnRequest). Signing ensures the authenticity and integrity of SAML messages. Available algorithms: - **RSA-SHA256**: A commonly used and secure option. - **RSA-SHA1**: Older and less secure; often deprecated. Secure configurations favor SHA256 or stronger algorithms to protect against vulnerabilities. ## Protocol binding Protocol Binding refers to the transport mechanism used to send the SAML authentication request from Kinde to your IdP. Common Binding Types: - **HTTP Redirect Binding**: The SAML request is sent as a URL parameter using a GET request. It is lightweight but limited in message size. - **HTTP POST Binding**: The SAML request is sent via an HTML form using the POST method. It supports larger payloads and is commonly used for transmitting signed requests. The choice of binding affects security, performance, and compatibility. POST Binding is generally preferred for secure communications due to its ability to handle signed messages and larger payloads. ## Key attributes Key Attributes are additional pieces of information about the user that come from your IdP to Kinde. These attributes provide more context about the authenticated user and are often used for access control or personalization. Kinde-supported key attributes: - Email Address: The user’s email, often used for identification or communication. - First Name / Last Name: Used for personalization or internal system mapping. - User ID: The attribute in the SAML token that contains the user ID. Only configure key attributes if supported by your IdP. ## Upstream parameters You can pass provider-specific parameters to an Identity Provider (IdP) during authentication. These are also known as 'upstream params'. The values your pass can either be static per connection or dynamic per user. You can use upstream params to create a smoother sign in experience - by passing the email through, or to offer an account switcher (such as the Google account switcher) during sign in. Note that every identity provider has their own set of supported parameters and values, so you'll need to check their documentation to determine which URL parameters are supported. For more information, see [Pass parameters to identity providers](/authenticate/auth-guides/pass-params-idp/).

# Authenticate - Enterprise connections - MS Entra ID (was Azure AD) enterprise auth

> Step-by-step guide to setting up Microsoft Entra ID (formerly Azure AD) enterprise authentication with WS Federated and OAuth 2.0 protocols.

Microsoft Entra ID, Azure AD, WS Federated, OAuth 2.0, enterprise auth, group sync, upstream params
authenticate

Kinde supports the use of Microsoft Entra ID as an authentication method. We support WS Federated and OAuth2.0 (follow the topic below), and [Microsoft Entra ID SAML](/authenticate/enterprise-connections/entra-id-saml/) which is covered in a separate topic. If you [import users into Kinde](/manage-users/add-and-edit/import-users-in-bulk/), their Entra ID will be picked up and matched to the relevant connection based on their email address, for a seamless transition to Kinde. You can also pass [upstream params](/authenticate/auth-guides/pass-params-idp/) to the IdP as part of this procedure. <Aside> **Microsoft Entra ID** used to be known as **Microsoft Azure AD**. [More information](https://learn.microsoft.com/en-gb/azure/active-directory/fundamentals/new-name). </Aside> ## Before you begin - Register an app in the [Microsoft Entra Admin Center](https://entra.microsoft.com/#home) See the docs [here](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app/). - Copy the Client ID and Client Secret from the Microsoft app. - We recommend you test connections in a non-production environment before activating in a live environment. ## Step 1: Add and configure the connection in Kinde <Aside> You can make a connection available only to a specific organization, or you can create it so it can be used across any organization in your business. </Aside> ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the Microsoft connection type you want (WS Federated or OAuth2.0) and then select **Next**. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the Microsoft connection type you want (WS Federated or OAuth2.0) and then select **Save**. 4. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection 1. Enter a **Connection name.** Make this something you can easily identify, especially if you are adding multiple connections for different business customers. <Aside type="warning"> If you plan to import users into Kinde, make sure the connection name matches the connection name in the Entra ID record. </Aside> 2. Enter your **Microsoft Entra domain.** ![Configure screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/27b313dc-73c7-4bd5-927f-f8f3d5121800/public) 3. Enter the **Client ID** and **Client secret** as they appear in the MS Entra application. Make sure you use the **Value** of the client secret. 4. Enter **Home realm domains**. This speeds up the sign in process for users of those domains. Note that all home realm domains must be unique across all connections in an environment. For more information about how, see [Home realm domains or IdP discovery](/authenticate/enterprise-connections/home-realm-discovery/). 5. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. 6. If you want, select the **Use common endpoint** option. Recommended if you use multi-tenancy. ![Provisioning config for entra oauth2](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c92fad8c-8c81-4481-e891-670a310fe300/public) 7. Select **Extended profile** if you want to sync the additional information stored in a user’s Microsoft profile to their Kinde user profile. Extended attributes data is included in the `extra_claims` object of the access token. 8. If you want to sync user groups, select **Get user groups**. Recommended if you manage permissions and access via user groups in Microsoft. You also need to do some additional setup, see below. 9. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 10. If you want, select **Sync user profiles and attributes on sign in**. Recommended to keep Kinde user profile data in sync with user profile data from Microsoft. If you choose this option, ensure that the global profile sync preference is also switched on in **Settings > Environment > Policies**. 11. If you want to enable just-in-time (JIT) provisioning, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. 12. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 13. Copy the **Callback URL**. You’ll need to enter this in your Entra ID app. 14. Select **Save**. ## Step 3: Add the callback URL to your Entra ID app 1. Open your application in the [Portal](https://entra.microsoft.com/#home). 2. Select the **Redirect URIs** links on the right. 3. Select **Add URI**. 4. In the relevant field, enter your callback URL (from the 'Configure the connection' procedure above) 5. Select **Save**. ## Step 4: Enable the connection in Kinde Make sure you test the connection before enabling in production for your users. 1. Open the connection configuration page in Kinde. 2. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. 3. Select **Save**. ## (Optional) Sync Entra ID groups with Kinde ### Add groups claim to MS Entra ID app 1. Open your application in the [Portal](https://entra.microsoft.com/#home). 2. Go to **Token configuration** in the left menu. 3. Select **Add groups claim**. 4. In the window that appears, select the groups to be included in tokens. ![image of edit groups claim screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/fed278be-bdcd-43b6-7130-8c866928b700/public) 5. If you want, customize the token properties by type. 6. Save your changes. For reference, see this Microsoft doc about [configuring optional claims](https://learn.microsoft.com/en-us/entra/identity-platform/optional-claims?tabs=appui/) ### Customize ID token in Kinde 1. Open your application in Kinde. 2. Go to **Tokens**. 3. Scroll to **Token customization** and select **Configure** on the **ID tokens** tile. 4. Switch on **Social identity** as an additional claim. 5. Select **Save**. ### Access group info in tokens - ID token - `ext_provider > claims > profile > groups` - Access token - `ext_groups` ## Step 4: Test the connection 1. Go to your test application and attempt to sign in. 2. If you left the **Home realm domains** field blank in Kinde, when you launch your application, you should see a button to sign in. Click it and go to step 4. 3. If you completed the **Home realm domains** field, you should be redirected immediately to your IdP sign in screen. 4. Enter your IdP details and complete any additional authentication required.

# Authenticate - Enterprise connections - Use Cloudflare as a SAML identity provider

> Step-by-step guide to integrating Cloudflare as a SAML identity provider with Kinde for enterprise authentication and access control.

Cloudflare, SAML, identity provider, IdP, Zero Trust, enterprise auth, SSO, access policies
authenticate

If you use Cloudflare to centralize authentication and authorization in your business, you can integrate Kinde as a service provider for these processes. This gives you the benefits of Kinde’s robust auth capabilities, while keeping the familiar Cloudflare structure. You need to set up an enterprise connection in Kinde for this, and add a Cloudflare application. We recommend setting up and testing the connection in a non-production environment before making available to users. ## Advanced configurations Depending on your SAML set up, you may need to include advanced configurations for your connection. See [Advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/) ## Step 1: Add the connection in Kinde <Aside> You can make a connection available only to a specific organization, or you can create it so it can be used across any organization in your business. </Aside> ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the Cloudflare connection and then select **Next**. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the Cloudflare connection and then select **Next**. 4. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection 1. Enter a name for the connection. It should match the connection name in Cloudflare. 2. Enter a random string value for Entity ID, for e.g. `870sa9fbasfasdas23aghkhc12zasfnasd`. 3. Enter the **IdP metadata URL**. This URL comes from your identity provider. ![optional fields for saml](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4f1851db-5c34-496b-ced1-07c1cd272b00/public) 4. Enter a **sign in URL** if your IdP requires a specific URL. 5. If you want, select the **Sign request algorithm** and **Protocol binding**. The options you choose will depend on what your identity provider prefers or requires. 6. Select a **Name ID** format. This helps identify and link user identities between your IdP and Kinde. 7. Enter an **Email key attribute**. This is the attribute in the SAML token that contains the user’s email. Setting this value ensures that the email address returned in the SAML response is correctly retrieved. We do not recommend leaving this field blank, but if you do we will set ‘email’ as the attribute. 8. (Optional) Add a first name and last name key attribute. ![Home realm domains in SAML configuration](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/dbdccca5-2e6c-4dd8-eaec-e029574daf00/public) 9. Enter any relevant **Home realm domains**. This is how SAML recognizes a user’s credentials and routes them to the correct sign in page. Note that home realm domains need to be unique across all connections in an environment. [Read more about home realm domains](/authenticate/enterprise-connections/home-realm-discovery/). 10. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. ![ACS URL and custom domain option](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/885eda9c-ca4f-4340-db17-224023b8c300/public) 11. Copy the relevant reply URL: 1. If you don't use a custom domain, copy the **ACS URL**. 2. If you do use a custom domain, select the **Use custom domain instead** option and copy the custom domain URL. Later, add this URL to your identity provider configuration. 12. If you want to enable just-in-time (JIT) provisioning for users, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. ![Provisioning configuration for SAML](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/947baea7-bfd4-48b7-de2d-5b041b8c8300/public) 13. (Temporary feature) Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. 14. (Optional) In the **Sign SAML request** section, paste in the **Signed certificate** and **Private key**. You may have got these from your IdP or you may have generated yourself (see procedure above). 15. Enter any [upstream params](/authenticate/enterprise-connections/advanced-saml-configurations/#upstream-parameters) that you want to pass to the identity provider. Not all providers support this, so check their documentation first. 16. Select **Save**. ## Step 3: Add and configure your Cloudflare application 1. Sign in to your Cloudflare account. 2. In the menu, select **Zero trust**. 3. Go to **Access > Applications**, then select **Add an application**. 4. Select SaaS as the type of application. The **Add application** window opens. ![Application settings](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/7a600656-63c7-42a1-73c6-8780c6d4f400/public) 5. Enter an application name or select an application. 6. Choose **Select SAML** for the authentication protocol. 7. Select **Add Application**. The **Configure application** page opens. ![Configure application in Cloudflare](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/64549f6e-4a94-41a0-7018-0fb7b7becf00/public) 7. Add the **Entity ID** and **ACS URL** from Kinde. 8. Copy the **SAML Metadata endpoint** to your clipboard. You'll need to enter this back in Kinde. 9. Scroll through the other sections and then select **Save configuration**. The **Add policies** page opens. 10. Add a policy to define who can access your application. You might do this via an allowlist and groups, or other strategy. 11. Complete any other relevant sections of the window, and then select **Done**. ![Screen shot of Application list in Cloudflare](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c11f72f1-22ff-428c-a7db-a13493ea5f00/public) ## Step 4: Finish setting up your Cloudflare connection 1. Open the connection in Kinde. Via **Organization > Authentication** or via **Settings > Authentication**. 2. Scroll to the **IdP metadata URL** field and paste the **Metadata URL** you copied from your Cloudflare app. 3. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. 4. Select **Save**.

# Authenticate - Enterprise connections - Custom SAML with Google Workspace

> Step-by-step guide to setting up Google Workspace SAML authentication including metadata file hosting and Admin Console configuration.

Google Workspace, SAML, enterprise auth, metadata hosting, Admin Console, SSO
authenticate

You can set up SAML to work with your Google Workspace. ## Hosting the SAML metadata XML file Google does not support hosting your SAML metadata XML file on their web services, but Kinde requires access to the file via URL so that certificates are always up to date. We recommend you host the file on a public web service that can be accessed by Kinde. For example, you could use an [AWS S3](https://aws.amazon.com/s3/) bucket, [Cloudflare R2](https://developers.cloudflare.com/r2/), or public website. ## Advanced configurations Depending on your SAML set up, you may need to include advanced configurations for your connection. See [Advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/). ## Step 1: Add Google Workspace SAML in Kinde You can make a connection available only to a specific organization, or you can create it so it can be used across any organization in your business. ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the connection type you want and then select **Next**. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the connection type you want and then select **Next**. 4. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection 1. Enter the **Connection name**. This name is what will appear on the button on the authentication screen. We will call it ‘Google Workspace’ for this example. 2. Enter an **Entity ID**. This field can be any mix of numbers and letters, as long as it matches your IdP configuration. Copy this somewhere you can access it later. 3. If you are adding this connection to a live environment, you will be prompted to enter an **IdP Metadata URL** before you can save. If you are not sure of the file location, enter any URL and we will update this later. ![connection window](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4fa556a1-7f8e-4926-d7ef-a274409e7700/public) 4. Enter a **sign in URL** if your IdP requires a specific URL. 5. If you want, select the **Sign request algorithm** and **Protocol binding**. The options you choose will depend on what your identity provider prefers or requires. 6. Select a **Name ID** format. This helps identify and link user identities between your IdP and Kinde. 7. Enter an **Email key attribute**. This is the attribute in the SAML token that contains the user’s email. Setting this value ensures that the email address returned in the SAML response is correctly retrieved. We do not recommend leaving this field blank, but if you do we will set ‘email’ as the attribute. 8. (Optional) Add a first name and last name key attribute. ![Home realm domains in SAML configuration](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/dbdccca5-2e6c-4dd8-eaec-e029574daf00/public) 9. Enter any relevant **Home realm domains**. This is how SAML recognizes a user’s credentials and routes them to the correct sign in page. Note that home realm domains need to be unique across all connections in an environment. [Read more about home realm domains](/authenticate/enterprise-connections/home-realm-discovery/). 10. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. ![ACS URL and custom domain option](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/885eda9c-ca4f-4340-db17-224023b8c300/public) 11. Copy the relevant reply URL: 1. If you don't use a custom domain, copy the **ACS URL**. 2. If you do use a custom domain, select the **Use custom domain instead** option and copy the custom domain URL. Later, add this URL to your identity provider configuration. 12. If you want to enable just-in-time (JIT) provisioning for users, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. ![Provisioning configuration for SAML](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/947baea7-bfd4-48b7-de2d-5b041b8c8300/public) 13. (Temporary feature) Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. 14. (Optional) In the **Sign SAML request** section, paste in the **Signed certificate** and **Private key**. You may have got these from your IdP or you may have generated yourself (see procedure above). 15. Enter any [upstream params](/authenticate/enterprise-connections/advanced-saml-configurations/#upstream-parameters) that you want to pass to the identity provider. Not all providers support this, so check their documentation first. 16. Select **Save**. ## Step 3: Configure Google Workspace Admin Console 1. Sign in to your [Google Workspace Admin Console](https://admin.google.com/). 2. In the main menu, go to **Apps > Web and Mobile Apps**. 3. Select **Add App > Add custom SAML app.** ![adding custom saml app](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/d02e7219-70e1-437c-41b3-b60263568900/public) 4. Complete the **App details** window: 1. Enter a name in the **App name** field. 2. Enter a **Description** for the app. 3. If you want, upload an icon for the app. 4. Select **Continue**. ![identity details](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/859218b5-4ca0-4fab-2475-3146088dc700/public) 5. Copy the **Google Identity Provider details** by selecting **DOWNLOAD METADATA** under Option 1. This is the file you will need to upload to a file storage location and provide a URL to finish setting up in Kinde. 6. Select **Continue**. ![Service provider details](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/91f8d1a9-bcd0-4b11-702e-c4593ac73d00/public) 7. Enter the **Service provider details**: 1. Enter or paste in the **ACS URL** you copied from Kinde earlier. 2. Enter or paste the **Entity ID**, this needs to match what was entered in Kinde earlier. 3. Set the **Name ID format** as **EMAIL**. 4. Select **Continue**. 8. On the **Attribute mapping** page, select **Finish**. 9. If you want to grant access to other users, select the chevron in the right corner of the **User access** panel. This opens additional options. ![user access panel](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c7e3c185-e1db-49b2-8e02-25ca7320cf00/public) 10. If you want, you can change the access to suit your organization’s needs. You can do this per Organizational unit or switch **ON for everyone.** 11. Select **Save**. ## Step 4: Upload metadata file As mentioned at the start, you need to upload the **metadata file** that you downloaded, to somewhere publicly accessible. This is because Google does not provide a publicly available URL for the metadata file. 1. Upload the metadata file to your storage location. 2. Copy the URL for the file. ## Step 5: Complete Kinde configuration 1. Open the connection's configuration page in Kinde. 2. In the **IdP metadata URL** field, paste the URL for the metadata file. 3. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. 4. Select **Save**. ## Test the connection Once you have completed the above steps, you should be able to see a **Google Workspace** sign-in button on your product’s authentication screen. Note: if you gave the enterprise connection a different name in Kinde, the button will have the name you entered. If you can’t see the button: - Check that the metadata URL and other connection details are correct in Kinde. - Check that user access is set up in your app, in the Google Workspace Console. Try to sign in and hopefully - success!!

# Authenticate - Enterprise connections - Custom authentication with SAML

> Complete guide to setting up custom SAML authentication with any identity provider including certificate generation, advanced configurations, and testing.

SAML, custom SAML, identity provider, IdP, service provider, SP, certificate, private key, JIT provisioning
authenticate

In Kinde, you can use SAML as your authentication protocol. Kinde acts as a service provider (SP), so you still need to bring your own identity provider (IdP) to set it up. Identity providers can include Google, Microsoft, Cloudflare, and others. Note: Since there are differences between set ups for each IdP, we are unable to provide full details on how to configure them all to connect with Kinde. However, the fields we mention below, should have similar names in your IdP. Some concepts are explained in the [advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/) topic. ## User provisioning Before you set up SAML, you can [import users in bulk](/manage-users/add-and-edit/import-users-in-bulk/), add them via [API](/kinde-apis/management#tag/users/post/api/v1/user), or [manually](/manage-users/add-and-edit/add-and-edit-users/) in Kinde. Alternatively, you can also take advantage of just-in-time (JIT) provisioning (Step 13 below) when you set up the connection. ## (Optional) Signed certificate and private key You can increase SAML security by adding a certificate and private key pair to your setup. Your IdP will check that the certificate and private key matches, each time a user authenticates this way. You can obtain the certificate and key from your IdP or you can generate yourself, see below. ### Generate a certificate and private key pair 1. In your preferred system, run a command to generate a certificate and key. For example, on \*nix systems, the command is: `openssl req -x509 -nodes -sha256 -days 3650 -newkey rsa:2048 -keyout private_key.key -out certificate.crt`. 2. This command may also work in other systems, such as WSL on Windows. Alternatively, you can try installing openssl binaries for your system. 3. Once the files are generated, save them locally. 4. Add the certificate to your IdP settings. The certificate there and the one in Kinde must match exactly. Instructions for how to do this varies, depending on your IdP. 5. Copy the certificate and private key details into Kinde as per the procedure below. ## Advanced configurations Depending on your SAML set up, you may need to include advanced configurations for your connection. See [Advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/) ## Step 1: Add SAML connection in Kinde ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the connection type you want and then select **Next**. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the connection type you want and then select **Next**. 4. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection 1. Enter a name for the connection. It must match the name in your SAML setup. 2. Enter an **Entity ID.** This is a value you can make up using a random alphanumeric string, e.g. `5836g209gbhw09r8y0913`. The Entity ID you enter here must be configured exactly the same in your identity provider (unless your IdP is Microsoft Azure). ![SAML configuration screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/740dba80-b1a3-410e-f03b-c07e9261f000/public) 3. If Microsoft is your provider and your app is a bit older, you may need to add `spn:` to the beginning of the **Entity ID** string in Kinde, e.g. `spn:5836g209gbhw09r8y0913`. This is not required for newly created apps. 4. Enter the **IdP metadata URL**. This URL comes from your identity provider. ![optional fields for saml](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4f1851db-5c34-496b-ced1-07c1cd272b00/public) 5. Enter a **sign in URL** if your IdP requires a specific URL. 6. If you want, select the **Sign request algorithm** and **Protocol binding**. The options you choose will depend on what your identity provider prefers or requires. 7. Select a **Name ID** format. This helps identify and link user identities between your IdP and Kinde. 8. Enter an **Email key attribute**. This is the attribute in the SAML token that contains the user’s email. Setting this value ensures that the email address returned in the SAML response is correctly retrieved. We do not recommend leaving this field blank, but if you do we will set ‘email’ as the attribute. 9. (Optional) Add a first name and last name key attribute. ![Home realm domains in SAML configuration](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/dbdccca5-2e6c-4dd8-eaec-e029574daf00/public) 10. Enter any relevant **Home realm domains**. This is how SAML recognizes a user’s credentials and routes them to the correct sign in page. Note that home realm domains need to be unique across all connections in an environment. [Read more about home realm domains](/authenticate/enterprise-connections/home-realm-discovery/). 11. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. ![ACS URL and custom domain option](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/885eda9c-ca4f-4340-db17-224023b8c300/public) 12. Copy the relevant reply URL: 1. If you don't use a custom domain, copy the **ACS URL**. 2. If you do use a custom domain, select the **Use custom domain instead** option and copy the custom domain URL. Later, add this URL to your identity provider configuration. 13. If you want to enable just-in-time (JIT) provisioning for users, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. ![Provisioning configuration for SAML](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/947baea7-bfd4-48b7-de2d-5b041b8c8300/public) 14. (Temporary feature) Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. 15. (Optional) In the **Sign SAML request** section, paste in the **Signed certificate** and **Private key**. You may have got these from your IdP or you may have generated yourself (see procedure above). 16. Enter any [upstream params](/authenticate/enterprise-connections/advanced-saml-configurations/#upstream-parameters) that you want to pass to the identity provider. Not all providers support this, so check their documentation first. 17. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. 18. Select **Save**. Next: Complete any additional configuration in your identity provider’s settings, such as adding the **Entity ID** and **return URL**. ## Step 3: Test the connection Once you have entered the ACS URL in your identity provider, the connection should be enabled. 1. Go to your test application and attempt to sign in. 2. If you left the **Home realm domains** field blank in Kinde, when you launch your application, you should see a button to sign in. Click it and go to step 4. 3. If you completed the **Home realm domains** field, you should be redirected immediately to your IdP sign in screen. 4. Enter your IdP details and complete any additional authentication required.

# Authenticate - Enterprise connections - Enterprise connections for B2B

> Guide to setting up enterprise connections for B2B businesses including organization-level connections and domain-based access control.

B2B, enterprise connections, organization-level, domain restrictions, JIT provisioning, allowed domains
authenticate

<Aside type="upgrade"> For multiple enterprise connections and other advanced organization features, you may need to [upgrade your plan](https://kinde.com/pricing/) </Aside> Enterprise connections are common for B2B setups where each business customer is represented as an organization in Kinde, and that organization is linked to one or more connections. There are two different ways to scope an enterprise connection and restrict it to the organization level. - When the `org_code` is passed to Kinde as part of the authentication url, the correct sign-in options are shown. - Users can only self-join the organization if this was enabled as part of the connection configuration. - Organization access is locked down to allow access based only on connection - including switches between organizations. - If you are using home realm discovery, connections do not have to be enabled at the application level to support redirects to the correct IDP. This behaviour is domain-agnostic and is purely concerned with the connection being used. ## (Recommended) Create the enterprise connection in the Kinde organization The easiest way to restrict an enterprise connection to an organization, is to add the connection to the organization and not create it as a shared connection (at the environment level). To do this, follow the relevant procedure for adding a connection in the relevant topic. ## Select a shared enterprise connection for the organization 1. Open the relevant organization in Kinde and select **Authentication** in the menu. 2. Add a connection and select **existing connection**. Switch on the relevant enterprise connection from the list. 3. Select **Save**. ## Org provisioning and access via allowed domains To manage organization access, you can [set policies](/build/organizations/organization-access-policies/) that restrict access to a list of allowed domains. You can also enable just-in-time (JIT) provisioning via allowed domains. 1. Open the relevant organization in Kinde and select **Policies** in the menu. 2. Select **Allow org members to be auto-added**. 3. Enter all the allowed domains in the **Allowed domains** list. 4. Enable JIT provisioning for all new organization members by selecting **Auto-add users from allowed domains**. 5. Select **Save**. Here’s what happens: - When the `org_code` is passed to Kinde as part of the authentication url, the correct sign-in option is shown. - Kinde checks that users belong to one of the allowed domains before authorizing access. - The user joins the organization if the domain matches any of the allowed domains. - Because this check only happens during sign up, you can still separately add users with email domains which fall outside of this restriction. This can be useful if you wish to add contractors or auditors who may have email addresses not in the domain allowlist. <Aside> If both enterprise connection and domain restrictions are in place, both checks must be successful. </Aside> ## Enterprise connections only allow service provider log in, not identity provider log in If you set up an enterprise connection for a customer using their IdP credentials, they can only sign in to your app via your app, with Kinde as the auth service provider. The customer cannot sign in to your app via their own connection setup - known as IdP-initiated login.

# Authenticate - Enterprise connections - MS Entra ID (SAML) enterprise connection

> Step-by-step guide to setting up Microsoft Entra ID SAML enterprise authentication including application configuration and group synchronization.

Microsoft Entra ID, SAML, Azure AD, enterprise application, group claims, federation metadata
authenticate

Kinde supports the use of Microsoft Entra ID (SAML) as an enterprise-level authentication method. This service used to be Azure AD. If you are [importing users into Kinde](/manage-users/add-and-edit/import-users-in-bulk/), their Entra ID will be picked up and matched to the relevant connection based on their email address, for a seamless transition to Kinde. <Aside> **Microsoft Entra ID** is the new name for **Microsoft** **Azure AD**, which is Microsoft’s enterprise authentication service. This doc may contain some mixed references. [More information](https://learn.microsoft.com/en-gb/azure/active-directory/fundamentals/new-name). </Aside> ## Before you begin - You need a Microsoft developer account to register an application. - Test the connection in a non-production environment before activating in a live environment. ## Advanced configurations Depending on your SAML set up, you may need to include advanced configurations for your connection. See [Advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/). ## Step 1: Add the connection in Kinde <Aside> You can make a connection available only to a specific organization, or you can create it so it can be used across any organization in your business. </Aside> ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the Microsoft connection type you want and then select **Next**. Currently we support WS Federated and OpenID types. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the Microsoft connection type you want and then select **Next**. Currently we support WS Federated, SAML, and OpenID types. 4. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection in Kinde 1. Enter a **Connection name.** Make this something you can easily identify, especially if you are adding multiple connections for different business customers. <Aside type="warning"> If you plan to import users into Kinde, make sure the connection name matches the connection name in the Entra ID record. </Aside> 2. For the **Entity ID**, enter a random string like `hEb876ZZlkg99Dwat64Mnbvyh129`. Make a copy of the string as you will add this to your SAML application later. Note that some older Entra ID tenants require the Entity ID to have a prefix of `spn:` If your connection fails, this could be why. 3. Enter the **IdP metadata URL**. This URL comes from your identity provider. If you don't know it, enter any URL and update this later. 4. Enter a **sign in URL** if your IdP requires a specific URL. ![optional fields for saml](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4f1851db-5c34-496b-ced1-07c1cd272b00/public) 5. If you want, select the **Sign request algorithm** and **Protocol binding**. The options you choose will depend on what your identity provider prefers or requires. 6. Select a **Name ID** format. This helps identify and link user identities between your IdP and Kinde. 7. Enter an **Email key attribute**. This is the attribute in the SAML token that contains the user’s email. Setting this value ensures that the email address returned in the SAML response is correctly retrieved. We do not recommend leaving this field blank, but if you do we will set ‘email’ as the attribute. 8. (Optional) Add a first name and last name attribute. 9. Enter **Home realm domains**. This speeds up the sign in process for users of those domains. Note that all home realm domains must be unique across all connections in an environment. For more information, see [Home realm domains or IdP discovery](/authenticate/enterprise-connections/home-realm-discovery/). ![SAML configuration screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/dbdccca5-2e6c-4dd8-eaec-e029574daf00/public) 10. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. 11. Copy the relevant reply URL: 1. If you don't use a custom domain, copy the **ACS URL**. 2. If you do use a custom domain, select the **Use custom domain instead** option and copy the custom domain URL. Later, add this URL to your identity provider configuration. ![ACS URL and custom domain option](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/885eda9c-ca4f-4340-db17-224023b8c300/public) 12. If you want to enable just-in-time (JIT) provisioning, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. 13. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 14. Enter any [upstream params](/authenticate/enterprise-connections/advanced-saml-configurations/#upstream-parameters) that you want to pass to the identity provider. Not all providers support this, so check their documentation first. 15. Select **Save**. ## Step 3: Create and configure an Entra ID enterprise application 1. On the [Microsoft Entra admin center](https://entra.microsoft.com/#home) home screen, select **Applications > Enterprise Applications**. 2. Select **New application** and in the next screen select **Create your own application**. A side panel opens. 3. Enter the name for the application. 4. Select the **Integrate any other application you don't find in the gallery (Non-gallery)** option and then select **Create**. It can take a few seconds for the application to be created. 5. Select **Get started** on the **2. Set up single sign on** tile, then select the SAML tile. 6. Edit the **Basic SAML Configuration**. The side panel opens. ![SAML config side panel](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/cb24d39d-07a8-4622-bf7f-2f8eeca1fb00/public) 7. Select **Add identifier**, then enter the same random string like you did previously for the Entity ID in Kinde. E.g. `hEb876ZZlkg99Dwat64Mnbvyh129`. 8. Select **Add reply URL** and paste the ACS URL that you copied from the connection configuration screen in Kinde, then select **Save**. 9. Close the panel. 10. Select **Edit** on the **Attributes & Claims** section. Copy the values of the identifiers (Principal name, Given name, Surname), for example: ![Example identifiers to copy](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/79037f34-5b20-443f-39ca-d3cb70e9b800/public) 11. In the **SAML certificates** section, copy the **App federation metadata URL**. You'll add this as the **IdP metadata URL** in the Kinde connection. 12. Download the Federation metadata XML file. This is the SAML signed certificate. ## Step 4: Finish configuring the connection in Kinde 1. Open the SAML connection in Kinde. Via **Organization > Authentication** or via **Settings > Authentication**. 2. Paste in the data you got from the SAML app: - IdP metadata URL 3. Update the attributes - Email key attribute (Email), such as `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress` - First name attribute (Given name), such as `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname` - Last name attribute (Surname), such as `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname` 4. (Optional) if you want to sign the SAML httpRequest: 1. Open the **Federation Metadata XML** file in a text editor. 2. Copy the certificate and private contents of the file to the Sign SAML request section. 5. Paste them into the **Signing certificate** field in the Kinde connection. 6. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. 7. Select **Save**. ## Step 5: Test the connection Make sure you test the connection before enabling in production for your users. 1. Go to your test application and attempt to sign in. 2. If you left the **Home realm domains** field blank in Kinde, when you launch your application, you should see a button to sign in. Click it and go to step 4. 3. If you completed the **Home realm domains** field, you should be redirected immediately to your IdP sign in screen. 4. Enter your IdP details and complete any additional authentication required. ## Sign out behaviour for user session If your users sign in via the Entra ID (formerly Azure AD) enterprise connection in Kinde, when they sign out, they are just signing out of Kinde. They are not fully being signed out of Entra ID. It also works this way for social connections, where a third party is the identity provider. ## (Optional) Sync Entra ID groups with Kinde ### Add groups claim to MS Entra ID app 1. Open your application in the [MS Azure Portal](https://portal.azure.com/). 2. Go to **Token configuration** in the left menu. 3. Select **Add groups claim**. 4. In the window that appears, select the groups to be included in tokens. ![image of edit groups claim screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/fed278be-bdcd-43b6-7130-8c866928b700/public) 5. If you want, customize the token properties by type. 6. Save your changes. For reference, see this Microsoft doc about [configuring optional claims](https://learn.microsoft.com/en-us/entra/identity-platform/optional-claims?tabs=appui/) ### Customize ID token in Kinde 1. Open your application in Kinde. 2. Go to **Tokens**. 3. Scroll to **Token customization** and select **Configure** on the **ID tokens** tile. 4. Switch on **Social identity** as an additional claim. 5. Select **Save**. ### Access group info in tokens - ID token - `ext_provider > claims > profile > groups` - Access token - `ext_groups`

# Authenticate - Enterprise connections - Home realm or IdP discovery

> Guide to home realm discovery (HRD) for seamless enterprise authentication routing based on email domains and identity provider selection.

home realm discovery, HRD, IdP discovery, email domain routing, enterprise auth, SSO button
authenticate

Home realm discovery (HRD) provides a seamless sign-in experience for your enterprise auth users. When HRD is configured and a user sign in, Kinde checks which IdP or connection group a user belongs to, before authenticating them. It is also known as Identity Provider or IdP discovery. When HRD is set up in Kinde, users are authenticated based on the **Home Realm Domain** (email domain) that is entered. HRD is usually applied where your identity provider (IdP) is a third party, such as Microsoft Entra ID, Google, Cloudflare, etc, and you are using an enterprise or SAML auth setup. By default, Kinde provides a universal login page where users of any enterprise connection can sign in. They are then silently routed and verified via the relevant IdP. ## How it works When you set up a [Microsoft Entra ID](/authenticate/enterprise-connections/azure/) or [custom SAML](/authenticate/enterprise-connections/custom-saml/) connection, you’ll configure the home realm (or domains) to be recognized during authentication. All home realm domains must be unique across all connections in the environment. If HRD is not in place, the end-user must select the relevant log in button to be taken through to the right authentication URL. When you apply HRD in Kinde, the end-user is recognized and authenticated based on their email domain, without having to select or click anything. For example, you could configure two different connections as follows: - Email addresses ending with `enterpriseA.com` use SAML connection A - Email addresses ending with `enterpriseB.com` use Entra ID connection B In the back end, the end-user is linked to the correct identity provider via the connection, and they are silently authenticated. So when Jude Watson arrives at the sign in window and enters `judewatson@enterpriseA.com`, they are routed to the IdP for SAML connection A, and authenticated. ## Showing or hiding the sign in buttons Even if you have set up HRD, you can choose to show an SSO sign in button so the user has to click to proceed. Learn more [here](/authenticate/enterprise-connections/about-enterprise-connections/#show-or-hide-the-sso-sign-in-button-on-the-auth-page).

# Authenticate - Enterprise connections - Use LastPass as a SAML identity provider

> Step-by-step guide to integrating LastPass as a SAML identity provider with Kinde for enterprise authentication and access control.

LastPass, SAML, identity provider, IdP, enterprise auth, SSO, access policies
authenticate

If you use LastPass to centralize authentication and authorization in your business, you can integrate Kinde as a service provider for these processes. This gives you the benefits of Kinde’s robust auth capabilities, while keeping the familiar LastPass structure. ## Before you begin Here's what you need to do before you add the connection: - Sign up for a LastPass business account to add a LastPass application. - Generate a SAML Metadata XML file as LastPass does not support hosting this for you (more information below). ## Recommendations - Open the Kinde Enterprise connection in one browser tab, and the LastPass app configuration in another tab, as you will need to copy connection information across between them. - Set up and testing the connection in a non-production environment before making available to users. ## Advanced configurations Depending on your SAML set up, you may need to include advanced configurations for your connection. See [Advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/) ## Step 1: Add the connection in Kinde <Aside> You can make a connection available only to a specific organization, or you can create it so it can be used across any organization in your business. </Aside> ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the LastPass connection and then select **Next**. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the LastPass connection and then select **Next**. 4. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection 1. Enter a name for the connection. It should match the connection name in LastPass. 2. Enter a random string value for Entity ID, for e.g. `870sa9fbasfasdas23aghkhc12zasfnasd`. 3. Enter the **IdP metadata URL**. This URL comes from your identity provider. ![optional fields for saml](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4f1851db-5c34-496b-ced1-07c1cd272b00/public) 4. Enter a **sign in URL** if your IdP requires a specific URL. 5. If you want, select the **Sign request algorithm** and **Protocol binding**. The options you choose will depend on what your identity provider prefers or requires. 6. Select `Email` as the **Name ID** format. This helps identify and link user identities between your IdP and Kinde. 7. Enter `emailAddress` as the **Email key attribute**. This is the attribute in the SAML token that contains the user’s email. Setting this value ensures that the email address returned in the SAML response is correctly retrieved. 8. (Optional) Add a first name and last name key attribute. This is not necessary for LastPass. ![Home realm domains in SAML configuration](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/dbdccca5-2e6c-4dd8-eaec-e029574daf00/public) 9. Enter any relevant **Home realm domains**. This is how SAML recognizes a user’s credentials and routes them to the correct sign in page. Note that home realm domains need to be unique across all connections in an environment. [Read more about home realm domains](/authenticate/enterprise-connections/home-realm-discovery/). 10. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. ![ACS URL and custom domain option](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/885eda9c-ca4f-4340-db17-224023b8c300/public) 11. Copy the relevant reply URL: 1. If you don't use a custom domain, copy the **ACS URL**. 2. If you do use a custom domain, select the **Use custom domain instead** option and copy the custom domain URL. Later, add this URL to the LastPass configuration. 12. If you want to enable just-in-time (JIT) provisioning for users, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. ![Provisioning configuration for SAML](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/947baea7-bfd4-48b7-de2d-5b041b8c8300/public) 13. (Temporary feature) Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. 14. (Optional) In the **Sign SAML request** section, paste in the **Signed certificate** and **Private key**. You may have got these from your IdP or you may have generated yourself (see procedure above). 15. Enter any [upstream params](/authenticate/enterprise-connections/advanced-saml-configurations/#upstream-parameters) that you want to pass to the identity provider. Not all providers support this, so check their documentation first. 16. Select **Save**. ## Step 3: Add and configure your LastPass application View the [LastPass docs](https://support.lastpass.com/s/document-item?language=en_US&bundleId=lastpass&topicId=LastPass/uac_applications_sso_apps.html&_LANG=enus) for the full procedure. 1. Sign in to your LastPass business account. 2. In the menu, select **AdminConsole**. 3. Go to **Applications**, then select **SSO apps**. 4. Select **Search the catalogue**. A side panel slides out. ![Initialize SAML keys in LastPass](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b11e3815-b261-4960-e4c3-6d26ce297800/public) 6. Follow the prompt to initialize SAML keys. This will take up to 15 minutes to process. 7. Refresh the page and select **Search the catalogue** again. The side panel slides out showing a list. 8. Scroll and select **Custom service**. 9. Select **Add a new domain** if prompted. The configuration panel opens. ![Add app name](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c87f07cb-3284-4ddd-f346-7e8b2dfd8400/public) 10. Enter a **Name** and select which groups will be able to sign in using this SSO connection. 11. At the top of the **Configuration section** select **Export SAML IdP Metadata**. 12. Select Copy or download, then select **OK**. ![Configure application in LastPass](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/bf384b65-ff19-490d-974d-34d807519700/public) 13. In the **Service Provider entity ID** field, enter the random ID you generated for the **Entity ID** in Kinde. 14. In the **Assertion consumer service** field, enter the **ACS URL** or your custom domain, from Kinde. 15. Make sure the **Name ID format** is `emailAddress` and the **Name ID** is `Email address'. 16. Enter any custom attributes required. ![Custom attributes in LastPass](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/cd749576-b884-42e9-d7cb-caf6bca32400/public) 17. Select **View key** under the **Key field**. 18. Copy the key. You will need this to finishe setting up the Kinde connection. 19. Make sure the **Service is enabled** option is selected. 20. Select **Save**. ## Step 4: Finish setting up your LastPass connection in Kinde 1. Open the connection in Kinde. Go to **Organization > Authentication** or via **Settings > Authentication**. 2. In the **IdP metadata URL** field paste the **IDP Entity ID** you copied from LastPass. 3. In the **Sign-in URL** field paste the **Single Sign-on URL** you copied from LastPass. 4. In the **Signing certificate** field paste the **IDP Metadata XML** file content. [@Viv not sure about this - is this where hosting the certificate is advised??] 5. In the **Private key** field paste in the **Key** you copied from LastPass. 6. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. Note that it will be automatically available for all apps if you choose this option. 7. Select **Save**. Test the connection works by trying to sign in to your test environment using this method. Re-test when you deploy the option to users.

# Authenticate - Enterprise connections - Mapping and syncing users for enterprise auth

> Guide to mapping and syncing users for enterprise authentication including user ID mapping, profile sync, and webhook integration.

user mapping, user syncing, enterprise auth, webhooks, profile sync, user ID, API integration
authenticate

When you use Kinde to authenticate users via an enterprise connection such as SAML, you also need a way for users to be identified in Kinde so they match the identities stored in your Identity Provider (IdP). In general, an email address can be used to map users across systems, but because enterprise connection users can have aliases and proxy addresses, there are better ways to keep identities in sync. Here’s how we recommend mapping user profiles and keeping them synced for enterprise connections. ## Map the Kinde user ID to your product When users are imported or added to Kinde, a unique user ID is generated. For example, `kp:1876b10742894a0c9M8e725048e7a323`. We recommend you map each user’s Kinde ID back to your product, and use this as the primary auth identifier. This will keep profiles in sync and support a seamless authentication experience. ### Get Kinde user IDs via API You can access user IDs [via the API](http://localhost:4321/kinde-apis/management#tag/users/post/api/v1/users/{user_id}/identities) by calling GET `/api/v1/users`. This will return a response with a users array with the following data: ```json { "code": "string", "message": "string", "users": [ { "id": "string", "provided_id": "string", "email": "string", "username": "string", "last_name": "string", "first_name": "string", "is_suspended": true, "picture": "string", "total_sign_ins": 0, "failed_sign_ins": 0, "last_signed_in": "string", "created_on": "string", "organizations": ["string"], "identities": [ { "type": "string", "identity": "string" } ] } ], "next_token": "string" } ``` Where: - `id` is the kinde ID - `provided_id` is the ID you may have provided when you imported your users. This ID can also be useful to match imported users to your local database records. ## Switch on profile sync As part of your business authentication setup, we recommend switching on user profile sync to keep enterprise and social profiles up to date across providers. 1. Go to **Settings > Policies**. 2. Switch on **Sync user profiles on sign in**. 3. Select **Save**. ## Sync users with webhooks Webhooks are a method of being notified when an event occurs in Kinde, e.g. a user is created. You can [register your own endpoint URLs](/integrate/webhooks/add-manage-webhooks/) in Kinde, and each time the event occurs, data for that event will be sent to your endpoint. Here’s some examples of webhook events that can be used to keep your users in sync: - `user.created` - when a user is created in Kinde either via the admin UI or registering - `user.updated` - when a user is added to an organization, or their roles or permissions change - `user.deleted` - when a user is deleted via the UI or via the API Here’s an example json schema for user.updated that could be used to sync your data: ```json { "id": "et_018df239698d29177684be3f5ad1266d", "code": "user.updated", "name": "User updated", "origin": "kinde", "schema": { "$id": "https://kinde.com/user.updated.schema.json", "type": "object", "title": "User Updated Webhook Event", "$schema": "https://json-schema.org/draft/2020-12/schema", "properties": { "data": { "type": "object", "properties": { "user": { "type": "object", "properties": { "id": { "type": "string", "pattern": "kp[:_][0-9a-f]{32}", "description": "ID of the user" }, "phone": { "type": ["null", "string"] }, "last_name": { "type": ["string", "null"], "description": "The users updated last name" }, "first_name": { "type": ["string", "null"], "description": "The users updated first name" }, "is_suspended": { "type": "boolean", "description": "The users updated status" }, "organizations": { "type": ["array", "null"], "items": [ { "type": "object", "properties": { "code": { "type": "string", "pattern": "org[:_][0-9a-f]{11}" }, "roles": { "type": ["array", "null"], "items": [ { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "key": { "type": "string" } } } ] }, "permissions": { "type": ["array", "null"], "items": [ { "type": "object", "properties": { "id": { "type": "string", "format": "uuid" }, "key": { "type": "string" } } } ] } } } ] }, "is_password_reset_requested": { "type": "boolean", "description": "The users updated password reset status" } }, "description": "User event data" } }, "description": "Webhook event data" }, "type": { "constant": "user.updated" }, "source": { "enum": ["api", "admin"], "description": "Source of the action" }, "event_id": { "type": "string", "pattern": "event_[0-9a-f]{32}", "description": "ID of the event" }, "timestamp": { "type": "string", "format": "date-time", "description": "Datetimestamp of the action" } }, "description": "Webhook detail the user updated event" }, "version": 1 } ``` You can see a full list of events in the Kinde UI under **Settings > Webhooks**, or by calling the [Kinde management API](/kinde-apis/management#tag/webhooks) which also provides the JSON schema GET `/api/v1/event_types`. Read more [about webhooks](/integrate/webhooks/about-webhooks/).

# Authenticate - Enterprise connections - Use Okta as a SAML identity provider

> Step-by-step guide to integrating Okta as a SAML identity provider with Kinde, including application setup and troubleshooting.

Okta, SAML, identity provider, IdP, enterprise auth, SSO, application assignment
authenticate

If you use Okta to centralize authentication and authorization in your business, you can integrate Kinde as a service provider for these processes. This gives you the benefits of Kinde’s robust auth capabilities, while keeping the familiar Okta structure. You need to set up an enterprise connection in Kinde for this, and add an Okta application. See steps below. ## Advanced configurations Depending on your SAML set up, you may need to include advanced configurations for your connection. See [Advanced SAML configurations](/authenticate/enterprise-connections/advanced-saml-configurations/). ## Step 1: Add an Okta connection in Kinde ### Add a connection for a specific organization 1. Go to **Organizations** and open the organization. 2. In the menu, select **Authentication**, then select **Add connection**. 3. In the **Add connection** window, select **New enterprise connection**, then click **Next**. 4. Select the Okta connection and then select **Next**. 5. Next: 'Step 2: Configure the connection'. ### Add a connection that can be shared across multiple organizations 1. Go to **Settings > Environment > Authentication**. 2. Scroll to the **Enterprise connection** section and select **Add connection**. The **Add connection** window opens. 3. Select the Okta connection and then select **Save**. 4. On the tile for the new connection, select **Configure**. 5. Next: 'Step 2: Configure the connection'. ## Step 2: Configure the connection 1. Enter a name for the connection. 2. Enter a random value for the **Entity ID**, e.g. `870sa9fbasfasdas23aghkhc12zasfnasd`. ![Okta connection config window](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/a06249d4-d368-43f7-bba1-9df10d80aa00/public) 3. Enter the **IdP metadata URL**. This URL comes from your identity provider. If you haven't set up your app yet, you can add this later. ![optional fields for saml](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4f1851db-5c34-496b-ced1-07c1cd272b00/public) 4. Enter a **sign in URL** if your IdP requires a specific URL. 5. If you want, select the **Sign request algorithm** and **Protocol binding**. The options you choose will depend on what your identity provider prefers or requires. 6. Select a **Name ID** format. This helps identify and link user identities between your IdP and Kinde. 7. Enter an **Email key attribute**. This is the attribute in the SAML token that contains the user’s email. Setting this value ensures that the email address returned in the SAML response is correctly retrieved. We do not recommend leaving this field blank, but if you do we will set ‘email’ as the attribute. 8. (Optional) Add a first name and last name key attribute. ![Home realm domains in SAML configuration](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/dbdccca5-2e6c-4dd8-eaec-e029574daf00/public) 9. Enter any relevant **Home realm domains**. This is how SAML recognizes a user’s credentials and routes them to the correct sign in page. Note that home realm domains need to be unique across all connections in an environment. [Read more about home realm domains](/authenticate/enterprise-connections/home-realm-discovery/). 10. If you use home realm domains, the sign in button is hidden on the auth screen by default. To show the SSO button, select the **Always show sign-in button** option. ![ACS URL and custom domain option](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/885eda9c-ca4f-4340-db17-224023b8c300/public) 11. Copy the relevant reply URL: 1. If you don't use a custom domain, copy the **ACS URL**. 2. If you do use a custom domain, select the **Use custom domain instead** option and copy the custom domain URL. Later, add this URL to your identity provider configuration. 12. If you want to enable just-in-time (JIT) provisioning for users, select the **Create a user record in Kinde** option. This saves time adding users manually or via API later. ![Provisioning configuration for SAML](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/947baea7-bfd4-48b7-de2d-5b041b8c8300/public) 13. (Temporary feature) Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. 14. (Optional) In the **Sign SAML request** section, paste in the **Signed certificate** and **Private key**. You may have got these from your IdP or you may have generated yourself (see procedure above). 15. Enter any [upstream params](/authenticate/enterprise-connections/advanced-saml-configurations/#upstream-parameters) that you want to pass to the identity provider. Not all providers support this, so check their documentation first. 16. Select **Save**. ## Step 3: Add and configure your Okta application 1. Sign in to the Okta admin console. 2. Select **Applications > Applications**. ![Okta config window](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/63dee3f1-b0ba-4961-33e9-a8f928a07d00/public) 3. Select **Create App Integration**. The **Sign-in method** options opens. 4. Select SAML 2.0 and then select **Next**. The app’s general settings opens. ![Okta console](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/ff6393ec-43bb-4b25-e12c-26f7a05aa800/public) 5. Add a name in the **App name** field then select **Next**. The **Configure SAML** screen opens. ![Okta config screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/bb3bf35b-3322-433e-8224-5297a71da300/public) 6. In the **SAML settings** section, enter the following values: 1. **Single sign-on URL:** Paste the **Assertion Customer Service (ACS) URL** you copied from Kinde. 2. **Audience URI (SP Entity ID)**: Paste the **Entity ID** you copied from Kinde. 3. **Name ID format:** Select **EmailAddress**. 4. **Application username**: Select **Email**. 5. Leave all other options to their default value and select **Next**. 7. Select **Finish**. You will be redirected to the newly created application in Okta. 8. Select the **Sign on** tab and copy the metadata URL. ![Metadata URL in Okta](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/9bdcb215-054e-45c1-11a7-2df2f4be7800/public) ## Step 4: Finish setting up your SAML connection in Kinde 1. Open the connection in Kinde. Via Organization > Authentication or via Settings > Authentication. 2. Scroll to the **IdP metadata URL** field and paste the **Metadata URL** you copied from Okta. 3. Enter the signed certificate and key information if you have it. You can do this later as well. 4. Switch on the connection. This will make it instantly available to users if this is your production environment. 1. For environment-level connections, scroll down and select the apps that will use the auth method. 2. For organization-level connections, scroll down and select if you want to switch this on for the org. 5. Select **Save**. You can now use Okta as an IdP for the selected applications. ## Troubleshooting the connection If you get an error in Okta that says **User is not assigned to this application**, it means you need to assign a user or group to your Okta application. 1. Go to the **Applications** section in your Okta Admin Console. 2. Select the SAML 2.0 app you set up. 3. Under the **Assignments** tab, click **Assign > Assign to People or Assign to Groups**. 4. Choose the user or group you want to assign to this application and save your changes.

# Authenticate - Enterprise connections - Provisioning users for enterprise connections

> Comprehensive guide to user provisioning for enterprise connections including JIT provisioning, pre-provisioning, and troubleshooting SSO issues.

user provisioning, JIT provisioning, enterprise connections, SSO, identity management, troubleshooting
authenticate

When you set up Kinde with enterprise authentication like SAML or Cloudflare, you’ll want to make sure that users are set up with the correct access and identity from day one. How you do this depends on how you ‘provision’ their enterprise user identity. Users in Kinde are able to have multiple identities to support all the ways they can sign in, such as via email, social sign-in, etc. However, users managed through enterprise connections can only have an enterprise identity. ## Just-in-time (JIT) provisioning for user creation (recommended) JIT provisioning is the simplest way to add users to Kinde and allow them to authenticate. Rather than importing or pre-provisioning, your users are added to Kinde at the point of their first authentication. To enable JIT provisioning, select the **Create a user record in Kinde** option when you set up your enterprise connection. ![option for JIT in the enterprise connection screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/74717fdb-d6d2-4f0b-dcf6-2aef95cb7600/public) The first time the user authenticates, Kinde creates a new user record for them with the identity information passed from your IdP. ## Pre-provision or pre-create users Sometimes, JIT provisioning is not the right path or may not be possible. For example: - The user already exists in Kinde and you're switching the auth method to SSO. - You are importing users from another system and there is existing data related to the user you also wish to import. - You only want to add a sub-set of users from your directory. ### Add users to Kinde In all these cases, the users must first exist in Kinde to implement enterprise SSO. You can add users to Kinde [via import](/manage-users/add-and-edit/import-users-in-bulk/) or [via API](/kinde-apis/management#tag/users/post/api/v1/user). All users must have an email address that matches their email with the IdP. This is not necessarily the email identity for sign in, it is purely for initial matching against the IDP provided email. <Aside title="Users who sign on through multiple enterprise connections"> It’s possible that you manage users who can sign in via multiple enterprise connections. In these cases, the user must have a separate profile for each enterprise connection. </Aside> ### Provisioning method 1: Assign a connection identity to a user (recommended) This method of provisioning requires you to add the enterprise connection as part of the user’s identity in Kinde. **Add the enterprise connection identity via API** Post identity details to this endpoint `POST /api/v1/users/{user_id}/identities` with `enterprise` as the type and the `connection_id`. For more information, see [Create identity](https://docs.kinde.com/kinde-apis/management/#tag/users/post/api/v1/users/{user_id}/identities). You can search connections via API and filter them by domain. This can help you obtain the connection ID. **Add the enterprise connection identity manually** 1. Open a user’s profile and select **Add identity**. 2. In the window that appears, select **Enterprise SSO** as the **Identity type**. 3. Select the relevant **Enterprise connection** from the list. 4. Enter the user’s email as it appears in the identity provider directory. 5. Select **Save**. The user’s profile is updated to show only the enterprise connection identity. ### Provisioning method 2: Set the connection to trust emails from the IDP A slightly less secure option is to set the enterprise connection to trust emails from your IdP. This does save you adding and linking users as per method 1 above, but it also overrides any existing identity information in Kinde (such as email or phone number) with the connection data from the IdP. To employ this method, select the **Trust email addresses provided by this connection** option in the connection configuration. **Settings > Authentication > Enterprise connections > Configure.** ![Screen shot of trust emails switch](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/92f20fc4-7dcb-4ce1-9fb2-74b4db67e200/public) When the user signs in with an SSO connection that provides an email that matches the pre-provisioned users email, we will automatically combine the users. Their original email identity will be removed and from this point on they can only authenticate via the SSO connection. ## Troubleshoot SSO issues **We can’t find your account** If a user goes to sign in and encounters the ’We can’t find your account’ message, it could be because **Self-joining** for the organization is switched off. This is the right behaviour if you don’t want users without the `org_id` to join the org, but the message is confusing. Switch this on via **Organization > Policies**. **Duplicate identities** If duplicate identities are created for users in Kinde, it may because the **Trust email addresses provided by this connection** option is not switched on in the connection configuration. **Customer's SSO auth not working** Some B2B businesses allow their customers to sign in using their own enterprise SSO. When setting this up, a common mistake is that they supply incorrect values for the Client ID and Client Secret, based on the identity provider information. Double check these if you come across connection issues.

# Authenticate - Enterprise connections - Refresh SAML certificate

> Quick guide to refreshing SAML certificates and private keys for enterprise authentication security maintenance.

SAML certificate, private key, certificate refresh, enterprise auth, security maintenance
authenticate

If you secure your authentication setup with SAML certificate and private key, you’ll need to update or refresh these periodically. Your IdP might issue new certificates, or you can generate a certificate and private key yourself. See the [main SAML topic](/authenticate/enterprise-connections/custom-saml/#optional-signed-certificate-and-private-key). 1. In Kinde, go to **Settings > Authentication**. 2. In the **Enterprise connections** section, select **Configure** on the SAML tile. 3. Scroll to the **Sign SAML request** section and override the **Signing certificate** and **Private key** with the new certificate content. 4. Select **Save**.

# Authenticate - Manage authentication - Change authentication for an application

> Guide to configuring different authentication methods for different applications including mobile apps and platform-specific auth.

application authentication, mobile auth, platform-specific auth, Google auth, Apple auth
authenticate

If you want, you can select different authentication methods for different applications. You might want to do this, for example, so users sign in with Google for your Android app and Apple for your iOS app. You first need to [set up all your auth methods](/authenticate/authentication-methods/set-up-user-authentication/) and [set up each application](/build/applications/add-and-manage-applications/). 1. Go to **Settings > Environment > Applications**. 2. Select **View details** on the application you want to edit. 3. In the **Application details** screen, select **Authentication** in the left menu. 4. Use the toggle switches to change the authentication methods for the app. 5. If there is a method that you want that is not listed, [set it up](/authenticate/authentication-methods/set-up-user-authentication/). 6. When you’re finished, select **Save**. 7. Repeat for each application.

# Authenticate - Manage authentication - Build a switch to navigate between organizations

> Step-by-step guide to building an organization switcher for B2B applications using ID tokens and React components.

organization switcher, B2B, ID tokens, React, multi-organization, org navigation
authenticate

A common pattern in B2B products is for users who belong to multiple organizations to be able to switch between them. This topic demonstrates how to achieve this. ## Step 1: Add org data to ID tokens The first step is to include a list of organizations a user belongs to, in their ID token. 1. In Kinde, open the application you want to enable a switcher for. For example, go to **Settings > Applications > [View details] > Tokens.** 2. Scroll down to the **Token customization** section and select **Configure** on the **ID token** card. The **Customize ID token** window opens. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/60ed313e-8250-4b33-0645-51a97ccc6d00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 3. Select the **Organizations (array)** checkbox in the **Additional claims** section. 4. Select **Save**. This adds the organization `id` and `name` to the user’s ID token, in the following format: ```jsx "organizations": [ { "id": "org_4ba6821b521", "name": "Golden Finance" }, { "id": "org_b7226a3b5f0", "name": "UTM Bank" }, { "id": "org_16374a4fc3f", "name": "Trueblue Pty Ltd" } ] ``` You can now extract the `organizations` claim from ID tokens in the way you normally would. Typically the SDK you are using will have a method for this. For example, in React you could use: ```jsx const { getClaim } = useKindeAuth() getClaim('organizations', 'idToken').then((organizations) => { console.log('value:', organizations?.value) }) ``` ## Step 2: Build the switcher To build a simple list of orgs, use something like the following React example. You’ll need to include a call to the `login` method for each organization, passing in the id. In this example, we’ve also included a check to see if this is the current organization. ```jsx const { login, getClaim, getOrganization } = useKindeAuth() const [orgs, setOrgs] = useState<{ id: string; name: string }[]>([]) const [currentOrgCode, setCurrentOrgCode] = useState<string | null>(null) useEffect(() => { getClaim('organizations', 'idToken').then((organizations) => { setOrgs(organizations?.value ?? []) }) getOrganization().then((org) => { setCurrentOrgCode(org) }) }, [getClaim, getOrganization]) <ul> {orgs.map((item) => ( <li key={item.id}> <button onClick={() => login({ orgCode: item.id })} type='button'> {item.name} {currentOrgCode === item.id ? ' (Current)' : null} </button> </li> ))} </ul> ``` With some extra styling, a switcher might look something like this: <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/762446ab-6ce7-4e6f-746f-d2ca87efee00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" />

# Authenticate - Manage authentication - Set custom authentication per organization

> Guide to setting custom authentication methods per organization including shared connections and enterprise connections for B2B customers.

organization authentication, custom auth, shared connections, enterprise connections, B2B auth
authenticate

<Aside type="upgrade"> Depending what auth you set up in an organization, you may need to [upgrade your Kinde plan](https://kinde.com/pricing/), for example, for enterprise connections. Charges also apply for each organization that uses [advanced org features](/authenticate/custom-configurations/advanced-organization/). </Aside> You can set different authentication methods for each organization you manage in Kinde. You might want to do this if your customers are businesses that require unique auth setups. ## Environment-level and organization-level auth methods Most authentication methods need to be [set up at the environment level](/authenticate/authentication-methods/set-up-user-authentication/), including social sign in and core mthods such as passwordless, phone auth, etc. These are known as 'Shared connections'. You might also have [organization-level enterprise connections](/authenticate/enterprise-connections/enterprise-connections-b2b/), which are unique to an organization. The way each of these connection types is managed, is very similar. ## Set authentication methods for an organization This procedure covers adding shared connections, but you can also [add enterprise connections directly to an organization](/authenticate/enterprise-connections/about-enterprise-connections/). <Aside type="warning"> When you set authentication for an organization, it completely overrides the auth pattern set at the environment level. Nothing is inherited, except which methods are available to select for the organization. </Aside> 1. In Kinde, view details of the organization. 2. Select **Authentication** in the menu. 3. Activate the advanced features for this org, if you haven’t already. 4. Select **Add connection**. The **Add connection** window opens. 5. Select **Existing connection**, then select **Next**. A list of all existing connections appears. 6. Use the switches to enable and disable authentication methods for the organization. 7. When you’ve finished making changes, select **Save**. ## Disable authentication method for an organization If you remove an auth method for an organization, users can use any remaining methods to authenticate. If you remove all authentication methods, the organization will revert back to using the default auth set up from the environment level. <Aside type="warning"> Removing an authentication method could cause breaking changes for users of the connection. Make sure users have an alternative method of sign in. </Aside> 1. In Kinde, view details of the organization. 2. Select **Authentication** in the menu. 3. Select the three dots menu on the connection you want to remove, and select **Disable connection**. 4. A confirmation window opens. 5. Confirm that you want to disable the connection. For shared connections, the connection can be easily added back. For org-level enterprise connection, the connection can be re-enabled.

# Authenticate - Manage authentication - Session management per organization

> Guide to managing Kinde authenticated sessions at the organization level including session persistence and inactivity timeouts for enterprise customers.

organization session management, SSO session, session cookies, inactivity timeout, enterprise auth
authenticate

<Aside type="upgrade"> You may need to upgrade your plan to use this feature </Aside> If you are on the Kinde Scale plan, you can change Kinde authenticated session configuration at the organization level as well as the environment level. An authenticated session (or SSO session) is the time during which a user is authenticated via Kinde, regardless of their activity. You can define if a session persists even after a browser is closed, and how long can lapse before making the organization's user re-authenticate. These settings only apply to Kinde sessions and not sessions you maintain through your own application. ## Limitations of Kinde session configuration - Session cookies are not destroyed when a tab is closed, the full browser window must be closed. - Modern browsers usually allow session restoration. Restoring a browser session can also restore a session cookie. ## Manage SSO session behaviors and policies per organization When you change session settings at the organization level, this overrides session settings at the environment level. 1. In Kinde, go to **Organizations** and open the organization whose session settings you want to configure. 2. Select **Sessions** in the side menu. 3. In the **SSO sessions** section, decide on the policy for session cookies. A persistent session leaves the cookie active when the browser is closed. A non-persistent session is terminated when the browser window closes (unless the limitations listed above apply). 4. In the **Session inactivity timeout** section, set how long a session can be inactive before prompting re-authentication. This setting is applied in seconds - where 3,600 seconds is one hour; 86,400 seconds is one day. 5. When you're finished, select **Save**. The session settings will now be applied to members of this organization. ## Manage organization session behavior via API Use this endpoint to update session settings [via API](https://docs.kinde.com/kinde-apis/management/#tag/organizations/patch/api/v1/organizations/{org_code}/sessions/). `PATCH /api/v1/organizations/{org_code}/sessions`

# Authenticate - Manage authentication - Session management

> Guide to managing Kinde authenticated sessions including session persistence, inactivity timeouts, and browser session behavior.

session management, SSO session, session cookies, inactivity timeout, browser session
authenticate

You can manage Kinde authenticated sessions via your application settings. An authenticated session (or SSO session) is the time during which a user is authenticated via Kinde, regardless of their activity. You can define if a session persists even after a browser is closed, and how long can lapse before making a user re-authenticate. These settings only apply to Kinde sessions and not sessions you maintain through your own application. If you want, you can [change session settings for an organization](/authenticate/manage-authentication/session-management-per-organization/), without affecting other organizations. ## Limitations - Session cookies are not destroyed when a tab is closed, the full browser window must be closed. - Modern browsers usually allow session restoration. Restoring a browser session can also restore a session cookie. ## Manage SSO session behaviors and policies 1. Go to **Settings > Environment > Applications.** 2. Select **View details** on the application tile. 3. Select **Sessions** in the side menu. 4. In the **SSO sessions** section, decide on the policy for session cookies. A persistent session leaves the cookie active when the browser is closed. A non-persistent session is terminated when the browser window closes (unless the limitations listed above apply). 5. In the **Session inactivity timeout** section, set how long a session can be inactive before prompting re-authentication. This setting is applied in seconds - where 3,600 seconds is one hour; 86,400 seconds is one day. 6. When you're finished, select **Save**.

# Authenticate - Manage authentication - Sign users in to last organization

> Guide to automatically signing users into their most recent organization instead of showing an organization switcher for improved UX.

last organization, organization switcher, B2B, user experience, automatic sign-in
authenticate

A common pattern in B2B products is for users who belong to multiple organizations, to be able to [switch between them](/authenticate/manage-authentication/navigate-between-organizations/). However, if you have a switcher in your application, you may want users to be signed in to the most recent organization instead. If you switch this function on, users will not be shown an organization switcher on the authentication screen, and instead will be signed in to the most recent organization. ## Sign users in to the last used organization 1. In Kinde, go to **Settings > Policies**. 2. In the **Sign in** section, select the **Sign users in to most recent org** option. 3. Select **Save**.

# Authenticate - Manage authentication - Keep your product in sync with Kinde

> Comprehensive guide to keeping your application in sync with Kinde using refresh tokens, API calls, and webhooks for real-time data consistency.

sync with Kinde, refresh tokens, API integration, webhooks, token claims, real-time sync
authenticate

Kinde’s main object delivery method is to include claims in ID and access tokens when a user authenticates. This is a very efficient delivery method because as soon as a user signs in, you have everything you need to give them access, including their permissions. A minor downside of relying on claims, is that tokens go stale and data can get out of sync, and users may not be able to see the updates you make until they are issued a new token. This is the classic ‘eventual consistency’ problem. If you make frequent updates to permissions, flags, or other objects, this is likely an issue for you and your users, and this topic will help. Here are some options. ## Sync using refresh tokens You can use [refresh tokens](/build/tokens/refresh-tokens/) to extend the longevity of an access token. A refresh token is a way to request a new access token, without disrupting a session. Most of our SDKs handle refreshing tokens for you automatically. ### Auto-updating of token claims For optimum performance our tokens are cached, so that when a new access token is issued it contains the same claims as the previous token. A token cache becomes invalid, however, when user information is updated in the UI or via API. This includes updates to profile information, organization membership, roles, permissions, properties, and user-level feature flags. So when you use a refresh token to renew the access token (and user info has been updated), the claims will also be updated. One way to minimize periods of inconsistency is to set a low value for the [access token lifetime](/build/tokens/configure-tokens/), to trigger a refresh token. ### Force-update of token claims There are events that do not trigger individual users tokens to be updated. These include: - Feature flag changes at an organization or environment level that are inherited by a user - Permissions added to a role that the user has For these type of changes you can force a token update using your backend to call the [Refresh User Claims](/kinde-apis/management#tag/users/post/api/v1/users/{user_id}/refresh_claims) endpoint of our Kinde management API. This invalidates the cache for a specific user and means the next time an access token is issued for that user the claims will reflect the current state in Kinde. ## Sync through the Kinde Management API You can use the Kinde management API to keep your product in sync with Kinde. Calls to the API are always real time, meaning you have a few sync options. ### Force a real-time update Even if you are using refresh tokens (above), there might be a few sensitive areas of your application where immediate consistency is vital, for example checking a permission for a payments flow. To deal with this, you could make a call to out to the permissions API when that flow is triggered. This gives you the additional security of real time data where it counts. ### Periodic polling Another option for syncing is to make an initial call to the API when your user logs in and store the claim information locally. Then, periodically poll the API to update your stored claim with a real-time response. This could be overkill for things that are not mission-critical, but might be useful for important areas like permissions. ### Refresh user claims endpoint As mentioned above, the [Refresh User Claims](/kinde-apis/management#tag/users/post/api/v1/users/{user_id}/refresh_claims) API endpoint can be used to invalidate the cache for a user, which will ensure they receive updated claims on the next token refresh. ## Webhooks Webhooks let you subscribe your own url endpoints to events, and receive updates as they occur. Events refer to activities that occur within your Kinde business, for example user creation, updates to users, etc. When an event occurs, such as `user.created`, Kinde sends all the event data to any subscribed endpoints. You can then trigger your own application code in response, or just maintain your own copy of the event data. Webhooks can be managed directly in the Kinde admin area, or by using the Kinde Management API Webhook endpoints. ### Webhook subscription events Call the `/api/v1/event_types` endpoint in the Kinde Management API to view the full list of available events and the schema for the data you receive. See the [webhooks documentation](/integrate/webhooks/about-webhooks/) for more information.

# Authenticate - Manage authentication - Authenticated sessions across multiple applications

> Guide to sharing authenticated sessions across multiple applications using SSO cookies, refresh tokens, and multi-domain authentication.

multi-application sessions, SSO cookies, refresh tokens, offline scopes, multi-domain auth
authenticate

Kinde supports shared authenticated sessions across applications. For example, in a scenario where you have multiple apps running on separate subdomains, and you want to share a session between apps without prompting the user to sign in again. ## Session cookies On the first sign in, Kinde creates an SSO cookie for the authenticated user. Until this cookie expires or you request that the user signs in again (using the [prompt parameter](/developer-tools/about/using-kinde-without-an-sdk/#prompt)), all your apps can initiate sign in requests without prompting. ## Offline scopes and refresh tokens If you include an `offline` scope in your request, you can maintain long-running sessions via refresh tokens. This works both in back-end apps and in web apps. Kinde supports short-lived refresh and refresh token rotation for increased security of browser-based and mobile apps. In this case, on page reload, the SDK will resume the session via the refresh token exchange. [About refresh tokens](/build/tokens/refresh-tokens/) See also [multi-domain authentication](/authenticate/about-auth/about-authentication/#multi-domain-authentication). ## Set up overview 1. Create two or more Kinde apps. 2. Enable the same authentication method for both apps. 3. In each app, create a link to the other app using the applicable `login` method. You might do this using an application switcher, for example. 4. Sign in to one app. 5. Select a link to sign in to the second app. You should be signed in to the second app without re-authentication. ## Example Say you are signed into your **Admin app** and want to switch to the **Employee app**. Here’s how it might look. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/6a56c72a-21ea-4bc7-6b6d-f79efd1bda00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> As long as an authenticated session exists, users should be able to move seamlessly between applications.

# Authenticate - Multi factor auth - About multi-factor authentication

> Comprehensive overview of multi-factor authentication (MFA) including available factors, user experience, recovery codes, and organization-level enforcement.

multi-factor authentication, MFA, authenticator app, SMS, email, recovery codes, security
authenticate

To increase security for your product, you can enable multi-factor authentication (MFA). This means that your users sign in using at least two authentication methods, for example, password _plus_ verification code. If you don't want to apply MFA settings for all users, you can set [MFA per organization](/authenticate/multi-factor-auth/mfa-per-org/) if you're on the Kinde Scale plan. ## **Available MFA factors** Kinde supports the following secondary factors for MFA. - **Email** - users are sent a one-time-password (OTP) via email - **SMS** - users receive a one-time-password (OTP) via SMS - **Authenticator app** - users receive a verification code via an authentication app. You might recommend a specific app or allow users to choose. We recommend against choosing a secondary factor that is the same as the primary auth method. For example, if the primary method is email/passwordless, then choose SMS or Authenticator app as the secondary factor. ## **The MFA experience for users** If you make MFA optional, users will be prompted to opt in to MFA when they next sign in. If mandatory or after they opt in, users will be prompted to use (or choose) a secondary authentication method, through which they will receive a verification code. They will also be offered a set of recovery codes (See below). We suggest you advise users ahead of time if you are changing your sign-in requirements, and if you require them to download an authenticator app such as Google Authenticator. ### MFA **using an authenticator app** - On first time use, the user can scan a QR code to enable the verification method and get a verification code sent to their app of choice. - On subsequent sign in, a verification code will appear in their authenticator app of choice, or they can use a recovery code to sign in. ### MFA **using email verification** - A code is sent to their email that they need to enter into the verification code field on the sign up / sign in screen. ### MFA **using SMS verification** - A code is sent via SMS that the user must enter into the verification code field on the sign up / sign in screen. ## **Recovery codes** When a user signs in for the first time, or signs up as a new user (and MFA is activated), they will be offered a set of recovery codes that they can store for future use. They can then use a recovery code if they don’t have access to their device or authenticator app. ## MFA can be enforced for individual organizations Customers on the Kinde Scale plan are able to set MFA at the organization level. This is especially useful for B2B businesses who have many organizations, with varying auth requirements. See [Set MFA for an organization](/authenticate/multi-factor-auth/mfa-per-org/).

# Authenticate - Multi factor auth - Enable multi-factor authentication

> Step-by-step guide to enabling multi-factor authentication including mandatory and optional settings for enhanced security.

enable MFA, multi-factor authentication, mandatory MFA, optional MFA, security setup
authenticate

Add security to the authentication process by enabling multi-factor authentication (MFA). MFA means users sign in using at least two authentication factors, for example, password _plus_ SMS code. You can make MFA mandatory for users, or optional. Kinde supports the following secondary factors. - **Email** - users are sent a one-time-password (OTP) via email. - **SMS** - users receive a one-time-password (OTP) via SMS. - **Authenticator app** - users receive a verification code via an authentication app. We recommend against enabling a secondary factor that is the same as the primary auth method. ## **Set up MFA** When you set up MFA using this procedure, it will apply to all users in the environment. If you want, you can [enforce MFA for individual organizations](/authenticate/multi-factor-auth/mfa-per-org/), so it only affects users in that organization. 1. In Kinde, go to **Settings > Environment >** **Multi-factor auth**. 2. To make MFA mandatory, in the **Require multi-factor authentication** section, select **Yes**. Users will be required to set up MFA when they first sign up or next sign in. 3. To make MFA optional, in the **Require multi-factor authentication** section, select **Optional**. Users will have the option to set up MFA when they first sign up or next sign in. 4. Select the additional authentication options that you want to be available to your users. Such as an authenticator app, email, or SMS. 5. Select **Save**. Users will now be directed to use multi-factor authentication when they sign in.

# Authenticate - Multi factor auth - Set multi-factor authentication for an organization

> Advanced guide to setting multi-factor authentication per organization including role exemptions and enterprise connection exemptions for B2B customers.

organization MFA, role exemptions, enterprise connections, B2B MFA, advanced org features
authenticate

<Aside type="upgrade"> This is an advanced org feature that is only available on the [Kinde Scale plan](https://kinde.com/pricing/). You can set multi-factor auth for 5 organizations and then charges apply for each organization that uses [advanced org features](/authenticate/custom-configurations/advanced-organization/). </Aside> As part of being able to set unique authentication methods for an organization, you can also set how multi-factor authentication (MFA) works per organization. You might want to use MFA for some of your orgs, such as for business customers that require their users to have MFA as part of sign in. This is common in finance and government sectors. As part of this feature, you can: - exempt certain roles within the organization from having to use MFA. For example, you may only want Admins to use MFA. - exempt MFA authentication for certain enterprise connection types, such as SAML authentication. You might want to do this if MFA is already set up with the enterprise auth provider. ## Configure environment-level MFA settings If you do not want every organization in your business to use MFA, you must switch off the environment-level requirement. In Kinde, go to **Settings > Environment > Multi-factor auth**. ![Screen shot of Require MFA switches](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/78708a19-58c6-4cdd-a1e7-0c34c88dfb00/public) - Select **No** - If you want MFA to be applied in only some organizations or for some connections in your business. You will then need to set MFA in each organization separately. - Select **Yes** or **Optional** - If you want everyone, in every organization to use MFA’. Note that if you select **Yes** here, MFA will apply in all organizations regardless of what you set at the organization level. Whatever you select here, you can still exempt roles from MFA per organization. ## Switch on MFA for an organization MFA methods selected here will replace those selected at the environment level. 1. In Kinde, go to **Organizations**. 2. Browse or search for the organization. 3. In the list, select the organization to open the **Details** page. 4. Select **Multi-factor auth** in the menu. 5. If applicable, activate the advanced organization feature. 6. Toggle the **Enforce multi-factor authentication for this organization** switch on. 7. Select the authentication **Methods**. You can choose more than one. 8. Select **Save**. ## Add and remove exempt roles from MFA You need to have roles set up in Kinde. 1. In the **Exempt roles** section of the MFA page for the organization. 2. Select **Add exempt role** and select a role from the list. 3. Press **Enter**. 4. Repeat step 2 to add more roles. 5. You can remove an exempt role by selecting the three dots menu and selecting **Remove**. 6. Select **Save**. If a user has a mix of exempt and non-exempt roles, MFA will apply as default. ## Add and remove exempt enterprise connections from MFA You need to have enterprise connections set up in Kinde. 1. In the **Exempt enterprise connections** section of the MFA page for the organization. 2. Select **Add exempt enterprise connection** and select a connection from the list. 3. Press Enter. 4. Repeat step 2 to add more connections. 5. You can remove an exempt connection by selecting the three dots menu and selecting **Remove**. 6. Select **Save**. If a user signs in via Okta (exempt) and has an Admin role (not exempt), they will not be prompted for MFA. ## Switch off MFA for an organization This procedure only works if you have also switched off the environment-level setting for MFA. <Aside type="warning"> If users are already authenticating via MFA in the organization, switching it off may cause breaking changes. </Aside> 1. In Kinde, go to **Organizations** and browse or search for the organization. 2. In the list, select the organization to open the **Details** page. 3. Select **Multi-factor auth** in the menu. 4. Toggle the **Enforce multi-factor authentication for this organization** switch off. 5. Select **Save**.

# Authenticate - Social sign in - Add and manage social connections

> Comprehensive guide to adding and managing social sign-in connections including setup, security considerations, and provider-specific configurations.

social sign-in, social connections, OAuth, client ID, client secret, trusted providers
authenticate

Social connections enable you to sign up and sign in users with credentials from their existing social accounts, such as Google or GitHub. An advantage of social sign in is that users don't have to create new credentials to use your app or service, making it more convenient and secure for them. If they have a gravatar picture associated with their social account, it will flow through to Kinde. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## Set up a social connection Follow the docs below for each social provider you want to use. This will give you the `Client ID` and `Client secret` (keys) you need to set up each auth method on the Kinde side. - [Apple](/authenticate/social-sign-in/apple/) - [Bitbucket](/authenticate/social-sign-in/bitbucket-sso/) - [Discord](/authenticate/social-sign-in/discord/) - [Facebook](/authenticate/social-sign-in/facebook/) - [GitHub](/authenticate/social-sign-in/github/) - [GitLab](/authenticate/social-sign-in/gitlab/) - [Google](/authenticate/social-sign-in/google/) - [LinkedIn](/authenticate/social-sign-in/linkedin/) - [Microsoft](/authenticate/social-sign-in/microsoft-sso/) - [Roblox](/authenticate/social-sign-in/roblox-sso/) - [Slack](/authenticate/social-sign-in/slack/) - [Twitch](/authenticate/social-sign-in/twitch/) - [Twitter](/authenticate/social-sign-in/twitter/) - [Xero](/authenticate/social-sign-in/xero-sso/) ### When an email is not provided Some social providers don't require an email for sign up, e.g. X. When a user signs up or in with one of these providers, Kinde will ask for an email (just once). This is so we can verify the user's identity and be sure it's a genuine sign up. We treat social identities different to email identities in Kinde, and record social providers as a social identity in their user profile. For more information, see [User identity and verification](/authenticate/about-auth/identity-and-verification/). ## Trusting emails from social providers There's no guarantee that the email kept on file with a social provider remains current. Because of this, Kinde does not automatically treat social provider emails as 'trusted', and therefore we do not automatically sync email profiles. When you add a social connection, you can choose whether to 'trust' provider emails for each connection type. For more information, see [User identity and verification](/authenticate/about-auth/identity-and-verification/#trusting-emails-from-providers). ## Delete a social connection <Aside type="danger"> Before you delete a connection, make sure that there are no users relying on it for authentication. Once deleted, the sign in option becomes unavailable to users. This action can’t be reversed. </Aside> 1. In Kinde, go to **Settings > Environment > Authentication**. 2. Scroll down to the **Social connections** section and select the three dots on the tile for the connection, then select **Delete connection**. 3. In the confirmation window, select **Delete connection**. ## Manage social connections via API You can [add, update, and delete social connections via the Kinde management API](/kinde-apis/management#tag/connections) using predefined endpoints.

# Authenticate - Social sign in - Apple social sign in

> Complete guide to setting up Apple social sign-in including Apple Developer account setup, Services ID configuration, and JWT client secret generation.

Apple sign-in, Apple Developer, Services ID, JWT, client secret, private key, token renewal
authenticate

You can enable users to sign up and sign in using their Apple credentials. <Aside type="warning" title="For Apple auth in production"> You MUST set up an Apple app and use the provided Client ID and Client secret in the Kinde Apple connection. Do not use Kinde's credentials (leave the Client ID and Client secret blank) for third party SSO apps in your production environment. This adds a security and performance risk for your business, and makes it difficult to change auth providers without service disruptions for your users. </Aside> It's also important to note that Apple limits the information it passes when users sign up this way. Avatars and profile pictures do not flow through to the auth experience in Kinde. The user's email may also be excluded, depending how they have their Apple ID set up. ## **What you need** - An [Apple Developer account](https://developer.apple.com/) including a subscription to the Apple developer program - Your Kinde callback URL (see below) - Some developer know-how ## **Copy the callback URL from Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. If you have not yet added the Apple connection, select **Add connection**, select **Apple**, then **Next**. 3. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the **Custom domain** URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the provider app. 4. Select **Save**. 5. Use the copied Callback URLs to set up the app, see below. ## **Configure sign in for your app** <Aside> The following procedures refer to several types of IDs including App ID and Services ID. Take care to follow the steps exactly, to avoid errors. </Aside> ### **Set up your app** 1. In your Apple developer account, go to **Identifiers**. 2. Select the plus (+) icon next to **Identifiers**. 3. Select **App IDs**, then select **Continue**. 4. Select **App**, then select **Continue.** 5. Enter a description and Bundle ID. 6. In the **Capabilites** list, select **Sign in with Apple**. 7. Select **Register**. ### **Register** **services** 1. Select the plus icon (+) next to **Identifiers**. 2. Select **Services ID**, then select **Continue.** 3. Enter a description and identifier (make a note of this because it will be used as the Client ID). 4. Select **Register.** ### **Configure domains** 1. Click on the newly created service to edit. 2. Check the box to enable **Sign In with Apple** and click **Configure.** 3. In the **Domains and Subdomains** field, enter your Kinde URL, e.g. `yourdomain.kinde.com` (excluding the https:// protocol) 4. In the **Return URLs** field, enter your Kinde callback URL or custom domain callback URL, e.g. `https://yourdomain.kinde.com/login/callback`. 5. Add additional entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 6. Select **Next**, then select **Done.** 7. In the **Edit your Services ID Configuration** window, select **Continue**, then select **Save.** ### **Set up keys** 1. Select **Keys** in the left hand menu and click the plus icon (+) next to the page title. 2. Enter a **Key Name**. 3. Select **Sign In with Apple** and next to this option, select **Configure**. 4. Select your app from the Primary App ID field, then select **Save.** 5. Select **Continue** then select **Register.** 6. Download your key as per the screen instructions. You will need this to generate the client secret. 7. When you have downloaded the key, select **Done**. ### **Generate the client secret** There are several ways to generate the client secret. An example is provided below. _**Example using Ruby**_ You can use open source libraries for creating and signing JWT tokens for your client secret (see [JWT.io](https://jwt.io/)). The below steps provide an example of accomplishing this using Ruby. 1. Install jwt using the following command: `gem install jwt`. 2. Create a file titled `client_secret.rb` and replace the empty values in your script as follows: - `key_file` is the p8 file containing your private key that you downloaded. - `team_id` can be found in the top right of your apple developer account under your name. - `client_id` is the identifier used for the service. - `key_id` was provided on the key creation screen. ```ruby require 'jwt' key_file = 'key.txt' team_id = '' client_id = '' key_id = '' ecdsa_key = OpenSSL::PKey::EC.new IO.read key_file headers = { 'kid' => key_id } claims = { 'iss' => team_id, 'iat' => Time.now.to_i, # Note that this is the maximum exp value of 6 months 'exp' => Time.now.to_i + 86400*180, 'aud' => 'https://appleid.apple.com', 'sub' => client_id, } token = JWT.encode claims, ecdsa_key, 'ES256', headers puts token ``` 3. Run the script with ruby `client_secret.rb` and copy the generated `client_secret`. 4. Add these credentials into Kinde. ## **Add credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the Apple tile, select **Configure**. 3. Paste the **Client ID** (Service ID) and **Client secret** (Private key) into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which apps will use Apple sign in. 7. Select **Save**. Users will now see Apple as an option to sign up and sign in to your product. ## **Renew Apple token periodically** To continue to enable users to sign in with Apple, you will need to periodically renew the Apple token by generating a new client secret. Usually every six months. To do this, repeat the procedures from **Set up keys** to **Add credentials to Kinde**, above. ## **Third party references for this article** We do our best to test all our procedures, but sometimes third party companies change things without us knowing. Here’s the sources we used to create this article. - [Validating “Sign in with Apple” Authorization Code](https://p.agnihotry.com/post/validating_sign_in_with_apple_authorization_code/) - [Configuring your environment for Sign in with Apple](https://developer.apple.com/documentation/sign_in_with_apple/configuring_your_environment_for_sign_in_with_apple) - [Sign in with Apple REST API](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api) - [Apple Developer Center](https://developer.apple.com/)

# Authenticate - Social sign in - Bitbucket social sign in

> Step-by-step guide to setting up Bitbucket social sign-in including Bitbucket app creation, OAuth configuration, and Kinde integration.

Bitbucket sign-in, Bitbucket app, OAuth, client ID, client secret, callback URL, permissions
authenticate

You can enable users to sign up and sign in using their Bitbucket credentials. To enable this, follow all the steps below to create a Bitbucket app and configure credentials in Kinde. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get your Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social connections** section, select **Add connection.** 3. In the window that appears, select **Bitbucket,** then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the Use custom domain instead switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Bitbucket app. 5. Select **Save**. 6. Use the copied Callback URL to set up the app, see below. ## **Create and configure a Bitbucket app** 1. Create an account on [https://bitbucket.org/](https://bitbucket.org/). 2. Go to **Workspaces** if you are not automatically directed. 3. Create a workspace. 4. Enter a **Name** and **ID**. 5. Open **Settings** > **Apps and features** > **oauth consumers.** 6. Add a consumer. 7. Enter a name and add the callback URLs copied from your Kinde app. Add entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 8. Under **Permissions**, in the **Account** section, select **email** and **read.** 9. Select **Save**. 10. Go back to **Apps and features** > **oauth consumers.** 11. Select the workspace you’ve just created and copy the key (client id) and secret (client secret) to paste into the kinde app. ## **Add Bitbucket app credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the **Bitbucket** tile, select **Configure**. 3. Paste the **Client ID** (key) and **Client secret** (secret) into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Bitbucket social sign in. 7. Select **Save**. Users will now see Bitbucket as an option to sign up and sign in to the selected applications.

# Authenticate - Social sign in - Discord social sign in

> Step-by-step guide to setting up Discord social sign-in including Discord app creation, OAuth configuration, and Kinde integration.

Discord sign-in, Discord app, OAuth, client ID, client secret, callback URL
authenticate

You can enable users to sign up and sign in using their Discord credentials. To enable this, you’ll need a Discord app and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get your Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social connections** section, select **Add connection.** 3. In the window that appears, select **Discord,** then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the Use custom domain instead switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Discord app. 5. Select **Save**. 6. Use the copied Callback URL to set up the app, see below. ## Create and configure a Discord app 1. Log in to the [Discord developer site](https://discord.com/developers/applications/) and create a new app. 2. Give it a name and then go to **OAuth2** in the side menu. 3. In **OAuth2 > General**, copy the **Client ID** and **Client secret** somewhere you can access it later. If the client secret is not showing, select **Reset Secret**. 4. Paste in the **Callback URLs** (the ones you copied above), e.g. `https://yourdomain.kinde.com/login/callback`. Add entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 5. Save your changes. ## **Add Discord credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the **Discord** tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** from the Discord app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Discord social sign in. 7. Select **Save**. Users will now see Discord as an option to sign up and sign in to the selected applications.

# Authenticate - Social sign in - Facebook social sign in

> Comprehensive guide to setting up Facebook social sign-in including Meta app creation, OAuth configuration, and Kinde integration.

Facebook sign-in, Meta app, OAuth, client ID, client secret, callback URL, Facebook Login for Business
authenticate

You can enable users to sign up and sign in using their Facebook credentials. To enable this, you’ll need a Facebook app and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Copy the callback URL from Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. If you have not yet added the Facebook social connection, select **Add connection** in the **Social authentication** section. 3. Select **Facebook**, then **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Meta app. 5. Select **Save**. 6. Use the copied Callback URLs to set up the app, see below. <Aside> If you use Facebook Login for Business, some of the app creation and configuration steps might be different than those outlined below. See [Meta's documentation](https://developers.facebook.com/docs/facebook-login/facebook-login-for-business/) for detailed guidance. </Aside> ## **Create a Meta app** The following steps were correct when we published this, but third-party providers sometimes change things. [Here’s the Meta Developer docs](https://developers.facebook.com/docs/facebook-login/) in case you get stuck. 1. Go to the [Facebook/Meta developer space](https://developers.facebook.com/) and select **My apps**, then **Create app**. 2. On the **Business portfolio** page, select **Next**. 3. On the **Use cases** page, select **Authenticate and request data from users with Facebook Login** option and then select **Next.** 4. Follow the prompts and enter the app details, then select **Create app**. 5. In the confirmation window that appears, select **View dashboard**. 6. Under **App settings**, select **Basic** and copy the client ID and client Secret (labeled as **App ID** and **App Secret**) and paste them in a text file or somewhere you can easily copy them. ## **Configure the Meta app** The following steps were correct when we published this, but third party providers sometimes changes things. [Here’s the Meta Developer docs](https://developers.facebook.com/docs/facebook-login/) in case you get stuck. 1. In your Meta app dashboard, select **Use cases** then select **Configure** on the **Authentication and account creation** tile. 2. On the **Permissions** tab, make sure `email` and `public_profile` are selected. 3. On the **Settings** tab, add your callback URL in the **Redirect URI** field. E.g. `https://domain.kinde.com/login/callback` 4. Select **Save changes** at the bottom of the screen. 5. Go back to the Dashboard page (home icon). 6. In **App settings**, select **Basic**. 1. Paste your Kinde domain URL in the **App domains** field, but **do not** include the https/http or path. For example, paste `yourdomain.kinde.com`. 2. Add other details such as app icon, category, terms of service and privacy policy link. 3. Select **Save changes**. 7. Go to **Settings** > **Advanced.** 8. Under **Domain manager**, select **Add a domain** to add your Kinde domain. 1. When you add the domain here (include the https/http part of the URL). 2. Under the **Security** section, ensure the **Require app secret** switch is turned off. 3. Add any other relevant information. 4. Select **Save changes**. 9. Next, you'll need to complete the preparation tasks and submit your app for approval. Note that this requires providing business documentation, contacts, etc. See the **Review** area for more information. 10. Once the approval process is complete, you can publish the app. See the [Meta/Facebook docs](https://developers.facebook.com/docs/development/create-an-app/) for more information about apps. ## **Create a product in your Meta app** The following steps were correct when we published this, but third party providers sometimes changes things. [Here’s the Meta Developer docs](https://developers.facebook.com/docs/facebook-login/) in case you get stuck. 1. In your app dashboard, select **Add product**. 2. Select the **Opt in Facebook Login for Business** prompt**.** 3. When prompted, select **Switch to Facebook Login for business**. 4. In the confirmation window, select **Certain permissions aren’t available with this product** as the reason. 5. In the **Select the permissions you require** field that appears, select **email** and **public_profile**. 6. Select **Switch to Facebook Login**. 7. Enter the Kinde callback URLs in the **Valid OAuth Redirect URLs field**. Add entries for all your organization custom domain callbacks, e.g. account.customdomainone.com/login/callback, account.customdomaintwo.com/login/callback, etc. 8. Select **Save Changes**. 9. In the red warning message at the top of the page, select **Get Advanced Access**. The **Permissions and Features** page opens. 10. Next to the **email** entry: 1. Select **Request advanced access**. 2. In the confirmation window, select the checkbox and enter your facebook password. 3. Select **Submit**. 11. Next to the **public_profile** entry: 1. Select **Request advanced access**. 2. In the confirmation window, select the checkbox and enter your Facebook password. 3. Select **Submit**. ## **Add Facebook credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the **Facebook** tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** from the Facebook app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Facebook SSO. 7. Select **Save**. Users will now see Facebook as an option to sign up and sign in to the selected applications. ### When an email is not provided Facebook does not require an email for sign up, but Kinde does. So if a user signs up with Facebook and an email is not detected, we will ask for one. The user only needs to provide their email once, then they can sign in via Facebook without disruption. If the email they provide is already detected in Kinde, we will automatically link the accounts so as not to duplicate.

# Authenticate - Social sign in - GitHub social sign in

> Step-by-step guide to setting up GitHub social sign-in including GitHub app creation, OAuth configuration, and Kinde integration.

GitHub sign-in, GitHub app, OAuth, client ID, client secret, callback URL, webhooks
authenticate

You can enable users to sign up and sign in using their GitHub credentials. To enable this, you’ll need some technical know-how and a [GitHub app](https://docs.github.com/en/apps/creating-github-apps/about-creating-github-apps/about-creating-github-apps) and credentials. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get the Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social Connections** section, select **Add connection**. 3. In the window that appears, select **GitHub**, then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the provider app. 5. Select **Save**. 6. Use the copied Callback URL to set up the app, see below. ## **Create GitHub app** 1. Sign in to your GitHub account, select the **Account** dropdown menu at the top right corner, and choose **Settings**. 2. From the menu on the left, select **Developer settings**. ([https://github.com/settings/apps](https://github.com/settings/apps)) 3. Select **GitHub Apps** and then select **New GitHub app**. 4. Give the app a name. 5. Enter your app’s **Homepage URL**. 6. Enter or paste the Kinde callback URLs you copied earlier, into the **Authorization callback URL** field. Add entries for all your organization custom domain callbacks, e.g. account.customdomainone.com/login/callback, account.customdomaintwo.com/login/callback, etc. 7. Select the **Request user authorization (OAuth) during installation** option**.** 8. In the **Webhooks** section, deselect the Webhook **Active** option (unless you want to add webhook URL details). 9. (Recommended) In the **Permissions** section, open the **Account permissions** options and change the **Email addresses** access to **Read only**. This enables Kinde to more easily match up user accounts with access to all the users' email addresses. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/91a0d647-35d8-450b-26d2-21b5c8dca400/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 10. Select **Create GitHub App**. The app is created. ## Copy Client ID and Client secret 1. On the App you just created, select **Edit**. 2. Copy the **Client ID.** 3. Select **Generate a new client secret**. 4. Copy these values to a text file or other temporary and secure place for adding to Kinde. ## **Add GitHub credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the GitHub tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will use GitHub sign in. 7. Select **Save**. Users will now see GitHub as an option to sign up and sign in to your product.

# Authenticate - Social sign in - GitLab social sign in

> Step-by-step guide to setting up GitLab social sign-in including GitLab app creation, OAuth configuration, and Kinde integration.

GitLab sign-in, GitLab app, OAuth, client ID, client secret, callback URL, scopes
authenticate

You can enable users to sign up and sign in using their GitLab credentials. To enable this, you’ll need some technical know-how and a GitLab app and credentials. Here’s some [GitLab docs](https://docs.gitlab.com/ee/integration/oauth_provider.html) that might help. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get the Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social Connections** section, select **Add connection**. 3. In the window that appears, select **GitLab**, then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the GitLab app. 5. Select **Save**. 6. Use the copied Callback URL to set up the app, see below. ## **Create GitLab app** 1. Sign in to your GitLab account and follow [these instructions](https://docs.gitlab.com/ee/integration/oauth_provider.html) for adding a group-owned or user-owned application. 2. Ensure these scopes are enabled in your application: `read_user`, `openid`, `profile`, `email`. 3. Paste the Kinde callback URL in the **Redirect URI** field. Add additional entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 4. Select **Save**. 5. Copy the **Application ID** and **Secret**, and paste them where you can access them later. ## **Add GitLab credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the GitLab tile, select **Configure**. 3. Paste the **Client ID** (**Application ID**) and **Client secret** (**Secret**) into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will have a GitLab sign in option. 7. Select **Save**. Users will now see GitLab as an option to sign up and sign in to your product.

# Authenticate - Social sign in - Google social sign in

> Step-by-step guide to setting up Google social sign-in including Google Cloud project setup, OAuth credentials, and Kinde integration.

Google sign-in, OAuth, Google Cloud, client ID, client secret, callback URL, webview limitations
authenticate

You can enable users to sign up and sign in using their Google credentials. To set this up, you need a Google cloud account and project, and a little technical know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> Note that Google has provided a topic about [Google’s Create authorization credentials](https://developers.google.com/identity/sign-in/web/sign-in#create_authorization_credentials), but the steps don’t quite work. Until they update their docs, we recommend you use ours. <Aside title="Google does not allow sign in auth to work in webview"> Before connecting Google as a sign in option, be aware that Google does not support auth in webview. This means if a user opens a sign in window to your app in a webview (say via Instagram or from Facebook) they will receive an error. </Aside> ## **Before you begin** 1. Create a [Google Cloud](https://cloud.google.com/) account. 2. Create a [Google Project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#console). 3. Get Google credentials (see below). ### **Get the Kinde Callback URL** 1. Sign in to Kinde. 2. Go to the **Settings** page and select **Authentication**. 3. In the **Social connections** section, select **Add connection.** 4. In the window that opens, select **Google**, then select **Next**. 5. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the Kinde domain URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Google app. 6. Select **Save**. 7. Use the copied Callback URL to set up the app, see below. ## **Get Google credentials** 1. Navigate to the [Google Cloud](https://cloud.google.com/) home page. 2. Click **Console** in the top menu bar. 3. In the left menu, select **APIs & Services.** 4. If you are prompted to, create a new project. 5. Select **OAuth consent** **screen.** 6. Select if your project is **Internal** or **External,** then select **Create**. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/412af691-19cd-45b2-3af7-f5db15677a00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 7. Complete all the app details (noting that you may need to go through the verification process if you upload a logo). 8. Select **Save** **and Continue**. 9. In the **Scopes** step, select **Add or remove scopes.** 10. In the screen that appears, add the following non-sensitive scopes: `./auth/userinfo.email` and `./auth/userinfo.profile` then select **Update**. 11. Select **Save and continue.** 12. Add test users if you want, then select **Save and continue**. 13. Back in the main menu, select **Credentials**. 14. Click **Create Credentials** at the top of the page and select **OAuth client ID**. 15. In the **Web application** dropdown menu, choose **Web Application**. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/3518f0a9-6232-41b8-2e37-0293fed41200/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 16. Name your OAuth 2.0 client. 17. Add your **Authorized redirect URIs**. These are the Callback URLs you copied in the previous procedure. Add entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 18. Click **Create**. 19. Copy your **Client ID** and **Client Secret** from the confirmation window. ## **Add Google credentials to Kinde** 1. In Kinde, go to **Settings** and select **Authentication**. 2. On the Google tile, select the **Configure** link. 3. Paste your **Client ID** and **Client Secret** into the two fields. 4. Select if you want to treat this connection as a trusted provider (this is on by default for Google). A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. For example, you can pass a param that forces the Google account selector to display. 6. Select which applications to switch this on for. 7. Select **Save**. Your users will now be able to sign in using their Google credentials.

# Authenticate - Social sign in - LinkedIn social sign in

> Step-by-step guide to setting up LinkedIn social sign-in including LinkedIn app creation, OpenID Connect configuration, and Kinde integration.

LinkedIn sign-in, OpenID Connect, OAuth, client ID, client secret, callback URL, LinkedIn developer
authenticate

You can enable users to sign up and sign in using their LinkedIn credentials. To enable this, you’ll need a LinkedIn app and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get the Kinde Callback URL** 1. Sign in to Kinde. 2. Go to the **Settings** page and select **Authentication**. 3. In the **Social connections** section, select **Add connection.** 4. In the window that opens, select **LinkedIn**, then select **Next**. 5. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the Use custom domain instead switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the LinkedIn app. 6. Select **Save**. 7. Use the copied Callback URLs to set up the app, see below. ## **Create a LinkedIn app and set up** 1. Go to the [LinkedIn developer space](https://developer.linkedin.com/) and select **Create app**. 2. Complete the details, including name, logo, company LinkedIn page, privacy policy link, etc. 3. Select **Create app**. 4. In the **Products** tab, select **Request access** on the **Sign in with LinkedIn using OpenID Connect** tile. 5. In the dialog that opens, agree to the terms and conditions to continue. You can now view the endpoints. ## **Configure your LinkedIn app** 1. Go to the **Auth** tab. 2. In the **Auth 2.0 settings** area, select the edit icon next to the **Authorized redirect URLs for your app.** 3. Paste the **Callback URLs** you copied from Kinde in the first procedure. Add entries for all your organization custom domain callbacks, e.g. account.customdomainone.com/login/callback, account.customdomaintwo.com/login/callback, etc. 4. In the same tab, copy the **Client ID** and **Client Secret** and paste them in a text file or somewhere you can easily copy them. For additional help, see the [LinkedIn docs](https://learn.microsoft.com/en-gb/linkedin/consumer/integrations/self-serve/sign-in-with-linkedin). ## **Add LinkedIn credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the **LinkedIn** tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** from the LinkedIn app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow LinkedIn SSO. 7. Select **Save**. Users will now see LinkedIn as an option to sign up and sign in to the selected applications.

# Authenticate - Social sign in - Microsoft social sign in

> Step-by-step guide to setting up Microsoft social sign-in including Azure app registration, OAuth configuration, and Kinde integration.

Microsoft sign-in, Azure, Entra ID, app registration, OAuth, client ID, client secret, home realm
authenticate

You can enable users to sign up and sign in using their Microsoft credentials. To enable this, you’ll need a Microsoft Azure account and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get the Kinde Callback URL** 1. Sign in to Kinde. 2. Go to the **Settings** page and select **Authentication**. 3. In the **Social connections** section, select **Add connection.** 4. In the window that opens, select **Microsoft**, then select **Next**. 5. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Microsoft app. 6. Select **Save**. 7. Use the copied Callback URL to set up the app, see below. ## Register a Microsoft app and set up 1. Go to your account at [https://portal.azure.com/](https://portal.azure.com/). 2. Navigate to **Entra ID**. You can do this from links on the main screen or in the left side menu. 3. Select **Add+ > App registration** or go to **Manage > App registrations > New registration**. 4. Enter a name for the app. 5. Select a **Supported account types option**. In testing, we selected **Accounts in any organizational directory and personal Microsoft accounts**. 6. In the **Redirect URI (optional)** section, select **Web** in the **Select a platform** dropdown. 7. Enter the **Callback URL** from Kinde. The ones you copied in the procedure above. Add additional entries for all your organization custom domain callbacks, e.g. account.customdomainone.com/login/callback, account.customdomaintwo.com/login/callback, etc. 8. Select **Register**. Details of your new app appear. 9. Copy the **Application (client) ID** and paste it in a text file or somewhere you can easily access it again. 10. Select **Certificates and secrets** from the left menu, select + **New client secret.** 11. Enter a name and give it an expiry date (or accept the default), then select **Add**. Details of the secret are generated. 12. Copy the value in the **Value** column and paste it in a text file or somewhere you can easily access it again. Make sure you copy from the **Value** column, not the **Secret ID** column. ## Add Microsoft app credentials to Kinde 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social connections** section, on the **Microsoft** tile, select **Configure**. 3. Paste the **Client ID** (Application (client) ID) and **Client secret value** (that you copied from the **Value** column at step 12 above) into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. When a user signs in with an email that matches an existing home realm domain (i.e. part of an enterprise connection), you can allow them to sign in using their existing credentials, rather than creating a new identity in Kinde. To make this happen automatically, select the **Auto redirect home realm users** option. 6. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 7. Select which applications will allow Microsoft social SSO. 8. Select **Save**. Users will now see Microsoft as an option to sign up and sign in to the selected applications.

# Authenticate - Social sign in - Roblox social sign in

> Step-by-step guide to setting up Roblox social sign-in including Roblox app creation, OAuth configuration, and Kinde integration.

Roblox sign-in, Roblox app, OAuth, client ID, client secret, callback URL
authenticate

You can enable users to sign up and sign in using their Roblox credentials. To enable this, you’ll need some technical know-how and a Roblox app. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## Get your Kinde callback URL 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social connections** section, select **Add connection.** 3. In the window that appears, select **Roblox,** then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the **Custom domain** URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Roblox app. 5. Select **Save**. 6. Use the copied Callback URLs to set up the app, see below. ## Create and configure a Roblox app 1. Sign up for a [Roblox](https://www.roblox.com/) account. 2. Follow [these instructions](https://create.roblox.com/docs/cloud/open-cloud/oauth2-registration/) to create an OAuth 2.0 app in Roblox. 3. Make sure you enable the `open id` and `profile` scopes. 4. Copy the app **Client ID** and **Secret**. You need these to set up Roblox in Kinde. ## Add Roblox credentials to Kinde You don’t need to wait for app approval to finish configuring Roblox in Kinde. 1. In Kinde, go to **Settings** > **Authentication**. 2. On the **Roblox** tile, select **Configure**. 3. Paste the **Client ID** and **Secret** from the Roblox app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they provide is verified. We recommend leaving this off for maximum security. Depending on your selection, here’s the behaviour in Kinde: - trusted off + existing email - creates new user, only updates people_profiles - trusted off + new email - creates new email identity (adds to people_identities) - trusted on + existing email - merges accounts w/existing user - trusted on + new email - creates new email identity (adds to people_identities) 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Roblox social sign in. 7. Select **Save**. Users will now see Roblox as an option to sign up and sign in to the selected applications.

# Authenticate - Social sign in - Slack social sign in

> Step-by-step guide to setting up Slack social sign-in including Slack app creation, OAuth configuration, and Kinde integration.

Slack sign-in, Slack app, OAuth, client ID, client secret, callback URL, scopes
authenticate

You can enable users to sign up and sign in using their Slack credentials. To enable this, you’ll need some technical know-how and a Slack app. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Copy the callback URL from Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. If you have not yet added the Slack social connection, select **Add connection** in the **Social authentication** section. 3. Select Slack, then **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the Use custom domain instead switch. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Slack app. 5. Select **Save**. 6. Use the copied Callback URL to set up the app, see below. ## **Create a Slack app** 1. Go to [Slack API Applications](https://api.slack.com/apps) and log in to your workspace. 2. Select **Create an App**. The **Create an app** window opens. 3. Choose how you’d like to configure your app’s scopes and settings. 4. If you are not sure, choose the **From scratch** option. 5. Enter your **App Name** and **Select a workspace**. 6. Click **Create App**. Your app is created. 7. Scroll to the **App Credentials** section and copy the **Client ID** and **Client Secret** and paste them in a text file or somewhere you can easily copy them. ### **Configure your Slack app** 1. In your Slack app, go to the **OAuth & Permissions** section. 2. Scroll to the **Redirect URLs** area and add the callback URLs you got from Kinde, then select **Save URLs**. Add additional entries for all your organization custom domain callbacks, e.g. account.customdomainone.com/login/callback, account.customdomaintwo.com/login/callback, etc. 3. To define what info will be shared when a user signs up or signs in with Slack, scroll to the **Scopes** section. 4. In the **User Token Scopes** area, select **Add an OAuth Scope** and from the dropdown menu choose **users.profile:read**. 5. Scroll up to the **OAuth Tokens for Your Workspace** section and select **Install to Workspace**. And when prompted, select **Allow**. 6. Select **Manage distribution** on the left and go to the **Share Your App with Other Workspaces** section. 7. Select **Remove Hard Coded Information** and in the area that appears, select the **I’ve reviewed and removed any hard-coded information** option. 8. Select **Activate Public Distribution**. Your app is now ready to use. ### **Add Slack credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the Slack tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** from the Slack app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Slack SSO. 7. Select **Save**. Users will now see Slack as an option to sign up and sign in to the selected applications.

# Authenticate - Social sign in - Twitch social sign in

> Step-by-step guide to setting up Twitch social sign-in including Twitch app registration, OAuth configuration, and Kinde integration.

Twitch sign-in, Twitch app, OAuth, client ID, client secret, callback URL, 2FA
authenticate

You can enable users to sign up and sign in using their Twitch credentials. To enable this, you’ll need a Twitch account and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Before you begin** **Enable Twitch 2FA** — Sign up for a Twitch account and [enable two-factor authentication](https://help.twitch.tv/s/article/two-factor-authentication?language=en_US) (2FA). You will need your mobile number and an authenticator app e.g. Google authenticator, to do this. ## **Get the Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social authentication** section, select **Add connection.** 3. Select **Twitch** and then select **Next.** 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** option. 3. If you have only one custom domain, copy the Custom domain URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Twitch app. 5. Select **Save**. 6. Use the copied Callback URLs to set up the app, see below. ## **Register a Twitch app** 1. Go to the [Twitch developer console](https://dev.twitch.tv/) and select **Applications**. 2. Select **Register your application**. 3. Enter a name and the Kinde callback URLs you copied above. Add entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 4. Select the **Category** as an **Application Integration**. 5. Select **Create**. See the [Twitch docs](https://dev.twitch.tv/docs/authentication/register-app#registering-your-app) for additional help. ## **Get app Client ID and Client secret** 1. In the **Application** section in Twitch, select **Manage** next to your application. 2. Copy the **Client ID.** 3. Select **New secret** and when prompted, confirm. 4. Copy and paste the **Client ID** and **Client Secret** into a text file or somewhere you can easily copy them. ## **Add Twitch credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the Twitch tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** from the app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Twitch SSO. 7. Select **Save**. Users will now see Twitch as an option to sign up and sign in to the selected applications. ## When an email is not provided Twitch does not require an email for sign up, but Kinde does. So if a user signs up with Twitch and an email is not detected, we will ask for one. The user only needs to provide their email once, then they can sign in via Twitch without disruption. If the email they provide is already detected in Kinde, we will automatically link the accounts so as not to duplicate.

# Authenticate - Social sign in - X (formerly Twitter) social sign in

> Step-by-step guide to setting up X (formerly Twitter) social sign-in including X developer platform app creation, OAuth configuration, and Kinde integration.

X sign-in, Twitter sign-in, X developer platform, OAuth, client ID, client secret, callback URL
authenticate

You can enable users to sign up and sign in using their X credentials. To enable this, you’ll need an X developer platform account and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> <Aside> You may notice X still has mixed URLs and messaging for the name change from Twitter on their own site. We refer to X in this document. </Aside> ## **Create an X app** Sign up for a X developer platform account and [add your app](https://developer.twitter.com/en/portal/dashboard). If you are signing up for the first time, you will be given a default app. If you already have apps, you’ll need to create a project and then add the new app within that project. ## **Get the Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the Social connections section, select **Add connection.** 3. In the window that appears, select **X**, then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the **Custom domain** URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the X app. 5. Select **Save**. 6. Use the copied Callback URL to set up the app, see below. ## **Set up your X app** 1. Sign in to the [X Developer Platform](https://developer.twitter.com/). 2. In the side menu, select **Projects & apps** and then select your app. 3. In the **User authentication settings** section, select **Set up**. 4. Set the **App Permissions.** 5. Switch on **Request email from users.** 6. Select the **Type of App** as **Native app**. 7. Enter the Kinde callback URL you copied earlier. Add entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 8. Enter your Kinde domain URL, e.g. `https://yourdomain.kinde.com`. 9. Enter details in other fields if you wish. 10. Select **Save**. 11. Select the **Key and tokens** tab at the top of the page. 12. Copy the **Client ID** and **Client Secret** from the **Oauth2.0** section and paste them into a text doc or other place where you can get them again later. View **X Developer Platform’s** docs for more info about [authentication](https://developer.twitter.com/en/docs/authentication/overview). ## **Add X credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the list of **Social connections**, select **Configure** on the **X** tile. 3. Paste the **Client ID** and **Client secret** from the X app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow users to sign in with X. 7. Select **Save**. Users will now see X as an option to sign up and sign in to the selected applications. ## When an email is not provided X does not require an email for sign up, but Kinde does. So if a user signs up with X and an email is not detected, we will ask for one. The user only needs to provide their email once, then they can sign in via X without disruption. If the email they provide is already detected in Kinde, we will automatically link the accounts so as not to duplicate.

# Authenticate - Social sign in - Xero social sign in

> Step-by-step guide to setting up Xero social sign-in including Xero app creation, OAuth configuration, and Kinde integration.

Xero sign-in, Xero app, OAuth, client ID, client secret, callback URL
authenticate

You can enable users to sign up and sign in using their Xero credentials. To enable this, you’ll need a Xero app and some developer know-how. <Aside type="warning" title="Social sign in for production environments"> Before you make your production environment live, you must add your own social app's Client ID and Client secret in the Kinde connection (as per below). Do not use Kinde's app credentials by leaving the fields blank, as this poses a security and performance risk, and makes it difficult to change auth providers without service disruptions for your users. </Aside> ## **Get your Kinde callback URL** 1. In Kinde, go to **Settings** > **Authentication**. 2. In the **Social connections** section, select **Add connection.** 3. In the window that appears, select **Xero,** then select **Next**. 4. In the **Callback URL** section: 1. If you use Kinde’s domain as your default, copy the **Kinde domain** URL. 2. If you use custom domains, select the **Use custom domain instead** switch. 3. If you have only one custom domain, copy the **Custom domain** URL. If you have custom domains for multiple organizations, select each one from the list and copy the callbacks for each. You need to enter all custom domain callbacks in the Xero app. 5. Select **Save**. 6. Use the copied Callback URLs to set up the app, see below. ## **Create and configure a Xero app** 1. Create a Xero developer account. [https://developer.xero.com/](https://developer.xero.com/) 2. Verify your email when prompted. 3. Select New app. 4. Give the app a name and select Web app as the type. 5. Add your company URL. 6. Enter your Kinde callback URL in the **Redirect URI** field. Add additional entries for all your organization custom domain callbacks, e.g. `account.customdomainone.com/login/callback`, `account.customdomaintwo.com/login/callback`, etc. 7. Accept the terms and conditions and select **Create App**. 8. Go to **Configuration** and copy the **Client id** somewhere you can access it later. 9. Generate a **Client secret** and copy it immediately somewhere you can access it again. You will not get to copy it again. ## **Add Xero credentials to Kinde** 1. In Kinde, go to **Settings** > **Authentication**. 2. On the **Xero** tile, select **Configure**. 3. Paste the **Client ID** and **Client secret** from the Xero app into the relevant fields. 4. Select if you want to treat this connection as a trusted provider. A [trusted provider](/authenticate/about-auth/identity-and-verification/) is one that guarantees the email they issue is verified. We recommend leaving this off for maximum security. 5. Add any [upstream params](/authenticate/auth-guides/pass-params-idp/) that you want to pass to the IdP. 6. Select which applications will allow Xero social sign in. 7. Select **Save**. Users will now see Xero as an option to sign up and sign in to the selected applications.

