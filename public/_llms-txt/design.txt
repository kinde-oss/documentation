---
page_id: 3f4a5b6c-7d8e-9f0a-1b2c-3d4e5f6a7b8c
title: Kinde Documentation - Design
description: "Complete documentation for Kinde's design section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - design
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - design
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's design section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Design

This is the complete documentation for Kinde's design section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Design - Brand - Apply unique branding for an organization

> Comprehensive guide for applying unique branding to organizations including logo, favicon, theme, and color customization with API integration and reset functionality.

organization branding, multi-tenancy, logo, favicon, brand colors, theme, API, reset branding
design, brand, organizations

If your business model supports multi-tenancy or multiple user groups and you use [organizations](/build/organizations/multi-tenancy-using-organizations/) in Kinde, you can apply brand overrides to modify the pages in each organization. This means that when a user signs up or signs in to an organization, they have the brand experience associated with that organization, through page logo and colours. You can change the background, button, and text colours, as well as the favicon and logo for: - Sign up and sign in pages - Request access and subscription pages - Emails <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/c5a7fcf3-205b-4cf1-f199-d9da7aa11000/public" alt="Custom sign in screens in Kinde" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## To add or change a logo for an organization Logos must be under 1MB, and they are resized to have a maximum width or height of 120 pixels based on the aspect ratio. SVG works best as it displays well on any screen, but PNG and other formats are accepted. 1. In Kinde, go to **Organizations**. 2. In the list, select the organization you want to view. The organization **Details** page opens. 3. Select **Brand** in the left menu. The **Brand** page for the organization opens. 4. Scroll to the **Logo** section: 1. To remove an existing logo, select the trashcan icon. 2. To add a new or replace the logo, select **Upload image**. 5. Select **Preview** to see what your changes look like. 6. Select **Back** to exit the preview. 7. Select **Save** to apply the changes. 8. Test the change in your test or production environments. <Aside title="Logo fallback behavior"> If an organization logo is not available, you can set fallback behavior to show the org name or the global business logo instead. See [set global brand](/design/brand/global-brand-defaults/). </Aside> ## To add a logo via the Kinde Management API Use this endpoint `POST {{domain}}/api/v1/organizations/{org_code}/logos/light` For different logo variations, adjust the type path parameter (e.g., `light`, `dark`). In the Header, set a boundary value, e.g. `content-type: multipart/form-data; boundary="value"` Use `form-data` in the body to upload a valid PNG, JPEG, GIF, SVG, AVIF or WEBP image smaller than 1MB. You can also delete logos via the API. [See the API docs](https://docs.kinde.com/kinde-apis/management/#tag/organizations/post/api/v1/organizations/{org_code}/logos/{type}). ## To add or change a favicon for an organization Favicons are the tiny image shown on the tab of a browser. Image files must be a multiple of 48px square (e.g. 48x48, 96x96). <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/310d10e2-ab73-4aec-9872-7352aca57200/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 1. In Kinde, go to **Organizations**. 2. In the list, select the organization you want to view. The organization **Details** page opens. 3. Select **Brand** in the left menu. The **Brand** page for the organization opens. 4. In the **Favicon** section, select **Upload image** to add or replace a favicon. 1. Upload an **SVG** that will work in most browsers. 2. Add a **Fallback** image in PNG for other browsers. 5. To preview a favicon, you’ll need to save it and check in your test or live environment. 6. To remove a favicon, select the trashcan icon near the image. 7. Select **Save** to apply the changes. ## Add an avatar for an organization If your organizations manage their own profile or payment details via a [Kinde self-serve portal](/build/self-service-portal/self-serve-portal-for-orgs/), you can upload an avatar to personalize the experience for organization members. An avatar is usually a simple logo. Avatars must be in SVG format, and be smaller than 5kb. They appears as a 36px square in the interface. 1. In Kinde, open the organization details and go to **Brand** in the menu. 2. In the **Avatar** section, select **Upload image**. 3. Select **Save**. ## Set a light or dark theme 1. In Kinde, go to **Organizations**. 2. In the list, select the organization you want to view. The organization **Details** page opens. 3. Select **Brand** in the left menu. 4. Set the **Theme**: **Light**, **Dark**, or **User preference**. If you select user preference, make sure you choose a brand color scheme for both experiences. See below. 5. Select **Save**. ## Set brand colors for an organization 1. In Kinde, go to **Organizations**. 2. In the list, select the organization you want to view. The organization **Details** page opens. 3. Select **Brand** in the left menu. The **Brand** page for the organization opens. 4. Change the following elements to appear how you want: background, buttons, text color, link color, and button border radius. 5. Select **Preview** to see what your changes look like. 6. Select **Save** to apply the changes. ## Reset organization brand to match global styles If you want to revert to global styles for an organization, it is easy to reset. 1. In Kinde, go to **Organizations**. 2. In the list, select the organization you want to view. The organization **Details** page opens. 3. Select **Brand** in the left menu. The **Brand** page for the organization opens. 4. In the bottom section called **Admin actions**, select **Reset to default**. 5. Select **Save**. This removes logo, color schemes, etc.

# Design - Brand - Set global brand defaults

> Guide for setting global brand defaults including logo upload, favicon configuration, theme selection, and brand color customization for authentication pages.

global brand, logo, favicon, theme, brand colors, light theme, dark theme, user preference
design, brand, customization

When users sign up or sign in to your product, they land on pages generated by Kinde. You can update the look of these pages to match your brand. You also have the option to bring your own page design to the authentication experience. See - [Custom design with code](/design/customize-with-code/customize-with-css-html/) - [Custom sign-up and sign-in pages](/authenticate/custom-configurations/custom-authentication-pages/). ## Setting global brand elements You can choose to set a global theme for all pages, or else use global settings as a fallback for custom page designs. Use the following procedures to make design changes to suit your brand. ## Add your company logo Logos must be under 1MB, and they are resized to have a maximum width or height of 120 pixels based on the aspect ratio. SVG works best as it displays well on any screen, but PNG and other formats are accepted. 1. In Kinde, go to **Design > Global > Brand**. 2. In the **Logo** section, upload your company logo. Make sure images are less than 1MB, are PNG, JPEG, or GIF. 3. Scroll down to the bottom of the page and select the global logo fallback behavior. - Enable to use the global logo as a fallback default for organizations where the logo is not available. This means the end customer will see the organization logo, if not the global level logo, and failing that, the name of the organization. - Disable if you want the default behavior to be show the organization logo, then the organization name, and as a last option show the global logo. 4. Select **Save**. <Aside> The logo will be automatically linked to the [Redirect URL](/get-started/connect/callback-urls/) set for your business, or the [application homepage URL](/design/brand/link-to-homepage/) set up for each application. If you are using tracking, the URL will also reflect that the user clicked out of the sign up/sign in screen, so you can distinguish this action from successful sign ins. </Aside> ## Add favicons for web browsers Favicons are small icons that appear on browser tabs. To add them to Kinde, they must measure 48x48px (or multiples of, such as 96x96). ![image of browser favicons](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/f4cc6e0f-3f87-46af-f99d-7c4910602600/public) 1. In Kinde, go to **Design > Global > Brand**. 2. In the **Favicon** section: 1. Add one as SVG format (so it works in most browsers). 2. Add one as a **Fallback** PNG for other browsers, such as Safari. 3. Select **Save**. To change the favicon of an organization, see [Apply unique branding for an organization](/design/brand/apply-branding-for-an-organization/). ## Add an avatar for your business To personalize you Kinde experience, add an avatar for your business to display your logo or preferred image in the Kinde user interface. For example, an avatar appears on the home page in the bottom left where you can access business and profile controls. Avatars must be in SVG format, and be smaller than 5kb. They appears as a 36px square in the Kinde interface. 1. In Kinde, go to **Design > Global > Brand**. 2. In the **Avatar** section, select **Upload image**. 3. Select **Save**. ## Set a light or dark theme 1. In Kinde, go to **Design > Global > Brand**. 2. Set the **Theme**: **Light**, **Dark**, or **User preference**. If you select user preference, make sure you choose a brand color scheme for both experiences. See below. 3. Select **Save**. You can [change the light and dark theme settings for your organizations](/design/brand/apply-branding-for-an-organization/) as well. ## Set brand colors for page elements Your selections will be inherited across all pages and for all organizations, unless you set overrides. 1. In Kinde, go to **Design > Global > Brand**. 2. Select settings and colors for **Pages (backgrounds)**, **Cards**, **Buttons,** **Input fields**, and **Links**. Be sure to set a light and dark version of each if you want your brand colours to appear in both modes. 3. Select **Save**. 4. To preview pages, open the page using the side menu and select **Preview** in the top right. To set the brand color scheme of an organization, see [Apply unique branding for an organization](/design/brand/apply-branding-for-an-organization/).

# Design - Brand - Add homepage URL to the sign-in page

> Guide for adding homepage URL to sign-in pages so business logos link to application homepages and provide error recovery navigation.

homepage URL, sign-in page, application homepage, logo link, callback URLs, error handling
design, brand, applications

To link to your application’s homepage from your sign in page, you need to add a homepage URL to each of your applications. Once you do this: - Your business logo on the sign-in page will link to your application homepage - If a browser or other error occurs, we can provide a link to your user, to get them back to your application homepage ## Set the homepage URL for your applications 1. In Kinde, go to **Setting > Applications**. 2. Select **Configure** on the relevant application. 3. In the left menu, select **Authentication**. 4. Scroll to the **Callback URLs** section. 5. Add the **Application homepage URI**, e.g. `https://app.yourapp.com` 6. Select **Save**. 7. Repeat for each relevant application.

# Design - Brand - Remove Kinde branding from sign in pages

> Simple guide for removing Kinde branding from sign-in pages for paid plan users through business settings configuration.

remove branding, Kinde branding, sign in pages, paid plans, business details
design, brand, customization

<Aside type="upgrade"> Available on [paid Kinde plans](https://kinde.com/pricing/) </Aside> If you have a paid Kinde account, you can remove the Kinde branding from sign in pages. 1. In Kinde, go to **Settings > Business > Details.** 2. Switch off the **Show Kinde branding** switch. 3. Select **Save**.

# Design - Content customization - Customize email content

> Guide for customizing email content including sender details, logo configuration, OTP email customization, and multi-language support for authentication emails.

email customization, email sender, email logo, OTP email, passwordless auth, SMTP, business name
design, email, content-customization

If emails are part of your authentication processes for users - for example, users receive sign-in codes via email in a passwordless process - you can customize email details, with some limitations. ## **Change the email sender** **name** You can add your business or brand name so it appears as the sender of emails. 1. Go to **Settings > Email**. 2. Enter your business or brand name in the **Sender** name field. 3. Select **Save**. ## Change the email sender address If you want to change the email sender address, you add your own email provider’s SMTP details. See [Customize email sender](/get-started/connect/customize-email-sender/). ## **Change email logo** Emails inherit the logo you set as part of your [global brand](/design/brand/global-brand-defaults/). But you can also set a unique logo [for each organization](/design/brand/apply-branding-for-an-organization/) in your business. ## Change who verification emails are sent from _Only applies if you choose not to send emails from your own provider_ When Kinde sends an email on your behalf, it is sent from the ‘Business name’ listed in your Kinde business by default. For example: <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/aad2b06f-1a1d-4da0-8643-ef3709cb9c00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> If you want emails to come from your app name instead (if it is different), then you can edit the business name in **Settings > Business > Details**, without it affecting your Kinde domain or other environment settings. ## Change the content of the one-time passcode (OTP) email (passwordless auth) You can change the content of the OTP email if you use a [custom email sender](/get-started/connect/customize-email-sender/) for sending OTP emails. Once this is set up, you can make content changes as follows. 1. In Kinde, go to **Design > Emails > Email content.** 2. Select the language you want to edit. Only [languages you have selected](/design/content-customization/set-language-for-pages/) in your business are available. 3. You can edit the subject line, body content, and disclaimer footer. Use the placeholders to personalize and define where the code appears. 4. When you have made your changes, select **Save**. The new email content will now be sent. ## Add sign-in code to the email subject line (passwordless auth) You can include the sign-in code in the subject line of OTP emails to make it visible for users in notifications. Note that it is less secure to do this, as the code can be seen by anyone when notifications are displayed openly on devices. 1. In Kinde, go to **Design > Emails > Email content.** 2. Select the language you want to edit. Only [languages you have selected](/design/content-customization/set-language-for-pages/) in your business are available. 3. In the subject line field, include the `${code}` placeholder. This is where the code will appear. E.g. Enter `${code}` for access. 4. Select **Save**.

# Design - Content customization - How content is managed in Kinde

> Overview of content management in Kinde including editable page elements, multi-language support, and available authentication pages for customization.

content management, page content, multi-language, authentication pages, sign up, sign in, error messages
design, content-customization, multi-language

You can change the content for the main pages that your users see as part of authentication. You’re also able to manage the content in [all the languages you have selected](/design/content-customization/set-language-for-pages/) in Kinde. Currently, you can edit content for the following pages: - Sign up - Sign-up confirmation - Sign in - Sign-in confirmation - Request access form - Verify password Additional screens will be added, including error screens, in the coming months. ## What can be edited? You can edit the following page content: - Sign-up page: General page elements, consent, disclaimer, privacy, T&C acceptance, some error messages - Sign-in page: General page elements plus 'Account not found' error message - Verify password page: General page elements, error messages, helper text For the confirmation and request access form pages, you can edit the general page elements. Go to Design > Page content.

# Design - Content customization - Manage languages on user facing pages

> Comprehensive guide for managing languages on user-facing pages including language selection, default language configuration, language detection, and widget translation support.

language management, multi-language, internationalization, RTL languages, language detection, default language, Kinde widget
design, content-customization, multi-language

By default, all Kinde user-facing screens (for example the sign up and sign in screens) are in US English. However, you can make your end-user experience more international by selecting multiple languages for these screens as well. ## What gets translated? Only the user facing pages are translated. This includes, sign up, sign in, verification code, confirmations, one-time code emails. It is not yet possible to select a different language for the whole Kinde platform. To change the language displayed on sign up and request access pages, you need to [customize the relevant page](/design/brand/global-brand-defaults/). ## Supported languages Kinde’s language support offering is growing all the time. Here’s just a sample of what we have so far: English (en / en-US / en-AU / en-GB), Dutch, German, Polish, Hebrew, Italian, French, Malay, Spanish, Russian, Portuguese (Brazilian), Norwegian, Swedish. We aim to eventually support [all these languages](https://github.com/kinde-oss/kinde-translations#language-codes). Feel free to submit a pull request via [GitHub](https://github.com/kinde-oss/kinde-translations) to request or contribute a specific language translation. ## Choose languages Kinde will display the relevant language on authentication screens, when the user’s regional settings are detected. 1. Go to **Settings > Languages**. 2. In the **Supported languages** section, select the checkboxes of all the languages you want to support. Includes support for right to left (RTL) languages. ## Change the default language The default language is the fallback language if a user’s region is not detected, or if the detected language is not selected as supported in Kinde. 1. Go to **Settings > Languages**. 2. In the **Default language** dropdown, choose the language you would like to display as standard. ## How Kinde displays languages For user-facing authentication screens, Kinde gives display priority using language detection, as follows: 1. The language supplied in the auth url ^ 2. The preferred language selected in the user’s browser ^ 3. The default language you have selected in Kinde 4. US English as a last resort, if a translation is not available ^ If you have chosen not to support a language, we will try the next available option. Through language matching, Kinde automatically works out the closest base language to the requested language and will use this if supported by your app. ## Translation of content in the Kinde widget Translations inside of the Kinde widget are taken care of by Kinde. We will grab the copy from the relevant route and language from your [page content settings](/design/content-customization/update-auth-page-content/) and apply them to the widget. ## Customize text on authentication pages You can customize the text on various pages in the auth flow. See [Update page content for the auth flow](/design/content-customization/update-auth-page-content/) for more information. Kinde provides relevant localized content within the `context` object that is passed into the Page default function as mentioned above. Localizations and placeholder replacements are handled for you at run time. For example: ```jsx const {content} = event.context.widget; <img src={<img_url>} alt={content.logoAlt} /> <title>{content.pageTitle}</title> <h1>{content.heading}</h1> <p>{content.description}</p> ```

# Design - Content customization - Update page content

> Guide for updating authentication page content including multi-language support, text variables, and escape route URL configuration for error handling.

page content, content customization, text variables, multi-language, auth pages, escape route URL, preview
design, content-customization, multi-language

For maximum extensibility, page content has been decoupled from the page itself. This lets you update the copy on most screens, which you can do via the **Page content** section of the admin area (see below) or via API (coming soon). ### Update page content If your application is built for [multiple languages](https://docs.kinde.com/design/pages/set-language-for-pages/), select these first in Kinde. <Aside type="warning"> Make sure you hit save each time you finish updating a language or page. If you switch between without saving, you may lose changes. </Aside> 1. In Kinde, go to **Design > Page content**. 2. Select the language you want (only applicable if multiple languages are configured). 3. Select the page you want to edit. The list of content shown corresponds with page elements such as headings, field labels, helper text, error messages, etc. 4. Make the changes to the content. If you want, you can use text variables, explained below. 5. When you’ve finished, select **Save**. The save only applies to the current language and page selected. You need to select **Save** again if you edit in different languages. 6. Check changes by selecting **Preview**. You'll only see an accurate preview if the environment is fully connected, otherwise you may see errors. 7. Repeat from step 2 for each language and page you want to edit. ### Text variables for page content Variables are used to stand in for actual values that you want to appear on pages. They are a way of automating content. For example, if you use the `${email_address}` variable, the user’s email address will be shown. Variables can be used on pages as follows. **Sign in confirm code page** `${email_address}` - shows the full email address of the user `${email_address_obfuscated}` - shows only a part of the user's email **Sign up confirm code page** `${email_address}` ### Include ‘escape route’ URL in auth errors When auth errors appear, you want to give users a way to navigate out of them. To provide an ‘escape route’ URL in these situations: 1. In Kinde, go to **Settings > Applications** and select **View details** on your application. 2. Enter your website URL into the **Application homepage URI** and **Application login URI** fields. 3. Select **Save**.

# Design - Customize with code - Connect your repo for custom pages

> Guide for connecting GitHub repositories for custom page design including directory structure setup, code preview options, and status monitoring.

connect repo, custom pages, GitHub, custom domain, code preview, directory structure, code status
design, customize-with-code, git

To enable your custom code to override Kinde page design, you need to set up and connect a git repo for the design files. You must also be using a [custom domain](/build/domains/pointing-your-domain/) to run your custom code with Kinde. ## Connect your repo 1. Go to **Design > Custom code**. 2. Select the option to **Connect repo**. This will take you to the **Settings > Git Repo** page where you can manage your repo connection for design and workflows. 3. If you don’t already have a repo set up for workflows, select **Connect GitHub**. 4. Follow the prompts to connect a repo and branch. ## Option to enable code preview If you are on the Kinde Plus or Scale plan, you can enable a code preview before you deploy new code to be live. This is helpful for checking the design before making it public in your production environment. If you have a free or Pro plan, we recommend you preview designs in a non-production environment before syncing in production. ## Set up the Git directory structure Your directory structure should follow the following structure. ```jsx myApp/ ├── kindeSrc/ │ └── environment/ │ └── pages/ │ └── (kinde)/ │ └── <route>/ │ └── page.tsx ├── package.json └── kinde.json ``` In the above example, `<route>` is used to map your code to a rendered page in Kinde. For example `kindeSrc/environment/pages/(kinde)/(register)/page.tsx` will map to the register / sign up page in the authentication flow. ## Code status alerts The home page of your Kinde dashboard shows a code alert status. You can see immediately if there are any concerns with your code. Select **View code status** to see if the issue is: - a code sync problem - a workflow code problem - a design custom code issue

# Design - Customize with code - Review custom code logs

> Guide for reviewing custom code logs including sync, build, and runtime logs for debugging deployment issues and troubleshooting code problems.

custom code logs, sync log, build log, runtime log, debugging, deployment errors, troubleshooting
design, customize-with-code, logs, debugging

There are several logs that can be checked when something goes wrong. ## Sync log Check to see if your code is syncing to Kinde and is able to be deployed. Issues with sync logs are most commonly associated with missing files or other directory issues. Go to **Settings > Git repo > Sync log**. ## Build log A build log is generated for each deployment. It provides details on the deployment checks, showing a success or fail message. 1. Go to **Design > Custom code**. 2. Select **Deployments** in the menu. 3. Select the specific deployment you want to view. 4. Scroll to the **Build log** section. For each page included in the deployment, open the dropdown to view the build details. We recommend fixing all the errors detected during this process and syncing your code again. This generates a new deployment and new code check. ## Runtime log Runtime logs record events that occur when your code is running. When something goes wrong, you can check runtime logs to see what happened. 1. Go to **Design > Custom code**. 2. Select **Runtime logs** in the menu. 3. Select the runtime ID to open a details page. 4. Scan the logs for errors.

# Design - Customize with code - Apply custom styling per application

> How to apply custom styling per application using the Client ID attribute and conditional rendering.

custom CSS, custom HTML, conditional rendering, custom domain
design, customize-with-code, css, styling

You can apply unique HTML and CSS styling to each Kinde application within the same business account. Although you can only connect one Git repository for your custom pages, you can use conditional rendering to serve different designs based on which application is being accessed. This guide will walk you through how to use the application's **Client ID** to render unique styles and layouts. This doc is based on the tests and implementation we ran and provides example code, folder layout, and implemention checklist. The **clientID** is a unique identifier assigned to each application in Kinde. This value distinguishes one app from another, allowing your template code to detect which application is active and render the appropriate HTML and CSS for each app accordingly. ## Solution: Conditional rendering The key to this solution is the `clientId`, a unique identifier assigned to every application you create in Kinde. This ID is passed in the `request` object to your custom pages. By checking the value of the `clientId`, your code can determine which application is active and render the corresponding HTML and CSS. This process happens server-side, so there's no performance loss for your users. ## Before you begin - Set up a [custom domain](/build/domains/pointing-your-domain/) for your Kinde business. - Connect a [Git repository](/design/customize-with-code/connect-repo/) to manage your custom pages. - Make sure your custom design files are already working. Follow [this guide](/design/customize-with-code/customize-with-css-html/) for more details. ## Step 1: Set up file structure Your repository needs to follow a specific structure for Kinde to recognize the files. For this example, we are using the simplest structure with the `(default)` folder to act as a fallback and a `page.tsx` file within it. This file will contain your conditional logic. ``` myApp/ ├── kindeSrc/ │ └── environment/ │ └── pages/ │ └── (kinde)/ │ └── (default)/ │ └── page.tsx │ └── layout.tsx ├── package.json └── kinde.json ``` For this specific example, we focus on the default design, but you can use this for your sign up and sign pages as well. ## Step 2: Find the Client ID In your `page.tsx` file, you can access the `clientId` from the `request` object that is passed to your page component. ```js const DefaultPage: React.FC<KindePageEvent> = async ({ context, request }) => { let clientId = request.authUrlParams?.clientId || null; // ... rest of your code };` ``` ## Step 3: Implement the conditional logic Now you can use the `clientId` variable to build your conditional logic. For example, you can use an `if/else` statement, a `switch` statement, or a ternary operator to render different JSX for each application. The following example shows how to render different content for three separate applications (Next.js, Python, and Nuxt.js), with a default fallback. ### `kindeSrc/environment/pages/(kinde)/(default)/page.tsx` ```js 'use server'; import { getKindeWidget, fetch, type KindePageEvent, } from '@kinde/infrastructure'; import React from 'react'; import { renderToString } from 'react-dom/server.browser'; import Layout from '../../layout'; const DefaultPage: React.FC<KindePageEvent> = async ({ context, request }) => { // 1. Access the client ID from the request object let clientId = request.authUrlParams?.clientId || null; // Environment variables const BUILDER_API_KEY = process.env.BUILDER_API_KEY; const CLIENT_ID_NEXT_APP = process.env.CLIENT_ID_NEXT_APP; const CLIENT_ID_PYTHON_APP = process.env.CLIENT_ID_PYTHON_APP; // Example: Fetching dynamic content (optional) const res = await fetch( `https://cdn.builder.io/api/v3/content/login-page-data?apiKey=${BUILDER_API_KEY}&sort.createdDate=-1`, { headers: {}, method: 'GET', } ); const { loginPageImage, signInFormTextTop, signupFormTextTop, signInFormTextBottom, signupFormTextBottom, } = res?.data?.results?.[0]?.data || {}; const isUserOnLoginOrRegisterPage = request?.route?.flow; return ( <Layout context={context} request={request} props={res?.data?.results?.[0]?.data} > {/* 2. Use conditional rendering based on the client ID */} {clientId == CLIENT_ID_NEXT_APP ? ( <div className='container'> {/* Content for the Next.js App */} <h1>Styling for the First App - Next.js</h1> <h2>Client ID: {clientId}</h2> <div className='login-form-wrapper'> {getKindeWidget()} </div> </div> ) : clientId == CLIENT_ID_PYTHON_APP? ( <div className='container-2'> {/* Content for the Python App */} <h1>Styling for the Second App - Python</h1> <h2>Client ID: {clientId}</h2> <table> <tr> <th>Company</th> <th>Contact</th> <th>Country</th> </tr> <tr> <td>Alfreds Futterkiste</td> <td>Maria Anders</td> <td>Germany</td> </tr> </table> <div className='login-form-wrapper'> {getKindeWidget()} </div> </div> ) : ( <div className='container-default'> {/* Fallback content for any other app (e.g., Nuxt app) */} <h1>Default Kinde Authentication Page</h1> <h2>Client ID: {clientId || 'Not available'}</h2> <div className='login-form-wrapper'> {getKindeWidget()} </div> </div> )} </Layout> ); }; // Page Component export default async function Page(event: KindePageEvent): Promise<string> { const page = await DefaultPage(event); return renderToString(page); } ``` The custom CSS for classes like `.container` and `.container-2` would typically be defined in your `layout.tsx` file or in a separate CSS file. ## Expected output for custom designs per application When a user authenticates through each of your applications, they will see a different page design based on your conditional logic. The examples below are not over-designed, but you could make them as distinct as you want. - **Next.js App (`clientId`: `ca3c184xxxxxxd842777bc***xxxx`)** - The user will see the content inside the first block, with the heading "Styling for the First App - Next.js". ![An image of how the page for the Next.js app looks after the conditional rendering is applied](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b78f5a38-8c84-4b2c-5759-9df24aa61700/public) - **Python App (`clientId`: `c41376xxxxxx244b3122dd***xxxx`)** - The user will see the second block, with the heading "Styling for the Second App - Python" and a custom HTML table. ![An image of how the page for the Python app looks after the conditional rendering is applied](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b161fbec-4144-4975-8561-a4fb6b1d8500/public) - **Nuxt.js App or any other app (`clientId`: `730c34be0xxxxxxe206ec07***xxxx`)** - Since this ID doesn't match the first two conditions, the user will see the final fallback block with the heading "Default Kinde Authentication Page". ![An image of how the page for any other app (default) would look after the conditional rendering is applied](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/9aacda1b-2583-4226-48c7-3dcd09981100/public)

# Design - Customize with code - Custom UI examples

> Collection of custom UI examples and starter templates including SplitScape, Evolve.ai, Orbit, and Bark & Bite for different design themes and use cases.

custom UI examples, starter templates, React Server Components, SplitScape, Evolve.ai, Orbit, Bark & Bite
design, customize-with-code, examples

View examples to help you get started with Kinde custom UI. ## Example repos Fully customizable UI starter templates built with React Server Components: - [SplitScape](https://github.com/kinde-starter-kits/custom-ui-splitscape) - Professional and friendly, with room to grow. **Theme:** Clean, flexible, balanced **Description**: A well-balanced, two-column layout that suits a broad range of industries—from SaaS to marketplaces. Social login options are prominent, and the welcome message is clear and reassuring. Great default for teams who want flexibility without committing to a niche tone. - [Evolve.ai](https://github.com/kinde-starter-kits/custom-ui-evolve-ai) - Simple, focused, and designed to convert. **Theme:** Futuristic, minimalist, product-led **Description:** A no-frills, gradient-backed sign-in screen with clear CTA flow. Designed for AI products, productivity tools, or platforms that want a polished, tech-forward look while keeping the user’s focus on getting started fast. - [Orbit](https://github.com/kinde-starter-kits/custom-ui-orbit) - Built for launch-ready teams with a bold aesthetic. **Theme:** Dark mode, sci-fi, and startup energy **Description:** A sleek, dark-themed template with interstellar vibes. Perfect for tech startups, crypto products, and developer tools that want to signal modernity and momentum. - [Bark & Bite](https://github.com/kinde-starter-kits/custom-ui-barknbite) - Warm, approachable, and built to delight. **Theme:** Friendly, natural, lifestyle **Description:** Soft colors and charming personality make this template ideal for lifestyle brands, pet-related businesses, or companies targeting families and individuals.

# Design - Customize with code - Customize designs with code

> Overview of customizing Kinde designs with HTML, CSS, and JavaScript including widget customization, page design, and content management layers.

custom design, CSS, HTML, JavaScript, custom domain, Kinde widget, page customization, code management
design, customize-with-code, css, html

Kinde gives you the ability to bring your own HTML / CSS and JavaScript to our hosted pages. For security, your custom code will only be run on a custom domain. These are free to use in Kinde - [set up a custom domain](/build/domains/pointing-your-domain/). There are three layers which make up design customization in Kinde: - **The Kinde widget** - This is the ‘form’ that shows on each screen where end users interact, such as where they input and confirm their auth credentials, enter OTPs, etc. You can change the layout and design of widget elements. - **The page** - the page on which the widget appears, includes background colour, images, footer, location of the widget on the page, etc. - **Copy / translations** - the content that appears in and around Kinde widgets, including field labels, headings, button text, etc. You can update content for all the languages you have selected in Kinde. ![Image of sign in page as an example of page parts](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/361adeeb-53f5-46d4-1223-b66eabf96e00/public) It's important to understand how to work with each of these elements, before getting too far along the custom code path. Learn more about: - [The widget](/design/customize-with-code/kinde-widget/) - [Working with pages](/design/customize-with-code/understand-page-design/) - [Content control](/design/content-customization/how-content-is-managed/) ### Code management Your code for your pages will live in a GitHub repository (other git providers to be supported later). For details see [Connect your repo](/design/customize-with-code/connect-repo/).

# Design - Customize with code - Design inspection with DevTools

> Guide for inspecting Kinde widget components using browser DevTools including style hooks, CSS settings, and debugging techniques across different browsers.

DevTools, design inspection, style hooks, CSS settings, browser debugging, element inspection, Safari, Chrome, Firefox
design, customize-with-code, devtools, debugging

It's helpful to be able to inspect the Kinde widget components and layouts, using DevTools. This lets you: - view [settings](/design/customize-with-code/styling-with-css/) applied to a component or layout, especially when they aren’t defined under `:root`. - get the [style hook](/design/customize-with-code/style-with-style-hooks/) of an element. You can learn more about DevTools in browser documentation. Here's a few common examples: - [Apple Safari](https://developer.apple.com/documentation/safari-developer-tools) - [Google Chrome](https://developer.chrome.com/docs/devtools?hl=en) - [Microsoft Edge](https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/landing/) - [Mozilla Firefox](https://firefox-source-docs.mozilla.org/devtools-user/) ## Step 1: Open DevTools Most browsers follow a similar approach for opening DevTools. Here’s a quick guide. **Right-click method:** 1. Right-click anywhere on the page. 2. From the context menu, select **"Inspect"** or **"Inspect Element"**. **Keyboard shortcut:** - `Ctrl + Shift + I` (Windows/Linux). - `Cmd + Option + I` (macOS). **Menu navigation:** 1. Open your browser’s menu (three dots or lines in the top-right corner). 2. Select **More tools** **>** **Developer Tools/Web Developer Tools**. In Safari, go to the top menu bar and select **Develop > Show Web Inspector**. If you don’t see the **Develop** menu item, you’ll need to enable it: 1. In the top menu bar, go to **Safari > Settings**. 2. Open the **Advanced** tab. 3. Check **Show features for web developers**. ## Step 2: Locate in HTML Once DevTools is open: 1. On the page, right-click the element you want to inspect. 2. From the context menu, select **Inspect** or **Inspect Element**. 3. The element will be highlighted and focused to in the **Elements** (or **Inspector**) tab. 4. All widget components and layouts have style hooks on them: `data-kinde-[…]`. 5. Click the arrow (▸) icon next to the element to expand its child elements. ## Step 3: View settings Once a component or layout is located in the HTML: 1. On the page, right-click the element you want to inspect. 2. From the context menu, select **Inspect** or **Inspect Element**. 3. In the **Styles** (or **Rules**) panel, the element’s CSS rules will be displayed, revealing the settings applied to it. 4. Look for `--kinde-[…]` instances to identify the settings specific to the component or layout. If a `--kinde-[…]` setting is explicitly defined, clicking on it will navigate to its definition at the document root, where its value is set. Most browsers also display the setting’s value in a tooltip when hovered. If the setting is not defined and relies on a fallback, it will appear inactive and cannot be clicked. 5. To view state-specific settings: 1. In the **Elements** (or **Inspector**) tab, right-click the element (some browsers may include a menu button next to the element for this action). 2. From the context menu, select **"Force state"** (or **“Change Pseudo-class”** or **“Forced Pseudo-Classes,”** depending on the browser). 3. Choose the desired state from the list.

# Design - Customize with code - Working with the Kinde widget

> Guide for working with the Kinde widget including customization options, authentication flow settings, MFA configuration, and error handling for form components.

Kinde widget, form components, CSS customization, authentication flow, MFA, error handling, branding
design, customize-with-code, widget

The Kinde widget is a core element in Kinde page design. The components that make up the widget have been specifically designed to be easily overridden by your own CSS so you can give it the look and feel of your brand whilst keeping best in class security. The widget refers to a specific form component that lives on the page, that consists of fields, labels, cards, buttons, text strings with URLs, and the 'Built with Kinde' logo. Most styles can be switched out using our suite of [CSS custom properties](/design/customize-with-code/styling-with-css/) but for more complex customizations, we have provided [style hooks](/design/customize-with-code/style-with-style-hooks/) that you can use to completely replace everything. Before designing the elements of the widget and page, fully set up authentication and user access flow, as these impact what is shown in the widget. ## Change what appears in the widget ### Settings for all widgets - [Remove Kinde branding](/design/brand/remove-kinde-branding/) - available only on paid plans ### Settings for the sign in flow - [Auth options](/authenticate/authentication-methods/set-up-user-authentication/) (org or application level configuration) - Create account link - hidden if registrations are disabled ### Settings for the register flow - [Auth options](/authenticate/authentication-methods/set-up-user-authentication/) (org or application level configuration) - [Ask first name / last name](/authenticate/custom-configurations/authentication-experience/) - [Show marketing widget](/authenticate/custom-configurations/authentication-experience/) - [Show “already have account” link](/authenticate/custom-configurations/authentication-experience/) - [Privacy / terms of use links](/manage-users/access-control/accept-policies-signup/) ### Settings for the MFA method - [MFA options](/authenticate/multi-factor-auth/enable-multi-factor-authentication/) (org or application level configuration) ### Settings for errors Follow [this procedure](/design/brand/link-to-homepage/) to include ‘escape hatch’ URLs for errors during the auth flow.

# Design - Customize with code - Manage custom code deployments

> Guide for managing custom code deployments including code preview, syncing, making deployments live, and rollback functionality for Plus and Scale plan users.

custom code deployment, code preview, sync code, rollback, Plus plan, Scale plan, GitHub integration
design, customize-with-code, deployment

Each time your code is synced to Kinde, a new deployment is created. A deployment is a unique point-in-time process that checks the code, which can then be made live. ## Enable code preview Kinde Plus and Scale plan customers are able to preview the design before setting the code live in the production environment. In **Settings > Git repo**, switch on the **Enable preview mode** option. If this setting is not available to you as a Free or Pro plan user, we suggest you use non-production environments to check your designs before deploying to production. ## Sync code Every time you change your code in GitHub, you must sync those changes back to Kinde so you can make them live. 1. Go to **Design > Custom code**. 2. Select **Sync code**. A new deployment is generated on click. If the deployment is successful, you will be able to make it live. ## Make a deployment live 1. Go to **Design > Custom code**. The **Summary** page shows which deployment is live and which is ready to go. 2. If you want, select **Sync code** to get the latest deployment. 3. Select **Deployments** in the menu. A list of current and previous deployments is shown. 4. Find the deployment you want to make live and select **Make live** in the three dots menu. ## Roll back a deployment To roll back a deployment, you just need to make a previous deployment live. 1. Go to **Design > Custom code**. The **Summary** page shows which deployment is live and which is ready to go. 2. Select **Deployments** in the menu. A list of current and previous deployments is shown. 3. Find the previous deployment you want to roll back to and select **Make live** in the three dots menu. This will override the current live deployment.

# Design - Customize with code - Manage assets

> Guide for managing design assets including Kinde-hosted favicons and logos, external assets, and Content Security Policy compliance for custom domains.

design assets, favicons, logos, external assets, CSP, Content Security Policy, organization logos
design, customize-with-code, assets

It is likely that your logos and favicons are managed in Kinde, but you may also manage externally hosted assets like stylesheets, fonts, and images. ## Kinde hosted assets Within your custom code you can reference assets which have been uploaded within the Kinde admin area. The Kinde infrastructure package ships with helper methods for accessing these: ### Favicons ```jsx import {getFallbackFaviconUrl, getSVGFaviconUrl} from "@kinde/infrastructure"; ``` #### Usage ```jsx <link rel="icon" href={getFallbackFaviconUrl()} sizes="48x48"> <link rel="icon" href={getSVGFaviconUrl()} type="image/svg+xml" /> ``` ### Logos ```jsx import {getLogoUrl, getDarkModeLogoUrl} from "@kinde/infrastructure"; ``` #### Usage ```jsx // Always use light logo <img src={getLogoUrl()} alt={event.context.widget.content.logoAlt} /> // Always use dark logo <img src={getDarkModeLogoUrl()} alt={event.context.widget.content.logoAlt} /> // User preference <picture> <source media="(prefers-color-scheme: dark) srcset={getDarkModeLogoUrl()} > <img src={getLogoUrl()} alt={event.context.widget.content.logoAlt} /> </picture> ``` ### Org logos Both logo functions accept the org code as an argument to return the relevant organization logo url: ```jsx // Pass org code in const {orgCode} = event.request.authUrlParams <img src={getLogoUrl(orgCode)} alt={event.context.widget.content.logoAlt} /> ``` ## External CSS files, fonts and images We know you will want to use assets like stylesheets, fonts and images. Kinde does not currently offer hosting for these static assets and you will need to host them yourself. Your root domain as well as any subdomains of that domain are added to our Content-Security-Policy (CSP) by default so to use your own assets and comply with Kinde’s CSP, the assets should be stored on servers that share the same domain as your custom domain. For example, if you are using the custom domain `auth.myapp.com` you could host your external fonts, images and CSS files at `assets.myapp.com` and they would be accessible in your code.

# Design - Customize with code - Page rendering

> Guide for understanding Kinde page rendering including SPA behavior, DOM replacement, and optimizing performance with data-kinde-root attribute.

page rendering, SPA, DOM replacement, data-kinde-root, server rendering, performance
design, customize-with-code, page-rendering

Part of page rendering is understanding how Kinde treats the code you add. By default Kinde will swap out the content of the `<body>` tag in a single DOM replacement when navigating between pages. This provides single-page-application (SPA) behavior, with all the performance and security benefits of a server-rendered page. We use the `<body>` element as we don't know the structure of your code. This does mean there is a risk of collisions with scripts that do something with the `body` (e.g. Google Font Loader or third-party browser extensions) which can produce very weird and hard to debug errors in production. We recommend that you designate a specific entry point for Kinde by placing the `data-kinde-root` attribute on a wrapper element. This has the added advantage of minimizing the amount of the UI being swapped out, which means less network requests and a better end user experience. Here's an example: ```jsx <header> <Logo> </header> // our header and logo won't change so exclude from re-rendering <main data-kinde-root="true"> <h1>{heading}</h1> <p>{description}</p> {getKindeWidget()} </main> // our footer won't change so exclude from re-rendering <footer> // some content here </footer> ``` This means that only critical page items are being re-rendered.

# Design - Customize with code - Pages and the Kinde Management API

> Guide for integrating Kinde Management API with custom pages including M2M setup, environment variables, and common API calls for B2B applications.

Kinde Management API, M2M application, API calls, server rendering, environment variables, organization API, bindings
design, customize-with-code, api

Pages are rendered on the server which means it is possible to make API calls before the page is delivered to the browser. The most common use case for this is calling the Kinde Management API to get additional information for the page. <Aside type="warning"> Just because you can do something doesn’t mean you should. Every API call adds latency to page render times slowing down the experience for your end users. Where possible, we have provided the data you require either via functions in the npm package, or via the event object. The main reason for using the API is for B2B businesses who require more data for the current org to display. Let us know if you find other use cases or you think other data would be useful to include. </Aside> ## Before using the Kinde Mangement API for pages 1. [Create an M2M application](/developer-tools/kinde-api/connect-to-kinde-api/) within Kinde and grant it access to the Kinde Management API with the desired scopes. 2. Setup environment variables in Kinde to provide the client ID and secret. By default the `createKindeAPI` method initially looks up the following environment variables setup in Kinde settings to determine the application to use. - `KINDE_WF_M2M_CLIENT_ID` - `KINDE_WF_M2M_CLIENT_SECRET` - Ensure this is setup with sensitive flag enabled to prevent accidental sharing `createKindeAPI` can also accept an additional parameter which can contain `clientID/clientSecret` or `clientIDKey/clientSecretKey` which can define the environment variables to look up. ## Calling the Kinde Management API for pages The example below calls the `environment` API and adds the logo to the page. **Required bindings** ```js export const pageSettings = { bindings: { "kinde.env": {}, "kinde.fetch": {}, url: {} } }; ``` Example usage calling Organization API: ```jsx export default async Page(event: onPageRequestEvent) { const orgCode = event.request.authUrlParams.orgCode; const kindeAPI = await createKindeAPI(event); const { data: res } = await kindeAPI.get({ endpoint: `organization?code=${orgCode}`, }); const {org} = res; return `<html lang={event.request.locale.lang} > <head> <title>Hello world</title> </head> <body> <p>{org.name}</p> </body> </html> `; } ``` ## Common API calls for custom page design - `GET /environment` - includes brand settings for the environment including logos / background images. Required M2M scope: `read:environments` - `GET /organizations?org_code=${request.authUrlParams.orgCode}` brand settings for the requested org including logo. Required M2M scope: `read:organizations` - `GET /business` - business details like the business name. Required M2M scope: `read:businesses` - `GET /applications/${request.authUrlParams.clientId}`. Required M2M scope: `read:applications`

# Design - Customize with code - Libraries and packages for pages

> Guide for using npm packages and libraries in Kinde page designs including supported packages, React templates, and development dependencies.

npm packages, libraries, React, Liquid, dev dependencies, runtime environment
design, customize-with-code, packages

As part of bringing your own code to page designs, you'll likely need to work with some `npm` libraries in addition to the `@kinde/infrastructure` package. Kinde supports a handful of carefully selected libraries from `npm`. These include: `@kinde/infrastructure` This is Kinde’s package that supplies helpers and methods to give you the best possible authoring experience of Kinde pages and workflows. For server side React templates: `react` and `react-dom/server.browser` For Liquid templates: `liquidjs` Attempting to import unsupported packages into your runtime code will result in your deployment failing. Dev dependencies (e.g packages used for linting, tests and build steps) can be used, as they do not affect the Kinde runtime environment. Any code dependent on these packages should be prebuilt before deploying to Kinde.

# Design - Customize with code - Preview custom code

> Guide for previewing custom code designs using preview credentials and auth flow testing for Plus and Scale plan users.

preview custom code, pages_mode, preview password, Plus plan, Scale plan, auth flow
design, customize-with-code, preview

<Aside type="upgrade"> You can only preview custom code if you are on a Kinde Plus or Scale plan. </Aside> Unlike changes you make in the Kinde UI that impact page layouts and content, your custom designs can’t be viewed in a Kinde-generated preview. Instead, you can test designs using your real auth flow, using preview credentials. ## Preview custom code 1. In your application code, pass the additional auth url parameter `pages_mode=preview`. When the auth flow is initiated a password screen will appear which is required to view the preview. 2. Enter your preview password. Go to **Design > Custom code > Preview**. 3. Copy the **Password** and use it in the authentication request. The preview will show the latest code deployment version.

# Design - Customize with code - Quick start guide

> Quickly set up and run your first Kinde workflow in minutes.

quick start, custom UI, GitHub template, React Server Components, custom domain, workflow setup
design, customize-with-code, quick-start

The quickest way to see an end-to-end example of custom HTML/CSS and JS running on Kinde hosted pages is to follow this guide. ## What you need - A Kinde account with an application set up on a [custom domain](/build/domains/pointing-your-domain/). - A GitHub account to host your code. ## Step 1: Clone a Kinde example template 1. Sign in to your GitHub account and go to [Kinde example Splitscape Custom UI template](https://github.com/kinde-starter-kits/custom-ui-splitscape). 2. Select the green **Use this template button**. 3. Select **Create a new repository**. This will create a new repository in your GitHub account with a copy of the example code. It contains a a fully customizable UI starter template built with React Server Components. ## Step 2: Connect your GitHub repository to Kinde 1. Sign in to your Kinde account and go to **Settings > Git repo**. 2. Select **Connect GitHub** and follow the instructions to connect your GitHub account to Kinde. When you select the repository you just created, Kinde will automatically sync the code for you. ## You're done! Assuming you have an application set up, you can see your custom UI by navigating to your sign in screen. You can now modify the custom UI code to look however you like. ## Next steps - Explore the [Kinde custom UI documentation](/design/customize-with-code/customize-with-css-html/) to learn more about how custom UI works. - Take a look at some other example templates

# Design - Customize with code - Style with style hooks

> Comprehensive guide for styling Kinde widgets using style hooks including CSS selectors, theme support, dark mode, and HTML data attributes for custom styling.

style hooks, CSS styling, data attributes, widget styling, dark mode, theme styles, HTML selectors
design, customize-with-code, styling

Style hooks are [HTML data attributes](https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes) that can be targeted using the [CSS attribute selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors), allowing you to apply styles directly to the Kinde widget in your custom CSS. <Aside> Style hooks only apply to styles in the Kinde widget, and not the full page design. </Aside> They give you full control over styling widget components and layouts. Unlike CSS classes, which are used internally, style hooks are dedicated to external (custom) styling. This separation ensures your custom styles remain stable, even if internal styles change. Style hooks are useful when a setting doesn’t exist for a specific style, such as adding a shadow effect to the **Button** component. For example: ```css [data-kinde-button] { box-shadow: 0 1px 3px rgba(12, 12, 12, 0.09); } ``` ## Define style hooks in your CSS Style hooks allow you to apply styles directly in your custom CSS. For example, add a shadow effect to the **Button** component when hovered: ```css [data-kinde-button]:hover { box-shadow: 0 1px 3px rgba(12, 12, 12, 0.09); } ``` <Aside> For your custom styles to apply correctly, make sure they load **after** the Kinde-required CSS. See [Including the Kinde required CSS](/design/customize-with-code/styling-with-css/). </Aside> ## Available style hooks Nearly all elements in the widget have a style hook applied, allowing you to style it as needed. The best way to see which hooks are available is by using [DevTools](/design/customize-with-code/inspect-design-devtools/). Here’s an example of a form field with its style hooks: ```html <div class="kinde-form-field kinde-form-field-variant-select-text data-kinde-form-field="true data-kinde-form-field-variant="select-text > <label class="kinde-control-label" data-kinde-control-label="true" for="credentials_email"> Email </label> <input class="kinde-control-select-text data-kinde-control-select-text="true data-kinde-control-select-text-variant="text id="credentials_email name="p_email required=" kui-input-persist="true autocapitalize="off autocomplete="email spellcheck="false type="email inputmode="email /> </div> ``` And here’s the HTML showing only the style hooks: ```html <div data-kinde-form-field="true" data-kinde-form-field-variant="select-text"> <label data-kinde-control-label="true"> Email </label> <input data-kinde-control-select-text="true" data-kinde-control-select-text-variant="text" /> </div> ``` ## When style hooks aren’t available In rare cases, an element may not have a style hook. This doesn’t mean it can’t be styled—just that a hook isn’t needed. In these cases, it's safe to use an attribute selector or an element (type) selector, but never a class selector, because these attributes and elements are standardized in HTML and won't change. For example, if you wanted to style a specific text input type, like “email”, “url”, “password”, etc, which belongs to the **Control select text** component, you can safely do that by targeting the “type” attribute: ```css [data-kinde-control-select-text][type="email"] { /* Your styles */ } ``` Or if you wanted to target a select list’s `<option>` element, you can safely do that via a type selector: ```css [data-kinde-control-select-text] option { /* Your styles */ } ``` ## Apply theme styles <Aside> Light and dark themes are managed in Kinde. See [Design brand experience defaults](/design/brand/global-brand-defaults/) for more details. </Aside> Theme styles can be applied using the theme hook (`data-kinde-theme`), an HTML data attribute assigned to the `<html>` element. To include it, use the `getKindeThemeCode()` helper from the `@kinde/infrastructure` package: ```js import {getKindeThemeCode} from "@kinde/infrastructure"; ``` Then, apply it inside the `<html>` tag: ```html <html data-kinde-theme="{getKindeThemeCode()}"></html> ``` The theme hook has three possible values based on the applied theme in Kinde: - “light” (default) - “dark” - “user-preference” Since “light” is the default theme, no extra setup is required—styles can be assigned to style hooks as usual. ### Apply dark mode styles To apply dark mode styles to a component or layout, use the `[data-kinde-theme='dark']` selector. Example: Dark mode styles for the **Card** component ```css [data-kinde-theme="dark"] [data-kinde-card] { /* Your styles */ } ``` ### Apply user preference styles The **user-preference** theme allows users to inherit their system theme settings. To apply styles only when the system is set to dark mode, use the [`prefers-color-scheme: dark`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query inside the theme selector. Example: User preference styles for the **Card** component ```css [data-kinde-theme="user-preference"] [data-kinde-card] { @media screen and (prefers-color-scheme: dark) { /* Your styles */ } } ``` ### Combine dark mode and user preference When supporting both dark mode and user preference, repeat the dark mode styles inside the `@media` query: ```css [data-kinde-theme="dark"] [data-kinde-card] { /* Your styles */ } [data-kinde-theme="user-preference"] [data-kinde-card] { @media screen and (prefers-color-scheme: dark) { /* Your styles */ } } ``` ## Style hook naming structure Style hooks, like settings, follow a consistent naming structure to make them easy to identify and understand. ### Root element A component or layout’s root element follows this structure, as shown in the **Text link** component: ``` data-kinde-text-link | | | | | └── Component/layout name (text link) | └── Prefix (kinde) └── HTML-defined prefix (data) ``` Example HTML: ```html <a class="kinde-text-link" data-kinde-text-link="true" href="[url]"> Sign in </a> ``` Since components are the default unit of styling, layouts include a `layout` identifier in their style hook to distinguish them from components: ``` data-kinde-layout-button-group | | | | | | | └── Component/layout name (button group) | | └── Layout identifier | └── Prefix (kinde) └── HTML-defined prefix (data) ``` ### Variant Component or layout variants follow this structure, as shown in the **Button** component: ``` data-kinde-button-variant="primary | | | | | | | └── Variant (primary) | | └── Component/layout name (button) | └── Prefix (kinde) └── HTML-defined prefix (data) ``` Example HTML: ```html <button class="kinde-button kinde-button-variant-primary data-kinde-button="true data-kinde-button-variant="primary type="submit > <span class="kinde-button-text" data-kinde-button-text="true"> Save </span> </button> ``` ### Modifier Component or layout modifiers follow this structure, as shown in the **Text link** component: ``` data-kinde-text-link-is-external | | | | | | | └── Modifier (is-external) | | └── Component/layout name (text link) | └── Prefix (kinde) └── HTML-defined prefix (data) ``` Example HTML: ```html <a class="kinde-text-link data-kinde-text-link="true data-kinde-text-link-is-external="true href="[url] target="_blank rel="noopener noreferrer > Terms of use </a> ``` A component or layout can have multiple modifiers: ```html <a class="kinde-text-link kinde-text-link-is-inline data-kinde-text-link="true data-kinde-text-link-is-external="true data-kinde-text-link-is-inline="true href="[url] target="_blank rel="noopener noreferrer > Terms of use </a> ``` ### Child elements Child elements of components or layouts follow this structure, as shown in the **Recovery codes** component: ``` data-kinde-recovery-codes-code | | | | | | | └── Element name (code) | | └── Component/layout name (recovery codes) | └── Prefix (kinde) └── HTML-defined prefix (data) ``` Example HTML: ```html <ul class="kinde-recovery-codes" data-kinde-recovery-codes="true"> <li data-kinde-recovery-codes-item="true"> <code data-kinde-recovery-codes-code="true">4EA4356E3</code> </li> <li data-kinde-recovery-codes-item="true"> <code data-kinde-recovery-codes-code="true">954602631</code> </li> <li data-kinde-recovery-codes-item="true"> <code data-kinde-recovery-codes-code="true">A2C3C6D43</code> </li> <!-- [More codes…] --> </ul> ``` List structures (e.g., `<li>` elements) use the generic `item` identifier for consistency.

# Design - Customize with code - Styling with CSS

> Comprehensive guide for styling Kinde pages and widgets using CSS custom properties, settings, fallback values, and integration with the Kinde designer.

CSS styling, custom properties, settings, widget styling, CSS variables, fallback values, Kinde designer
design, customize-with-code, css, styling

Kinde pages and the widget are styled using standard CSS custom properties, collectively managed in 'settings'. Settings provide a simple way for you to customize the end-user experience, as you can override the [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) using your own CSS code. For example, you can: - Set the page’s base text color with `--kinde-base-color`. - Set the primary button’s background color with `--kinde-button-primary-background-color`. - Set the color of a form field’s invalid message with `--kinde-control-associated-text-invalid-message-color` (or use `--kinde-shared-color-invalid` for a more global approach). ## Hosting your CSS and other asset files We know you will want to use assets like stylesheets, fonts and images. Kinde does not currently offer hosting for these static assets and you will need to host them yourself. We recommend hosting them on servers that share the same domain as your custom domain. For example, if you are using the custom domain `auth.myapp.com` you could host your external fonts, images and CSS files at `assets.myapp.com` and they would be accessible in your code. ## Define settings in your CSS Kinde settings are standard CSS custom properties, making them easy to integrate into your custom CSS. You can also map your own design tokens or custom properties to Kinde settings for added consistency. To define settings in your CSS, scope them to the [`:root` pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:root): ```css :root { --kinde-base-background-color: hsl(0 100% 50% / 50%); --kinde-base-color: hsl(50 80% 40%); --kinde-base-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; --kinde-base-font-weight: 700; --kinde-button-primary-background-color: var(--kinde-base-color); --kinde-button-primary-color: hsl(0, 0%, 100%); --kinde-alert-banner-error-background-color: hsl(0, 100%, 27%); --kinde-alert-banner-error-color: hsl(0, 0%, 100%); } ``` ### Apply your styles To apply custom styles, you need to load your custom CSS **after** the Kinde required CSS in the HTML `<head>`. This ensures your styles will apply on top of the default styles. ### Include the Kinde required CSS Kinde’s required CSS provides the default styles for the widget and defines all Kinde settings. Without it, the widget will not function correctly. You can include it using the `getKindeRequiredCSS()` helper method from the `@kinde/infrastructure` package: ```js import {getKindeRequiredCSS} from "@kinde/infrastructure"; ``` Once imported, call this function inside the HTML `<head>` of your page to load the necessary styles. For example, to load your custom CSS after the Kinde required CSS using an external stylesheet: ```html <html> <head> {getKindeRequiredCSS()} <link rel="stylesheet" href="/custom_styles.css" /> </head> </html> ``` ## Available settings Most styles (individual CSS properties) have a corresponding setting that can be defined or overridden in your custom CSS. For a full list of available settings, see [Types of settings](#types-of-settings). For example, here’s the CSS for the **Alert banner** component: ```css .kinde-alert-banner { background-color: var(--kinde-alert-banner-error-background-color); border: var(--kinde-alert-banner-border-width, 0.0625rem) var(--kinde-alert-banner-border-style, solid) var(--kinde-alert-banner-error-border-color); border-radius: var(--kinde-alert-banner-border-radius, 0.5rem); color: var(--kinde-alert-banner-error-color); display: var(--kinde-alert-banner-display, flex); gap: var(--kinde-alert-banner-gap, 1rem); padding: var(--kinde-alert-banner-padding, 1.5rem); } ``` ### Non-customizable styles Not all styles can be overridden using settings. Some styles are intentionally hardcoded in Kinde to ensure functionality, usability, and accessibility. There are two main categories of non-customizable styles: **Functional styles** - Styles that are necessary for proper functionality and accessibility. These prevent the UI from breaking and ensure a smooth user experience. Examples include: - Preventing interactions using [`pointer-events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events), such as disabling an element with `pointer-events: none;`. - Enforcing correct mouse cursors with [`cursor`](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor), such as `cursor: not-allowed;` for disabled elements. - Managing visibility with [`display`](https://developer.mozilla.org/en-US/docs/Web/CSS/display) to correctly show or hide elements. - Applying accessibility-related styles, such as visually hiding elements while keeping them screen-reader accessible or ensuring compliance with user preferences like "reduced motion.” **Expected styles** – Styles that are widely expected and do not typically require customization. Examples include: - The **Card** component’s “is-content-center-aligned” modifier applies `text-align: center;` because the modifier specifically exists for centering the content. Allowing other alignments like "left" or "right" would contradict its purpose. - The **Button** component removes underlines from links (`<a>`) using `text-decoration-line: none;`. This follows best practices, as underlined text generally indicates a standard hyperlink, not a button. ## Settings fallback values We explicitly define settings in the following cases: - **Color-related settings** - For managing light and dark mode with dynamic values. - **Reusability** - When a setting is referenced in multiple places. For settings that aren’t explicitly defined, styles are applied using [CSS custom property fallback values](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#custom_property_fallback_values). For example, the **Button** component’s font size appears as: ```css font-size: var(--kinde-button-font-size, 1rem); ``` This means: - If `--kinde-button-font-size` is undefined, the fallback value (`1rem`) will be used. - If you define `--kinde-button-font-size`, your value will override the fallback. <Aside> Settings that use fallback values won’t appear in the document root (`:root`) when inspecting in DevTools. If a setting isn’t visible under `:root`, [inspect the specific element instead](/design/customize-with-code/inspect-design-devtools/). </Aside> ## Styling via the Kinde designer You can control page elements and content (including elements of the widget) directly within Kinde, in the Kinde designer. See [Design brand experience defaults](/design/brand/global-brand-defaults/) for more details. Styles set this way act as fallbacks where something is undefined in your code. You can take a hybrid approach and define styles in Kinde as well as in code-defined settings. In fact, we recommend setting defaults via the Kinde designer, so that fallbacks exist for core elements. For example, in the widget’s CSS, the page background color is defined like this: ```css background-color: var(--kinde-base-background-color, var(--kinde-designer-base-background-color)); ``` This means: - `--kinde-base-background-color` is not defined by default. Instead, Kinde uses the fallback: `--kinde-designer-base-background-color`, which comes from the Kinde designer. - To override this style, you can either update it in Kinde designer or define `--kinde-base-background-color` in your custom CSS. <Aside type="warning"> Do not assign values to Kinde designer settings (`--kinde-designer-[...]`) in your custom CSS. These act as non-consumable fallbacks. Instead, control the style either in Kinde Designer or by using the associated default setting. </Aside> ## Types of settings Settings are categorized into distinct types based on their purpose and scope. Here’s an overview of the available types. ### Shared settings: `--kinde-shared-[…]` These settings are shared across the widget CSS to minimize redundancy. They serve as global fallbacks, applied only when a locally scoped setting is not defined. | Setting | Description | Applies to | | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------ | | `--kinde-shared-color-disabled-background` / `--kinde-shared-color-disabled-background-dark` | Sets the background color for disabled elements | Button component, Control checkable component, Control select text component | | `--kinde-shared-color-disabled-text` / `--kinde-shared-color-disabled-text` | Sets the text color for disabled elements | Button component, Text button component | | `--kinde-shared-color-invalid` / `--kinde-shared-color-invalid-dark` | Sets the color for invalid elements. Applied to borders or text for elements failing form validation (via `:user-invalid` or `[aria-invalid='true']`). | Composite field component, Control associated text component, Control checkable component, Control select text component | | `--kinde-shared-color-text-caption` / `--kinde-shared-color-text-caption-dark` | Sets the text color for captioned elements, using a lighter shade of body copy | Choice separator component, Control associated text component | | `--kinde-shared-color-text-label` / `--kinde-shared-color-text-label-dark` | Sets the text color for labeled text elements (e.g., `<label>` or `<dt>`), using a darker shade of body copy | Control label component, Key value pair component | | `--kinde-shared-font-small-size` / `--kinde-shared-font-small-letter-spacing` / `--kinde-shared-font-small-line-height` / `--kinde-shared-font-small-weight` | Sets the font styles for text smaller than the body copy | Base `small` element, Disclaimer component, Control associated text component | ### Base settings: `--kinde-base-[…]` These settings define foundational styles, such as fonts and colors, that apply globally to the page. They are typically scoped to the `body` element and a few other key global elements. | Setting | Description | Default | Applies to | | ---------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- | ----------------------------------------- | | `--kinde-base-scroll-behavior` | Sets the page’s scroll behavior using the CSS [`scroll-behavior`](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior) property. | “smooth” | `html` element | | `--kinde-base-block-size` | Sets the page’s width or height using the CSS [`block-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size) property, depending on the page’s [writing mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). | `100%` | `html` and `body` elements | | `--kinde-base-accent-color` / `--kinde-base-accent-color-dark` | Sets the accent color for specific form controls using the CSS [`accent-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/accent-color) property. **Note:** Matches the “checked” background color of the Control checkable component | Light: `#0f0f0f` | | Dark: `#0054f0` | `body` element | | `--kinde-base-background-color` / `--kinde-base-background-color-dark` | Sets the page’s background color using the CSS [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) property. **Note:** Falls back to [Kinde's admin brand settings](https://docs.kinde.com/design/pages/design-your-welcome-pages/#set-brand-colors-for-page-elements) if not defined. | Light: `#ffffff` | | Dark: `#0f0f0f` | `body` element | | `--kinde-base-color` / `--kinde-base-color-dark` | Sets the page’s text color using the CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color) property | Light: `#2b2b2b` | | Dark: `#dbdbdb` | `body` element | | `--kinde-base-font-family` | Sets the page’s font family using the CSS [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property | “Inter, 'CustomSystemFontStack’” | `body` element | | `--kinde-base-font-kerning` | Sets the page’s font kerning using the CSS [`font-kerning`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning) property | “normal” | `body` element | | `--kinde-base-font-size` | Sets the page’s font size using the CSS [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) property. Note: All other rem-based settings are derived from this value. | `1rem` | `body` element | | `--kinde-base-moz-osx-font-smoothing` | Sets the page’s font smooth using the non-standard Firefox CSS [`-moz-osx-font-smoothing`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth) property | “grayscale” | `body` element | | `--kinde-base-webkit-font-smoothing` | Sets the page’s font smooth using the non-standard WebKit CSS [`-webkit-font-smoothing`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth) property | “antialiased” | `body` element | | `--kinde-base-font-synthesis` | Sets the page’s font synthesis using the CSS [`font-synthesis`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis) property | “none” | `body` element | | `--kinde-base-font-variant-ligatures` | Sets the page’s font ligatures and contextual forms using the CSS [`font-variant-ligatures`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures) property | “common-ligatures contextual” | `body` element | | `--kinde-base-font-variant-numeric` | Sets the page’s font glyphs for numbers, fractions, and ordinal markers using the CSS [`font-variant-numeric`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric) property | “oldstyle-nums proportional-nums” | `body` element | | `--kinde-base-font-weight` | Sets the page’s font weight using the CSS [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) property | `400` | `body` element | | `--kinde-base-letter-spacing` | Sets the page’s letter spacing using the CSS [`letter-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) property | `-.005em` | `body` element | | `--kinde-base-line-height` | Sets the page’s line height using the CSS [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) property | `1.5` | `body` element | | `--kinde-base-overflow-wrap` | Sets the page’s text overflow using the CSS [`overflow-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap) property | “break-word” | `body` element | | `--kinde-base-tab-size` | Sets the page’s tab character width using the CSS [`tab-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size) property | `4` | `body` element | | `--kinde-base-focus-border-radius` | Sets the border radius of the page’s focus indicator using the CSS [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius) property. Note: If the focused element has a custom radius, the focus indicator will match it. | `.125rem` | `:focus-visible` | | `--kinde-base-focus-outline-width` | Sets the outline width of the page’s focus indicator using the CSS [`outline-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-width) property | `.125rem` | `:focus-visible` | | `--kinde-base-focus-outline-style` | Sets the outline style of the page’s focus indicator using the CSS [`outline-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-style) property | “solid” | `:focus-visible` | | `--kinde-base-focus-outline-color` | Sets the outline color of the page’s focus indicator using the CSS [`outline-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-color) property | Light: `#0054f0` | | Dark: `#94b9ff` | `:focus-visible` | | `--kinde-base-focus-outline-offset` | Sets the outline offset of the page’s focus indicator using the CSS [`outline-offset`](https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset) property | `.125rem` | `:focus-visible` | | `--kinde-base-focus-transition` | Sets the transition of the page’s focus indicator using the CSS [`transition`](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) property. | “outline-offset 150ms cubic-bezier(.25, 0, .1, 1)” | `:focus-visible` | | `--kinde-base-font-family-mono` | Sets the font family for code-related elements using the CSS [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property | “ui-monospace, SFMono-Regular, ‘SF Mono’, Consolas, ‘Liberation Mono’, Menlo, monospace” | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-font-kerning-mono` | Sets the font kerning for code-related elements using the CSS [`font-kerning`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning) property | “none” | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-font-size-mono` | Sets the font size for code-related elements using the CSS [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) property | `--kinde-base-font-size` | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-font-variant-ligatures-mono` | Sets the font ligatures and contextual forms for code-related elements using the CSS [`font-variant-ligatures`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatures) property | “contextual” | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-font-variant-numeric-mono` | Sets the font glyphs for numbers, fractions, and ordinal markers for code-related elements using the CSS [`font-variant-numeric`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric) property | “lining-nums tabular-nums slashed-zero” | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-font-weight-mono` | Sets the font weight for code-related elements using the CSS [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) property | `500` | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-letter-spacing-mono` | Sets the letter spacing for code-related elements using the CSS [`letter-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) property | “normal” | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-line-height-mono` | Sets the line height for code-related elements using the CSS [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) property | `1.5` | `code`, `kbd`, `samp`, and `pre` elements | | `--kinde-base-pre-overflow-x` | Sets the `pre` element’s horizontal overflow using the CSS [`overflow-x`](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x) property | “auto” | `pre` element | | `--kinde-base-strong-font-weight` | Sets the font weight for emphasized text elements using the CSS [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) property | `500` | `b` and `strong` elements | ### Component settings: `--kinde-[component_name]-[…]` These settings are specific to self-contained UI patterns within the widget, such as buttons, cards, and form controls. Components are the default unit of styling, so they do not require an explicit `component` type indicator. Component settings are numerous, as they represent the primary method for styling the widget. To explore them, use DevTools. See [Inspect using DevTools](/design/customize-with-code/inspect-design-devtools/) for instructions. ### Layout settings: `--kinde-layout-[…]` These settings are specific to layouts within the widget. Unlike components, which define specific UI patterns, layouts determine the arrangement of components—such as spacing between them—to ensure a consistent structure across the widget. Like component settings, layout settings are numerous. To explore them, use DevTools. See [Inspect using DevTools](/design/customize-with-code/inspect-design-devtools/) for instructions. ## Naming structures Settings follow a consistent naming structure to make them easy to identify and understand. Most settings are structured as follows. This sets the background color of the page using the CSS `background-color` property: ``` --kinde-base-background-color | | | | | └── Property (background-color) | └── Type (base) └── Prefix (kinde) ``` Here’s a more complex setting. This sets the background color in dark mode for the page using the CSS `background-color` property. ``` --kinde-base-background-color-dark | | | | | | | └── Dark mode suffix | | └── Property (background-color) | └── Type (base) └── Prefix (kinde) ``` This sets the border width for the “primary” variant of the **Button** component using the CSS `border-width` property. ``` --kinde-button-primary-border-width | | | | | | | └── Property (border-width) | | └── Variant (primary) | └── Type (component) └── Prefix (kinde) ``` This sets the text-decoration-line style (underline, overline, etc.) of the **Text link** component when hovered using the CSS `text-decoration-line` property. ``` --kinde-text-link-text-decoration-line-is-inline-hover | | | | | | | | | └── State (hover) | | | └── Modifier (is-inline) | | └── Property (text-decoration-line) | └── Type (component) └── Prefix (kinde) ``` ### Prefixes All settings start with the `--kinde` prefix to ensure uniqueness and prevent conflicts with custom-defined CSS. ### Type The second part indicates the [type of setting](#types-of-settings). ### [Variant/Element] / Property / Modifier / State Each setting includes a combination of **[variant/element]**, **property**, **modifier**, and **state**, depending on the level of specificity required. Every setting always includes a **property**. #### [Variant/Element] **Variant** - Certain components, such as the **Button** component, have predefined variants. Variants define distinct styles or versions of a component. For example, the background colors for the **Button** component’s variants are defined as: - **Primary variant:** `--kinde-button-primary-background-color` - **Secondary variant:** `--kinde-button-secondary-background-color` - **Uncontained variant:** `--kinde-button-uncontained-background-color` **Element** - For components with child elements, element-specific identifiers are used to distinguish settings that apply to the component's root element versus its child elements. For example, here are some settings for the **Key value pair** component’s "key" element (the child `<dt>` element): - `--kinde-key-value-pair-key-color` - `--kinde-key-value-pair-key-font-weight` Some identifiers can be more generic. For example, list structures (e.g., `<li>` elements) use the generic **"item"** identifier: - `--kinde-key-value-pair-item-margin-block-end` Another common generic identifier is **"child"**, representing unnamed child elements typically targeted with the [universal selector (`*`) CSS selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors): - `--kinde-fallback-action-child-display` <Aside> "Variant" and "Element" can coexist when a component has settings for a child element that are scoped to a specific variant. The variant identifier always comes before the element identifier. For example, the setting that controls the size of the **Composite field** component’s nested select element when in the "phone-number" variant is defined as: `--kinde-composite-field-phone-number-control-select-inline-size` </Aside> #### Property Each setting corresponds to a standard CSS property. For example, settings related to text color, such as `--kinde-base-color`, match the associated `color` property. This makes the settings intuitive and easy to understand. <Aside> An exception to this applies to settings related to element spacing. Instead of using specific CSS properties (like `margin-block-end`), a generic “spacing” term is used. This helps identify the common concept of spacing across multiple properties (e.g., `margin`, `gap`). Spacing refers to the whitespace **external** to an element, while **internal** spacing is defined with the `padding` property. For example: - `--kinde-control-label-spacing` defines spacing after the **Control label** component. More specific variants are: - **“spacing-content”** – Defines spacing between child elements, or the “content” (e.g., `--kinde-card-spacing-content`). - **“spacing-[element_name]”** - Defines spacing for a specific child element (e.g., `--kinde-layout-widget-spacing-footer`). </Aside> #### Modifier Sometimes, styles include modifiers, which are small adjustments to the default style. For example, the **Button** component includes the “is-content-width” modifier: `--kinde-button-inline-size-is-content-width`, which adjusts the button's width to match its content, as opposed to using the default width based on its container. #### State For components with interactive elements, such as buttons, links, and form controls, state-specific settings apply when the element is in a particular state. For example, the states for the **Text link** component’s text color are defined as: - **Active state:** `-kinde-text-link-color-active` - **Focus state:** `-kinde-text-link-color-focus` - **Hover state:** `-kinde-text-link-color-hover` - **Visited state:** `-kinde-text-link-color-visited` States are defined using [CSS pseudo-classes](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes). Common states include: - [**Active** (`:active`)](https://developer.mozilla.org/en-US/docs/Web/CSS/:active) – Styles applied when the element is being activated, such as when a user clicks, taps, or presses a key that triggers the element. - [**Focus** (`:focus-visible`)](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) – Styles applied when the element receives keyboard or programmatic focus. <Aside> **Kinde uses `:focus-visible` exclusively instead of `:focus` to provide a better user experience.** `:focus-visible` ensures that focus indicators appear only when necessary—typically during keyboard or other non-mouse interactions. In contrast, `:focus` applies whenever an element gains focus, including mouse clicks and taps, which can lead to visual confusion and make the UI harder to interpret. </Aside> - [**Hover** (`:hover`)](https://developer.mozilla.org/en-US/docs/Web/CSS/:hover) – Styles applied when the element is hovered by a mouse pointer. ### Dark mode suffix Settings for defining the widget’s dark mode colors include the “dark” term appended to the end of the setting. For example, the **Alert banner** component’s dark mode settings are defined as: - **Background color:** `--kinde-alert-banner-error-background-color-dark` - **Border color:** `--kinde-alert-banner-error-border-color-dark` - **Text color:** `-kinde-alert-banner-error-color-dark` <Aside> Light and dark themes are managed in Kinde. See [Design brand experience defaults](/design/brand/global-brand-defaults/) for more details. For theme styling to work in your repo, see HTML data attributes [(Style hooks) > Apply theme styles](/design/customize-with-code/style-with-style-hooks/). </Aside> ### Shared settings Shared settings use a unique naming structure because they apply to broader styling aspects rather than specific components or elements. Unlike other settings, they do not follow the **[Variant/Element] / Property / Modifier / State** structure. Instead, these settings are categorized by general UI styling aspects. Currently, the main categories are: - **“Color”:** `--kinde-shared-color-[…]` - **“Font”:** `--kinde-shared-font-[…]` After the category, the remaining structure varies depending on the styling need. For example, state-based color settings follow this format: - `--kinde-shared-color-[state]-[element_part]` **Examples:** - `--kinde-shared-color-disabled-background` – Sets the background color for disabled elements. - `--kinde-shared-color-disabled-text` – Sets the text color for disabled elements. - `--kinde-shared-color-invalid` – Sets the color of all parts of an element affected by an “invalid” state, such as background, border, or text.

# Design - Customize with code - Understand Kinde page customization

> Comprehensive guide for understanding Kinde page customization including React templating, directory structure, route mapping, and server-rendered JavaScript implementation.

page customization, Kinde widget, React templating, directory structure, kinde.json, route mapping, server rendering
design, customize-with-code, page-design

The 'page' is the whole user interface rendered by the browser, including everything that surrounds the Kinde widget. You can provide your own markup to influence the page design. There's also a handy placeholder so you can tell us where you want the widget rendered. You define a page by default exporting a function from a `page.[ts/tsx/js/jsx]` file. ```jsx "use server"; import React from "react"; import { renderToString } from "react-dom/server.browser"; import { getKindeRequiredCSS, getKindeRequiredJS, getKindeNonce, getKindeWidget, getKindeCSRF, getLogoUrl, getSVGFaviconUrl, setKindeDesignerCustomProperties, getKindeRegisterUrl } from "@kinde/infrastructure"; const Layout = async ({request, context}) => { return ( <html lang={request.locale.lang} dir={request.locale.isRtl ? "rtl" : "ltr"}> <head> <meta charset="utf-8" /> <meta name="viewport" content="width=device-width, initial-scale=1" /> <meta name="robots" content="noindex" /> <meta name="csrf-token" content={getKindeCSRF()} /> <title>{context.widget.content.page_title}</title> <link rel="icon" href={getSVGFaviconUrl()} type="image/svg+xml" /> {getKindeRequiredCSS()} {getKindeRequiredJS()} <style nonce={getKindeNonce()}> {`:root { ${setKindeDesignerCustomProperties({ baseBackgroundColor: "#fff", baseLinkColor: "#230078", buttonBorderRadius: "0.5rem", primaryButtonBackgroundColor: "#230078", primaryButtonColor: "#fff", inputBorderRadius: "0.5rem" })}} `} </style> <style nonce={getKindeNonce()}> {` :root { --kinde-base-color: rgb(12, 0, 32); --kinde-base-font-family: -apple-system, system-ui, BlinkMacSystemFont, Helvetica, Arial, Segoe UI, Roboto, sans-serif; } [data-kinde-control-select-text]{ background-color: rgb(250, 250, 251); } .c-container { padding: 1.5rem; display: grid; gap: 230px; } .c-widget { max-width: 400px; width: 100%; margin: 0px auto; } .c-footer { border-top: 1px solid rgba(12, 0, 32, 0.08); padding-block: 1.5rem; display: flex; justify-content: space-between; } .c-footer-links { display: flex; gap: 1.5rem; } `} </style> </head> <body> <div data-kinde-root="/admin" class="c-container"> <header class="c-header"> <img src={getLogoUrl()} alt={context.widget.content.logo_alt} /> </header> <main> <div class="c-widget"> <h1>{context.widget.content.heading}</h1> <p>{context.widget.content.description}</p> <div>{getKindeWidget()}</div> </div> </main> <footer class="c-footer"> <p class="c-no-account-link"> No account? <a href={getKindeRegisterUrl()}>Sign up for free</a> </p> <ul class="c-footer-links"> <li> <a href="">Privacy</a> </li> <li> <a href="">Terms</a> </li> <li> <a href="">Get help</a> </li> </ul> </footer> </div> </body> </html> ); }; export default async function Page(event) { const page = await Layout({...event}); return renderToString(page); } ``` ### Supported templating languages Kinde uses server-rendered JavaScript to compose custom pages and has a range of templating options available: - React - Liquid - JavaScript - TypeScript <Aside> If you are using React for templating, note this code is rendered on the server. This means client side functions for example, `useEffect`, will not be available. </Aside> ## Page structure in the Git directory The code for your pages must live in a GitHub repository (other git providers to be supported later). Your directory structure in the repo is critical to Kinde being able to run your design code. The directory structure for a Kinde custom code repo should be as follows: ``` myApp/ ├── kindeSrc/ │ └── environment/ │ └── pages/ │ └── (kinde)/ │ └── (default)/ │ └── page.tsx ├── package.json └── kinde.json ``` ## Kinde.json The `kinde.json` file defines the config for all custom code in Kinde, including workflows and custom pages. A typical config file will look as follows: ```json { "rootDir": "kindeSrc", -- the directory where Kinde should look for your code "version": "2024-12-09" -- the last breaking change } ``` `rootDir` - the directory where Kinde will look for your custom code. Defaults to `kindeSrc` so that you can include Kinde code alongside existing projects. Change this if you wish the code to live in another directory. `version` - based on the date when the API version was released. Any breaking changes will be released in a new API version. ## Which pages can I customize? All Kinde hosted pages can be customized and use url route mapping to determine which template to use. If a specific mapped route does not exist, a special route called `(default)` will be rendered. Set up the `(default)` page to ensure all your pages follow this design unless you have overridden them with custom code. <Aside type="warning"> Once you start customizing pages, it's on you not to break them. We recommend always applying custom code to pages in a non-prod environment first. </Aside> ### Common pages These are the most frequently used or fallback pages. - `(default)` – Fallback template used when a specific page is not found. - `(register)` – The sign-up page. - `(login)` – The sign-in page. - `(index)` – Landing page when visiting the root domain (e.g. `https://<yourdomain>.kinde.com`). ### Authentication Pages involved in initiating authentication flows. - `(register)` – The sign-up page. - `(login)` – The sign-in page. - `(sso_home_realm)` – Displayed when a user selects “Continue with SSO” to choose their identity provider. - `(provide_email)` – Shown when using a social login provider that does not return an email address. - `(clickwrap)` – Displays terms and conditions or agreements that must be accepted. ### Password flows Used in password-based authentication and recovery. - `(verify_password)` – Shown during sign-in when using a password-based method. - `(set_password)` – Shown during a password-based sign-up flow. - `(reset_password_verify_email_otp)` – First step of the reset flow where the user verifies identity using an email OTP. - `(reset_password)` – Password entry screen shown after verification during the reset flow. ### One-Time Passcode (OTP) verification Used in sign-in and sign-up flows with OTP (email or phone). - `(sign_in_use_email_otp)` – Sign in with a one-time email code. - `(sign_up_use_email_otp)` – Sign up with a one-time email code. - `(sign_in_sign_up_use_phone_otp)` – Sign in or sign up with a one-time phone code. ### Multi-Factor Authentication (MFA) Shown after primary authentication when MFA is required or being set up. - `(mfa_method_selection)` – User selects their preferred MFA method. - `(mfa_authenticator_app)` – Setup screen for using an authenticator app. - `(mfa_setup_email)` – Setup screen for email-based MFA. - `(mfa_setup_phone)` – Setup screen for phone-based MFA. - `(mfa_use_email_otp)` – Enter a one-time email code for MFA. - `(mfa_use_phone_otp)` – Enter a one-time phone code for MFA. - `(mfa_use_recovery_code)` – Enter a recovery code if unable to use other MFA methods. - `(mfa_view_recovery_codes)` – View and save MFA recovery codes. ### Billing Pages related to choosing a plan and making a payment. - `(choose_plan)` – User selects a subscription plan. - `(collect_payment_details)` – User enters billing information. - `(subscription_success)` – Confirmation page shown after successful subscription. ### Early access Pages for gated access to your product before full launch. - `(request_access)` – Request early access to your product. - `(request_access_success)` – Confirmation page after a request is submitted. ### Error pages Shown when a user encounters an error state. - `(account_locked)` – The user’s account has been locked. - `(account_not_found)` – No account was found for the entered credentials. - `(invalid_redirect_url)` – The redirect URL is invalid or not on the allowed list. - `(error)` – Generic error screen. If you want specific customization for a page not listed here, reach out and let us know. ## Set the page default export function Your `page.[ext]` file should contain a default export. It doesn’t matter what this is called, but the general convention is to call it `Page`. This is provided a single `event` argument which is an object containing 2 keys `context` and `request`. The `request` key contains information about the request to the page and includes the following sub-objects: - `authUrlParams` contains useful info from authorization request url - `orgCode` - the requested organization code e.g `org_12345` - `state` - the state parameter in the auth url - `clientId` - the `client_id` query param from the auth url - this is the application ID - `redirectUri` - the `redirect_uri` query param from the auth url - `locale` - localization data - `isRtl` - if the requested language should be rendered right to left - `lang` - the code for the requested language - `route` - `context`- the requested widget `CX_m` e.g `register` | `choose_organization` - `flow` - whether the flow is a sign in or sign up flow e.g `register` | `login` - `path` - the path of the request `auth` | `account`| `\` The top level `context` key object contains information about the page itself, like the page state and content. - `domains` contains relevant domain info - `kindeDomain` your domain on Kinde e.g https://example.kinde.com - `widget` contains data generated from the widget - `content` an object containing page content - translated and with placeholders replace - `pageTitle` the title of the page commonly displayed in the `<title>` tag for showing in the browser tab - `heading` the main heading for the page - `description` the page description - `logoAlt` the alt text for your company logo ## Page settings Sometimes additional information needs to be passed to Kinde from your page. You can use the page settings object for this. ```js export const pageSettings = {}; ``` The main use case for this is when you want to make bindings available to your page, for example access to your Kinde environment variables. ```js export const pageSettings = { bindings: { "kinde.env": {} } }; ``` This allows you to have fine grained control over what your pages can access.

# Design - Pages - User consent for marketing on sign up

> Guide for adding marketing consent checkboxes to sign-up pages including feature configuration, label customization, and user consent status management.

marketing consent, user consent, sign up, checkbox, properties, opt-in, marketing communications
design, pages, marketing

If you want users to opt-in for marketing communications when they sign up to your app, you can add a consent box to the sign up screen. The checkbox option is a Kinde property that shows in the user’s profile if they consent or not. How you manage sending marketing material to the user, and how you allow them to opt out is up to you as a business, and is not part of this feature. ## Add the checkbox to the sign up page You need to switch this on for each application you want it to appear for. **Switch on the feature** 1. In Kinde, go to **Settings > Applications > [Your application]**. 2. On the **Details** page, scroll to the **Authentication experience** section. 3. Switch on the **Add marketing consent checkbox** option. **Update the checkbox label** 1. Go to **Design > Page content**. 2. Select the **Sign up page** from the dropdown. 3. Scroll to the **Label for requesting marketing consent** field and make the required changes. 4. Select Select **Save**. 5. To preview, select **Sign up page** in the menu and select **Preview**. ## View or change the consent status for a user 1. In Kinde, go to **Users** and find the user who’s profile you want to view. 2. Open their profile. 3. In the left menu, select **Properties**. 4. Find the **Yes to marketing** or `kp_marketing_consent` property. It will either say True = They agreed; False = They did not agree. 5. If you want to change the property value: a. select the edit (pencil) icon. b. In the window that appears, change the value by selecting or deselecting the checkbox. c. Select **Save**. 6. Select **Save**.

# Design - Pages - Manage page layouts

> Guide for managing page layouts including authentication pages, background customization, widget positioning, and additional auth element configuration.

page layout, auth pages, sign in page, sign up page, passwordless, background, widget positioning, custom domain
design, pages, layout

If you are not using [custom code for your page designs](/design/customize-with-code/customize-with-css-html/), you can still change the layout of pages (including auth pages), to control elements such as the background, alignment and position of page elements and widget. After you’ve set the global brand, view how it looks on individual pages, and make additional changes. You can further customize: - sign in page - what a user sees each time they sign in to their account - sign up page - what a user sees when they first sign up to your business - confirm sign in page (if using [passwordless](/authenticate/authentication-methods/passwordless-authentication/) authentication) - where a user enters the passwordless email code each time they sign in. - Confirm sign up page (if using [passwordless](/authenticate/authentication-methods/passwordless-authentication/) authentication) - where a user enters the passwordless email code the first time they sign up. - Emails - for when you send email from the company. - Subscription page - the sign up page for new subscribers (if you use this) - Request access page - when you're collecting a waiting list <Aside> To manage page design using your own CSS code, see [page design with code](/design/customize-with-code/understand-page-design/). </Aside> ### To customize pages 1. Select the page you want to view or edit from the left menu. 2. Depending on the type of page you are viewing, you can edit, the background image, page layout, content, and more. 3. Select **Save** to apply changes. 4. Select **Preview** in the top right to view changes. ## Other cusomizations you might want to apply - [Use your own domain instead of Kinde’s](/build/domains/pointing-your-domain/) - [Manage the authentication experience for users](/authenticate/custom-configurations/authentication-experience/) - [Add a marketing consent checkbox to the sign up page](/design/pages/marketing-consent/) - [CSS page design for the auth experience](/design/customize-with-code/customize-with-css-html/) ### Enable/disable additional auth elements 1. In Kinde, go to **Settings > Applications** and select **View details** on your application. 2. Scroll down to the **Authentication experience** section and make any changes you want. 3. Select **Save**.

# Design - Pages - Set up the request access page

> Guide for setting up request access pages including design configuration, success URL setup, content customization, and contact management for lead generation.

request access page, lead generation, success link URL, page design, access requests, contact management, custom domain
design, pages, lead-generation

When you are a brand new company and still building your application, you might want new users to request access to your product. People who customize pages also like to [use their own domain instead of Kinde’s](/build/domains/pointing-your-domain/). ## **Design and activate the request access page** 1. Go to **Design > Lead generation > Request access**. 2. Make your design and layout selections. For tips on how to change things, see [Design your welcome pages](/design/brand/global-brand-defaults/). 3. Enter the **Success link URL**. 4. Select **Preview** to view how the page will look. 5. Once you like it, switch the **Page details** button to **Live** and then select **Save**. 6. To change the content on the page, go to **Page content** in the menu, and select the **Request access** page. 7. Make the changes you want in all the relevant languages and **Save**. 8. You'll need to separately set up the **Request Access URL** on your website. ## Manage request access contacts As you collect contacts who want access to your product, you can manage them in the [Access requests list](/build/set-up-options/manage-access-requests/) in Kinde. You can also easily convert these contacts to users.

# Design - Pages - Set up a subscription form

> Guide for setting up subscription forms including form customization, embed code generation, and subscriber management for lead generation campaigns.

subscription form, lead generation, embed code, HTML, CSS, JavaScript, subscribers, form customization
design, pages, lead-generation

If you want to collect details from site visitors and subscribe to them to receive communications from your business, you can set up a form using Kinde. ## Customize the subscription form 1. Go to **Design > Lead generation > Subscribe**. 2. In the panel on the right, make any content changes you want. 3. Enter the URL for the site where the form will appear. Note that you only need to include the root part of the URL, not the specific pages (e.g. `https://kinde.com`). 4. Select **Save and generate code**. 5. Use this code to add the subscription page to your website. - `HTML` - Add this to your site page to embed the form. - `CSS` - Copy into your page header. To apply your own style, add a style block and use custom class names to apply your designs. - `JS` - Copy and paste this somewhere in the page markup. Putting it after the provided HTML markup (above) is ideal. ## **View and manage subscribers** Once the form is activated, in the main menu of Kinde, go to **Users** and select **Subscribers** to view a list of people who have signed up. You can [add, delete and convert subscribers into users](/manage-users/add-and-edit/manage-subscribers/).

