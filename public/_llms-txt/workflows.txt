---
page_id: 4e5f6a7b-8c9d-0e1f-2a3b-4c5d6e7f8a9b
title: Kinde Documentation - Workflows
description: "Complete documentation for Kinde's workflows section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - workflows
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - workflows
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's workflows section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Workflows

This is the complete documentation for Kinde's workflows section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Workflows - About workflows - About workflows

> Learn about Kinde workflows - custom code execution triggered by Kinde events that allows unlimited customization of authentication flows, token generation, and external integrations using TypeScript/JavaScript.

workflows, customization, triggers, TypeScript, JavaScript, token customization, external integrations
workflows, about-workflows, customization

In Kinde, workflows exist to give you (almost) unlimited power over how Kinde works for you. Develop code in your own repo, and push it to a Kinde workflow, where we execute it in ways that you define, triggered by Kinde events. See the [Triggers](/workflows/example-workflows/workflow-user-post-auth/) section for the whole list of triggers. We will add more (and allow you to create your own) as we develop the feature. ## When to use a workflow - You want Kinde to do something that it doesn’t currently do. - You want to customize an access or ID tokens in ways that we don’t support out of the box. For example, you want to fetch data from an external system to include it as claims in your tokens. - You want to reduce the size and weight of tokens, remove things that you don’t need. - You want to change the data type of a claim. For example changing from an array to a space delimited string. ## Basic workflow rules - Workflow actions need to be written in TypeScript or plain JavaScript - Filenames must end in the word 'Workflow' for Kinde to recognize them as containing workflow code. For example, `MFAWorkflow.ts` or `PreauthorizationWorkflow.jsx` - File extensions should be .ts, .js, .tsx or .jsx - Each trigger can only have one workflow - Only Kinde-defined triggers are available (for now) ## Explanation of methods and code helpers We’ve provided a set of methods and examples in our [Infrastructure repo in GitHub](https://github.com/kinde-oss/infrastructure). The README contains a guide to creating the code that powers your workflows.

# Workflows - Bindings - kinde.accessToken

> Learn how to modify access tokens for the current user using the kinde.accessToken binding, including adding custom claims that are included in the token returned to the client.

access token, custom claims, token modification, setCustomClaim, infrastructure library
workflows, bindings, tokens

The `kinde.accessToken` binding lets you modify access tokens for the current user. When you add custom claims, they are included in the access token returned to the client. ## Methods ### `setCustomClaim(name: string, value: any): void` Adds a custom claim to the access token. The claim will be available when the token is returned to the client. ## Available in workflows - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.accessToken": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides type-safe access token modification: ```js import { accessTokenCustomClaims } from "@kinde/infrastructure"; export default async function (event: onUserTokenGeneratedEvent) { const accessToken = accessTokenCustomClaims<{ hello: string; ipAddress: string; }>(); accessToken.hello = "Hello there!"; accessToken.ipAddress = event.request.ip; }; ``` ### Using the low-level API If you're not using the infrastructure library, you can modify the access token directly: ```js kinde.accessToken.setCustomClaim("hello", "Hello there!"); kinde.accessToken.setCustomClaim("ipAddress", event.request.ip); ```

# Workflows - Bindings - kinde.auth

> Learn how to control authentication flows using the kinde.auth binding, including denying access to users based on custom logic in various workflow contexts.

auth, authentication, user management, infrastructure library
workflows, bindings, authentication

The `kinde.auth` binding affects the auth flow. ## Methods ### `denyAccess(reason: string): void` Prevent the user from accessing the application. ## Available in workflows - [user:pre_registration](/workflows/example-workflows/pre-user-registration-workflow/) - [user:post_authentication](/workflows/example-workflows/workflow-user-post-auth/) - [user:new_password_provided](/workflows/example-workflows/new-password-provided-workflow/) - [user:existing_password_provided](/workflows/example-workflows/existing-password-provided-workflow/) - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) - [user:pre_mfa](/workflows/example-workflows/pre-mfa-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.auth": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides a type-safe helper: ```js import { denyAccess } from "@kinde/infrastructure"; export default async function (event: onUserTokenGeneratedEvent) { if (event.request.ip.startsWith("192")) { denyAccess("You are not allowed to access this resource"); } } ``` ### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js kinde.auth.denyAccess("You are not allowed to access this resource"); ```

# Workflows - Bindings - kinde.env

> Learn how to access environment variables and configuration settings in your workflows using the kinde.env binding, including handling both regular and secret variables.

environment variables, configuration, secrets, env, infrastructure library
workflows, bindings, environment

The `kinde.env` binding lets you access environment variables in your workflows that you have previously set up in the [Kinde admin area](/build/env-variables/add-manage-env-variables/) or via the [management API](https://docs.kinde.com/kinde-apis/management/#tag/environment-variables/post/api/v1/environment_variables). ## Methods ### `getEnvironmentVariable(key: string): {value: string, isSecret: boolean}` Get the value of an environment variable. The value is returned as an object with two properties: `value` (the value of the variable) and `isSecret` (a boolean indicating whether the variable is a secret). Secret variables will be redacted in the logs. ## Available in workflows - [user:pre_registration](/workflows/example-workflows/pre-user-registration-workflow/) - [user:post_authentication](/workflows/example-workflows/workflow-user-post-auth/) - [m2m:token_generation](/workflows/example-workflows/m2m-token-generation-workflow/) - [user:new_password_provided](/workflows/example-workflows/new-password-provided-workflow/) - [user:existing_password_provided](/workflows/example-workflows/existing-password-provided-workflow/) - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) - [user:pre_mfa](/workflows/example-workflows/pre-mfa-workflow/) - [user:plan_selection](/workflows/example-workflows/plan-selection-workflow/) - [user:plan_cancellation_request](/workflows/example-workflows/plan-cancellation-request-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.env": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides type-safe environment variable access: ```js import {getEnvironmentVariable} from "@kinde/infrastructure"; const myVar = getEnvironmentVariable("MY_VAR")?.value; ``` ### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js kinde.env.getEnvironmentVariable("MY_VAR")?.value; ```

# Workflows - Bindings - kinde.fetch

> Learn how to make external API calls including to the Kinde Management API using the kinde.fetch binding, with support for GET/POST requests and JSON responses.

fetch, HTTP requests, API calls, external APIs, Management API, infrastructure library
workflows, bindings, HTTP requests

The `kinde.fetch` binding allows you to make external API calls including to the Kinde Management API. If you are passing sensitive data we recommend you instead use [kinde.secureFetch](/workflows/bindings/secure-fetch-binding/) where the POST body is encrypted. ## Available in workflows - [user:pre_registration](/workflows/example-workflows/pre-user-registration-workflow/) - [user:post_authentication](/workflows/example-workflows/workflow-user-post-auth/) - [m2m:token_generation](/workflows/example-workflows/m2m-token-generation-workflow/) - [user:new_password_provided](/workflows/example-workflows/new-password-provided-workflow/) - [user:existing_password_provided](/workflows/example-workflows/existing-password-provided-workflow/) - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) - [user:pre_mfa](/workflows/example-workflows/pre-mfa-workflow/) - [user:plan_selection](/workflows/example-workflows/plan-selection-workflow/) - [user:plan_cancellation_request](/workflows/example-workflows/plan-cancellation-request-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.fetch": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides a type-safe fetch helper. Note: you will also need the [url](/workflows/bindings/url-binding/) binding enabled for the workflow as this is used under the hood. ```js import {fetch} from "@kinde/infrastructure"; export default async function Workflow(event) { const {data: ipDetails} = await fetch( `https://ipinfo.io/${event.request.ip}`, { method: "GET", responseFormat: "json", headers: {"Content-Type": "application/json"} } ); console.log(ipDetails); } ``` ### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js const res = await kinde.fetch(`https://ipinfo.io/${event.request.ip}`, { method: "GET", responseFormat: "json", headers: {"Content-Type": "application/json"} }); const {json} = res; console.log(json); ```

# Workflows - Bindings - kinde.idToken

> Learn how to modify ID tokens for the current user using the kinde.idToken binding, including adding custom claims that are included in the ID token returned to the client.

ID token, custom claims, token modification, setCustomClaim, infrastructure library
workflows, bindings, tokens

The `kinde.idToken` binding lets you modify ID tokens for the current user. When you add custom claims, these are included in the ID token returned to the client. ## Methods ### `setCustomClaim(name: string, value: any): void` Adds a custom claim to the ID token. The claim will be available when the token is returned to the client. ## Available in workflows - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.idToken": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides type-safe ID token modification: ```js import { idTokenCustomClaims } from "@kinde/infrastructure"; export default async function (event: onUserTokenGeneratedEvent) { const idToken = idTokenCustomClaims<{ userRole: string; lastLogin: string; }>(); idToken.userRole = "admin"; idToken.lastLogin = new Date().toISOString(); }; ``` ### Using the low-level API If you're not using the infrastructure library, you can modify the ID token directly: ```js kinde.idToken.setCustomClaim("userRole", "admin"); kinde.idToken.setCustomClaim("lastLogin", new Date().toISOString()); ```

# Workflows - Bindings - Bindings overview

> Overview of Kinde workflow bindings that allow workflow code to interact with Kinde infrastructure resources including tokens, authentication, environment variables, and HTTP requests.

bindings, Kinde bindings, native bindings, workflow resources, infrastructure integration
workflows, bindings, infrastructure

Bindings allow your workflow code to interact with resources within the Kinde infrastructure. ## Available bindings The following bindings are available. Only some are available within specific workflow contexts. Check the documentation to confirm which bindings are available for each workflow trigger. ### Kinde specific bindings: - [kinde.accessToken](/workflows/bindings/access-token-binding/) - [kinde.auth](/workflows/bindings/auth-binding/) - [kinde.env](/workflows/bindings/env-binding/) - [kinde.fetch](/workflows/bindings/fetch-binding/) - [kinde.idToken](/workflows/bindings/id-token-binding/) - [kinde.m2mToken](/workflows/bindings/m2m-token-binding/) - [kinde.mfa](/workflows/bindings/mfa-binding/) - [kinde.plan](/workflows/bindings/plan-binding/) - [kinde.secureFetch](/workflows/bindings/secure-fetch-binding/) ### Native bindings - [url](/workflows/bindings/url-binding/)

# Workflows - Bindings - kinde.m2mToken

> Learn how to modify machine-to-machine (M2M) tokens using the kinde.m2mToken binding, including adding custom claims that are included in the token returned to the client.

M2M token, machine-to-machine, custom claims, token modification, setCustomClaim, infrastructure library
workflows, bindings, tokens

The `kinde.m2mToken` binding lets you modify M2M (machine-to-machine) tokens. When you add custom claims, these are included in the M2M token returned to the client. ## Methods ### `setCustomClaim(name: string, value: any): void` Adds a custom claim to the M2M token. The claim is available when the token is returned to the client. ## Available in workflows - [m2m:token_generation](/workflows/example-workflows/m2m-token-generation-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.m2mToken": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides type-safe M2M token modification: ```js import { m2mTokenCustomClaims } from "@kinde/infrastructure"; export default async function (event: onM2mTokenGeneratedEvent) { const m2mToken = m2mTokenCustomClaims<{ applicationId: string; apiVersion: string; permissions: string[]; }>(); m2mToken.applicationId = event.application.id; m2mToken.apiVersion = "v2"; m2mToken.permissions = ["read:data", "write:data"]; }; ``` ### Using the low-level API If you're not using the infrastructure library, you can modify the M2M token directly: ```js kinde.m2mToken.setCustomClaim("applicationId", event.application.id); kinde.m2mToken.setCustomClaim("apiVersion", "v2"); kinde.m2mToken.setCustomClaim("permissions", ["read:data", "write:data"]); ```

# Workflows - Bindings - kinde.mfa

> Learn how to perform multi-factor authentication (MFA) operations in workflows using the kinde.mfa binding, including setting enforcement policies for authentication flows.

MFA, multi-factor authentication, authentication, infrastructure library
workflows, bindings, MFA

The `kinde.mfa` binding lets you perform MFA-related operations. ## Methods ### `setEnforcementPolicy(policy: 'required' | 'skip'): void` Allows you to set the MFA enforcement policy for the user for the current auth flow. The policy can be either `required` or `skip`. ## Available in workflows - [user:pre_mfa](/workflows/example-workflows/pre-mfa-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.mfa": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides type-safe helper to set the policy: ```js import {setEnforcementPolicy} from "@kinde/infrastructure"; export default async function (event) { setEnforcementPolicy("required"); } ``` ### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js kinde.mfa.setEnforcementPolicy("required"); ```

# Workflows - Bindings - kinde.plan

> Learn how to manage billing and subscription plan events in workflows using the kinde.plan binding, including denying plan changes or cancellations based on custom logic.

plan, billing, subscription, infrastructure library
workflows, bindings, billing

The `kinde.plan` binding provides methods to use for various plan related events such as when a customer requests to cancel or change their plan. ## Available in workflows - [user:plan_cancellation_request](/workflows/example-workflows/plan-cancellation-request-workflow/) - [user:plan_selection](/workflows/example-workflows/plan-selection-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.plan": {}} }; ``` ## Methods ### `denySelection(reason: string, suggestions: string[]): void` Prevent the user from changing their plan. #### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides a type-safe helper: ```js import { denyPlanSelection } from "@kinde/infrastructure"; export default async function (event: onPlanSelectionEvent) { if (!canChangePlan()) { denyPlanSelection("You are not allowed to change your plan as you have outstanding payments"); } } ``` #### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js kinde.plan.denySelection( "You are not allowed to change your plan as you have outstanding payments ); ``` ### `denyCancellation(reason: string): void` Prevent the user from cancelling their plan. #### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides a type-safe helper: ```js import { denyPlanCancellation } from "@kinde/infrastructure"; export default async function (event: onPlanCancellationRequestEvent) { if (!canChangePlan()) { denyPlanCancellation("You are not allowed to change your plan as you have outstanding payments"); } } ``` #### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js kinde.plan.denyCancellation( "You are not allowed to cancel your plan as you have outstanding payments ); ```

# Workflows - Bindings - kinde.secureFetch

> Learn how to make encrypted HTTP POST requests for sensitive data in workflows using the kinde.secureFetch binding, with automatic encryption of POST body content.

secure fetch, encrypted requests, sensitive data, HTTP requests, security, infrastructure library
workflows, bindings, security

The `kinde.secureFetch` binding allows you to make POST requests to external APIs where the payload is encrypted with the [workflow encryption key](/workflows/manage-workflows/workflow-encryption-key/) you have previously set up in Kinde. ## Available in workflows - [user:pre_registration](/workflows/example-workflows/pre-user-registration-workflow/) - [user:post_authentication](/workflows/example-workflows/workflow-user-post-auth/) - [m2m:token_generation](/workflows/example-workflows/m2m-token-generation-workflow/) - [user:new_password_provided](/workflows/example-workflows/new-password-provided-workflow/) - [user:existing_password_provided](http://localhost:4321/workflows/example-workflows/existing-password-provided-workflow/) - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) - [user:pre_mfa](http://localhost:4321/workflows/example-workflows/pre-mfa-workflow/) - [user:plan_selection](/workflows/example-workflows/plan-selection-workflow/) - [user:plan_cancellation_request](/workflows/example-workflows/plan-cancellation-request-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: {"kinde.secureFetch": {}} }; ``` ## Usage ### Using the Kinde infrastructure library (recommended) The [Kinde infrastructure library](https://github.com/kinde-oss/infrastructure) provides type-safe secure fetch requests: Note: you will also need the [url](/workflows/bindings/url-binding/) binding enabled for the workflow as this is used under the hood. ```js import {fetch} from "@kinde-oss/infrastructure"; export default async function Workflow(event) { const {data} = await secureFetch(`https://api.somethingsecret.com/api`, { method: "POST", responseFormat: "json", headers: {"Content-Type": "application/json"} }); console.log(data); } ``` ### Using the low-level API If you're not using the infrastructure library, you can call the underlying API directly: ```js const res = await kinde.secureFetch(`https://ipinfo.io/${event.request.ip}`, { method: "POST", responseFormat: "json", headers: {"Content-Type": "application/json"} }); const {json} = res; console.log(json); ```

# Workflows - Bindings - url

> Learn how to use the native url binding in workflows for URL parsing and manipulation, often used with fetch bindings for API requests.

URL, URL parsing, native binding, URL manipulation
workflows, bindings, URL parsing

The `url` binding allows you to access the native JavaScript `URLSearchParams` API. This is useful for parsing and manipulating URLs in your workflow and is often used in conjunction with the [kinde.fetch](/workflows/bindings/fetch-binding/) binding. ## Available in workflows - [user:pre_registration](/workflows/example-workflows/pre-user-registration-workflow/) - [user:post_authentication](/workflows/example-workflows/workflow-user-post-auth/) - [m2m:token_generation](/workflows/example-workflows/m2m-token-generation-workflow/) - [user:new_password_provided](/workflows/example-workflows/new-password-provided-workflow/) - [user:existing_password_provided](/workflows/example-workflows/existing-password-provided-workflow/) - [user:tokens_generation](/workflows/example-workflows/user-token-generation/) - [user:pre_mfa](/workflows/example-workflows/pre-mfa-workflow/) - [user:plan_selection](/workflows/example-workflows/plan-selection-workflow/) - [user:plan_cancellation_request](/workflows/example-workflows/plan-cancellation-request-workflow/) ## Configuration ```js export const workflowSettings = { // ...other settings bindings: { url: {} } }; ``` ## Usage ### Using the low-level API Once the binding is enabled you can use `new URLSearchParams` directly. ```js export default async function (event) { const {data: token} = await fetch(`https://someapi.com/api`, { method: "POST", responseFormat: "json", headers: {"Content-type": "application/x-www-form-urlencoded"}, body: new URLSearchParams({a: "b", b: "c"}) }); } ```

# Workflows - Configuration - Bindings

> Learn how to configure bindings in workflow settings, including how to enable and configure various Kinde infrastructure bindings for your workflow code.

bindings configuration, workflow settings, infrastructure bindings, Kinde bindings
workflows, configuration, bindings

Bindings allow your workflow code to interact with resources within the Kinde infrastructure. When you declare a binding in your workflow, you grant it a specific capability, such as being able to access environment variables or add claims to an access token. For example: ```js export const workflowSettings: WorkflowSettings = { bindings: { "kinde.env": {} }, ... }; ``` If a binding is not declared and you try to use it in the workflow, you'll get a runtime error. ## Available bindings The following bindings available, but only within certain workflow contexts. Check the documentation to see which bindings are available for each workflow trigger. ### Kinde specific bindings: - [kinde.accessToken](/workflows/bindings/access-token-binding/) - [kinde.auth](/workflows/bindings/auth-binding/) - [kinde.env](/workflows/bindings/env-binding/) - [kinde.fetch](/workflows/bindings/fetch-binding/) - [kinde.idToken](/workflows/bindings/id-token-binding/) - [kinde.m2mToken](/workflows/bindings/m2m-token-binding/) - [kinde.mfa](/workflows/bindings/mfa-binding/) - [kinde.plan](/workflows/bindings/plan-binding/) - [kinde.secureFetch](/workflows/bindings/secure-fetch-binding/) ### Native bindings - [url](/workflows/bindings/url-binding/)

# Workflows - Configuration - Dependencies

> Learn how to manage dependencies in workflow projects, including package.json configuration, supported libraries, and external library usage in Kinde workflows.

dependencies, package.json, NPM packages, workflow dependencies, external libraries
workflows, configuration, dependencies

Kinde's workflow runtime operates differently from Node.js. Workflows provide a secure, restricted JavaScript environment with access only to a pre-defined set of trusted packages. While Kinde doesn't require a `package.json` file by default, you'll need one if you want to use third-party libraries whilst developing your workflow code. ## Set up package.json To include third-party libraries in your workflow: 1. **Create a package.json file** Generate one using `npm init` or create it manually in your project directory. 2. **Add dependencies** List the required libraries in the `dependencies` section: ```json {"dependencies": {"@kinde/infrastructure": "^0.21.1", "react": "^4.17.21"}} ``` ## Supported packages Runtime dependencies must be part of the Kinde-supported library list. Unsupported libraries won't function in the Kinde workflow runtime and will cause an exception to be thrown. ## Lock package versions By default, Kinde uses the latest version of imported packages. To lock specific versions: - Enable the [npm integration](/workflows/configuration/kinde-json/) in your `kinde.json` file - Ensure both `kinde.json` and `package.json` files are in the same directory

# Workflows - Configuration - Environment variables and secrets

> Learn how to manage environment variables and secrets in workflow configurations, including secure storage and access methods for sensitive information.

environment variables, secrets, configuration, security, env binding
workflows, configuration, security

You can set up environment variables and secrets in Kinde to use in your workflow code. This is useful for storing sensitive information, such as API keys or database credentials that you don't want to hard-code into your workflow files. ## Creating environment variables You can create environment variables in the [Kinde admin area](/build/env-variables/add-manage-env-variables/) or via the [management API](https://docs.kinde.com/kinde-apis/management/#tag/environment-variables/post/api/v1/environment_variables). ## Using environment variables in your code The `kinde.env` binding must be enabled in your workflow file to use environment variables. If you are using the Kinde infrastructure library, it provides a helper method to access environment variables: ```js import {getEnvironmentVariable} from "@kinde/infrastructure"; const myVar = getEnvironmentVariable("MY_VAR")?.value; ``` You can also use the `getEnvironmentVariable` method to access sensitive environment variables / secrets. Sensistive environment variables are only visible to the Kinde runtime and have their values redacted if they are logged. If you are not using the Kinde infrastructure library, you can access environment variables directly using the low level API. ## process.env Kinde is not a Node runtime so the `process` object is not available. Instead, you access environment variables using the methods described above.

# Workflows - Configuration - kinde.json

> Learn how to use the kinde.json configuration file to define project structure and tell Kinde where to discover workflow files in repositories.

kinde.json, configuration file, project structure, root directory, workflow discovery
workflows, configuration, project-structure

The `kinde.json` file controls how Kinde runs your workflow code. Place this file in your project's root directory so Kinde can discover your configuration during sync. ## Configuration options The `kinde.json` file lets you: - Specify the root directory for your custom code - Define the runtime environment version - Enable integrations you need When you sync your project to Kinde, it reads this file to understand your workflow's requirements and set up the appropriate runtime environment. ## Example ```json { "rootDir": "kindeSrc", "version": "2024-12-09", "integrations": {"npm": {"enabled": true}} } ``` ## API reference ### `rootDir` (string) Tells Kinde where to look for your custom code. - **Required:** No - **Default:** `kindeSrc` ### `version` (string) The version of the Kinde runtime environment. The date reflects the last breaking change. - **Required:** Yes ### `integrations` (object) The integrations you wish to use. Currently only `npm` is supported. - **Required:** No #### `npm` (object) The npm integration allows you to lock down package versions. For this to take effect, the `kinde.json` file must live in the same directory as the `package.json` responsible for defining the versions. - **Required:** No Example: ```json {"integrations": {"npm": {"enabled": true}}} ```

# Workflows - Configuration - Workflow settings

> Learn how to configure workflow settings in Kinde, including triggers, bindings, and other workflow-specific options using the workflowSettings object.

workflow settings, workflowSettings, triggers, bindings, configuration
workflows, configuration, settings

Every workflow file must export a configuration object named `workflowSettings` that defines how your workflow behaves. ## Example configuration ```js export const workflowSettings = { bindings: {"kinde.env": {}, "kinde.fetch": {}, url: {}}, failurePolicy: {action: "continue"}, id: "hubspotSync", name: "HubSpot sync", trigger: "user:tokens_generation" }; ``` ## API reference ### `bindings` (object) Kinde helper methods to access within your workflow code. See [bindings](/workflows/configuration/bindings/) for more details. ### `failurePolicy` (object) Defines behavior when workflow execution fails (for example, during fetch timeouts or exceptions). ### `id` (string) Unique identifier for the workflow. ### `name` (string) Display name shown in the Kinde admin area. ### `trigger` (string) Event that starts the workflow (for example, `user:tokens_generation`).

# Workflows - Example workflows - Existing password provided workflow

> Learn about the existing password provided workflow trigger that fires when users provide existing passwords, enabling validation against external databases and migration workflows.

existing password, password validation, password migration, drip feed migration, authentication triggers
workflows, example-workflows, passwords

Trigger: `user:existing_password_provided` This trigger fires after an existing password is entered in the sign-in flow. ## Security considerations Security is at the heart of our technical decisions at Kinde, and keeping user passwords safe is a huge part of this. Therefore: - Any attempt to log the password out to the console in this workflow will be redacted - API calls should only be made from these workflows using the Kinde provided [secureFetch](/workflows/bindings/secure-fetch-binding/) binding which secures the payload with an encryption key ## Example use cases ### Drip feed migration For gradual migrations to Kinde where you wish to check the password against an external database before creating the user in Kinde and migrating their password. [See example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/existingPassword/dripFeedMigrationWorkflow.ts) ## Workflow code ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered. Here's an example: ```json { "request": { "ip": "192.168.0.1", "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0" }, "context": { "domains": { "kindeDomain": "https://example.kinde.com" // Your Kinde domain }, "auth": { "providedEmail": "hello@example.com", // the email provided by the user "password": "someSecurePassword", // the raw password "hashedPassword": "someHash", // the hashed password, "hasUserRecordInKinde": false // whether the user exists already in Kinde }, "user": { "id": "kp_1234566" // only provided in password reset flows as otherwise new user }, "workflow": { "trigger": "user:existing_password_provided" } } } ``` ### Secure fetch binding We recommend you use the [secureFetch](/workflows/bindings/secure-fetch-binding/) binding to make API calls from your workflow if they include sensitive data like passwords. ### Widget binding The `kinde.widget` binding gives you access to the Kinde widget, which is the central form on the page. In this case the form with the two password fields. It exposes a method for invalidating a form field `invalidateFormField` ```js kinde.widget.invalidateFormField(fieldName, message); ``` Example ```js if (!isUserPasswordValid) { kinde.widget.invalidateFormField("p_password", "User or password not found"); } ``` The field names for the widget binding in this workflow are: | Field name | Description | | ------------ | ------------------ | | `p_password` | The password field | ### Example workflows See examples on GitHub: [Drip feed migration](https://github.com/kinde-starter-kits/workflow-examples/blob/main/existingPassword/dripFeedMigrationWorkflow.ts) - Shows how to check a password against an external database before creating the user in Kinde.

# Workflows - Example workflows - M2M token generation workflow

> Learn about the M2M token generation workflow trigger that fires when machine-to-machine tokens are created, allowing customization and organization mapping for B2B API key management.

M2M token, machine-to-machine, token generation, custom claims, organization mapping, authentication triggers
workflows, example-workflows, M2M

Trigger: `m2m:token_generation` This trigger fires when an M2M token is generated. <Aside> You cannot modify tokens when the Kinde management API has been requested as an audience. </Aside> ## Example use cases ### Custom claims You may want to add additional custom claims to the M2M token before it is delivered to your product. ### Correlate an M2M application with an organization or user If you want, you can use M2M applications similar to API keys to enable access to various endpoints and tie them to an organization or user. For example, you add the organization code as a [custom property](/properties/work-with-properties/manage-properties/) on the M2M application, then fetch any data you’d like to include in the token. [See example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/m2mToken/mapOrgToM2MApplicationWorkflow.ts) ## Workflow code ### M2M token binding The [kinde.m2mToken](/workflows/bindings/m2m-token-binding/) binding is used to modify claims in the generated access token. ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered. Here's an example: ```json { "request": { "auth": { "audience": ["<EXAMPLE_API>"], "scope": ["read:users"] }, "ip": "192.168.0.1" }, "context": { "domains": { "kindeDomain": "https://example.kinde.com" // Your Kinde domain }, "application": { "clientId": "299627bd8bfa493f8b17e6aec8ebfb86" // the M2M application ID }, "workflow": { "trigger": "m2m:token_generation" } } } ``` ### Example workflows See examples on GitHub: [Map M2M applications to organizations](https://github.com/kinde-starter-kits/workflow-examples/blob/main/m2mToken/mapOrgToM2MApplicationWorkflow.ts) - Shows how to map M2M applications to organizations. Useful if using Kinde for B2B API key management

# Workflows - Example workflows - New password provided workflow

> Learn about the new password provided workflow trigger that fires when users set new passwords, enabling custom validation and secure password synchronization with external systems.

new password, password validation, password sync, encryption, authentication triggers
workflows, example-workflows, passwords

Trigger: `user:new_password_provided` This trigger fires after a new password is entered in either the sign-up flow or the reset password flow. ## Security considerations Security is at the heart of our technical decisions at Kinde, and keeping user passwords safe is a huge part of this. Therefore: - Any attempt to log the password out to the console in this workflow will be redacted - API calls should only be made from these workflows using the Kinde provided [secureFetch](/workflows/bindings/secure-fetch-binding/) binding which secures the payload with an encryption key ## Example use cases ### Custom password strength policy As a baseline, Kinde runs the following password checks: - A password is supplied - The password is at least 8 characters long - The password does not exist in the 1,000,000 most common passwords With this workflow you can add your own custom code to run additional checks, for example if your business requires a specific mix of upper / lower case characters, or inclusion of special characters. [See example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/newPassword/customPasswordValidationWorkflow.ts) ### Sync password updates with an external system For gradual migrations to Kinde where several apps are in play (e.g. a mobile application and a web application), you might want to migrate web users first and mobile app users later. If users have access to both applications, then password resets on the web application would not be persisted to the legacy mobile app password store. With this workflow you can securely send the password to your mobile app system in order to keep them in sync. [See example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/newPassword/securelySyncPasswordWorkflow.ts) ## Workflow code ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered. Here's an example: ```json { "request": { "ip": "192.168.0.1", "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0" }, "context": { "domains": { "kindeDomain": "https://example.kinde.com" // Your Kinde domain }, "auth": { "firstPassword": "someSecurePassword", // the first password entered "secondPassword": "someSecurePassword", // password match field "newPasswordReason": "reset" | "initial" // whether it is registration or reset }, "user": { "id": "kp_1234566", // only provided in password reset flows as otherwise new user "email": "hello@example.com" // the email provided }, "workflow": { "trigger": "user:new_password_provided" } } } ``` ## Bindings ### Secure fetch binding We recommend you use the [secureFetch](/workflows/bindings/secure-fetch-binding/) binding to make API calls from your workflow if they include sensitive data like passwords. ### Widget binding The `kinde.widget` binding gives you access to the Kinde widget which is the central form on the page. In this case the form with the two password fields. It exposes a method for invalidating a form field `invalidateFormField`. ```js kinde.widget.invalidateFormField(fieldName, message); ``` Example ```js const isMinCharacters = context.auth.firstPassword.length >= 50; if (!isMinCharacters) { kinde.widget.invalidateFormField( "p_first_password", "Provide a password at least 50 characters long ); } ``` The field names for the widget binding in this workflow are: | Field name | Description | | ------------------- | ---------------------------------------------------------------------------------------- | | `p_first_password` | The first password field | | `p_second_password` | The second password field, typically to check it matches the first to help prevent typos | ### Example workflows See examples on GitHub: - [Sync passwords to another system](https://github.com/kinde-starter-kits/workflow-examples/blob/main/newPassword/securelySyncPasswordWorkflow.ts) - Use encryption keys to securely keep passwords in sync between systems. - [Custom password validation](https://github.com/kinde-starter-kits/workflow-examples/blob/main/newPassword/customPasswordValidationWorkflow.ts) - Shows how to validate a password against your own rules.

# Workflows - Example workflows - Plan cancellation request workflow

> Learn about the plan cancellation request workflow trigger that fires when users request to cancel their subscription plans, allowing custom validation and cancellation controls.

plan cancellation, billing, subscription, cancellation workflow, authentication triggers
workflows, example-workflows, billing

Trigger: `user:plan_cancellation_request` This trigger fires when a plan cancellation request is made. This can be initiated by the user through the Kinde self-serve portal or via the Kinde Management API. This is not a deprovisioning workflow, this occurs before a cancellation request is processed. This event is triggered when: - the user asks to cancel their plan in the Kinde self-serve portal - plan cancellation is initiated via the Kinde Management API ## Example use cases ### Check if customer is eligible to cancel You may want to check if the customer is eligible to cancel their plan based on certain criteria, such as outstanding payments or minimum contract periods. If they are not eligible, you can prevent the cancellation and notify them. ## Workflow code ### Plan binding The [kinde.plan](/workflows/bindings/plan-binding/) binding is used for plan related actions, such as denying a cancellation request. ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered. Here's an example: ```js { "request": { "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0", "ip": "192.168.0.1" }, "context": { "domains": { "kindeDomain": "https://example.kinde.com" // Your Kinde domain }, "billing": { "currentPlanCode": "pro", "agreementId": "agreement_01971a7c5c7bf2d05888a8d6c77d08ce" // the subscription ID in Kinde }, "workflow": { "trigger": "user:plan_cancellation_request" } } } ``` ### Example workflows See examples on GitHub: [Deny cancellation request](https://github.com/kinde-starter-kits/workflow-examples/blob/main/planCancellationRequest/denyPlanCancellation.ts) - Deny a plan cancellation request from a user.

# Workflows - Example workflows - Plan selection workflow

> Learn about the plan selection workflow trigger that fires when users select subscription plans during the authentication process, allowing custom validation and plan change controls.

plan selection, billing, subscription, plan workflow, authentication triggers
workflows, example-workflows, billing

Trigger: `user:plan_selection` This trigger fires when a plan selection request is made. This can be initiated by the user through the Kinde self-serve portal or via the Kinde Management API. This is not a provisioning workflow, this occurs before plan selection or any payments are processed. This event is triggered when: - the user selects a new plan in the Kinde self-serve portal - changing a customers plan via the Kinde Management API It does not trigger when a plan is automatically assigned to a customer, such as when they sign up for the first time. ## Example use cases ### Check if customer is eligible to change plan You may want to check if the customer is eligible to change their plan based on certain criteria. For example, if they are trying to downgrade to a plan with a lower usage usage allowance that their current plan but they are already breaching the limits. ## Workflow code ### Plan binding The [kinde.plan](/workflows/bindings/plan-binding/) binding is used for various plan related events such as to prevent plan change requests. ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered. Here's an example: ```json { "request": { "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0", "ip": "192.168.0.1" }, "context": { "domains": { "kindeDomain": "https://example.kinde.com" // Your Kinde domain }, "billing": { "currentPlanCode": "professional", // plan they are changing from "requestedPlanCode": "free" // plan they are changing to }, "user": { "id": "kp_1234566" // the user ID }, "organization": { "code": "org_123456" // the organization code if applicable }, "workflow": { "trigger": "user:plan_selection" } } } ``` ### Example workflows See examples in GitHub: [Deny plan change request](https://github.com/kinde-starter-kits/workflow-examples/blob/main/planSelection/denyPlanChangeWorkflow.ts) - Deny a plan change request from a user and return the reasons for rejecting the request.

# Workflows - Example workflows - Pre-MFA workflow

> Learn about the pre-MFA workflow trigger that fires before multi-factor authentication, allowing custom logic like grace periods and conditional MFA enforcement.

pre-MFA, multi-factor authentication, grace period, MFA enforcement, authentication triggers
workflows, example-workflows, MFA

<Aside type="upgrade"> This workflow trigger is only available on the Kinde Scale plan </Aside> Trigger: `user:pre_mfa` This trigger is fired after the user has complete single factor authentication (e.g email + password or Google) and determined which organization (if any) they are trying to access. ## Example use cases ### Determining if MFA is required based on data in an external service You may be using a service like Zanzibar or OpenFGA for fine-grained access control and wish to call out to it to determine if a user needs to complete MFA. ### Making MFA required if a user has a certain permission You may wish to enforce MFA for users who have some sensitive permissions such as `delete:project` . ### Skipping MFA for certain organizations You want to enforce MFA at an environment level for all organizations, but there are a few who do not want to adopt your policy. ### MFA prompt grace period When you only want to prompt MFA when a user has not been asked for MFA for a certain time period. [See example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/preMFA/gracePeriodWorkflow.ts) ## Workflow code ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered and additional relevant datapoints. Here’s an example: ```json { "request": { "ip": "192.168.0.1", "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0" }, "context": { "auth": { "connectionId": "conn_01945d3ccf4926118bfdeb6e1158edb5" // connection ID the user auth'd with }, "domains": { "kindeDomain": "https://example.kinde.com" }, "mfa": { "policy": "required", // required | optional | off "context": "environment", // environment or organization "enabledFactors": ["mfa:sms", "mfa:email", "mfa:authenticator_app"], // factors you have enabled for this context "isUserRoleExempt": false, // advanced orgs can make specific roles exempt from MFA "isUserConnectionExempt": false // advanced orgs can make enterprise connections exempt from MFA }, "user": { "id": "kp_77d28fc7b16240dd9ec12b08071fe46e" // the users ID }, "workflow": { "trigger": "user:pre_mfa" }, "application": { "clientId": "cee9743fc7ee4d2e84061fe1a662051d" }, "organization": { "code": "org_75ad9f26d2c" } } } ``` ## Bindings ### MFA binding The [kinde.mfa](/workflows/bindings/mfa-binding/) binding is used to modify the MFA policy for the current auth flow. ### Example workflows See examples on GitHub: [Set a grace period for MFA](https://github.com/kinde-starter-kits/workflow-examples/blob/main/preMFA/gracePeriodWorkflow.ts) - Don't ask for MFA for a set period of time after a user has logged in.

# Workflows - Example workflows - User pre-registration workflow

> Learn about the user pre-registration workflow trigger that fires after single factor authentication but before user record creation, with examples for IP checks and disposable email blocking.

pre-registration, user registration, IP checks, disposable emails, spam prevention, authentication triggers
workflows, example-workflows, authentication

Trigger: `user:pre_registration` This trigger fires after the user has completed single factor authentication (e.g email + password or Google) but before a user record is created in Kinde. <Aside type="warning"> At this stage the user is not authorized - we have not checked organization access or carried out MFA. </Aside> ## Example use cases ### IP address checks Block user registrations from suspicious IP addresses. ### Block disposable email addresses Refuse disposable email addresses to prevent spam registrations. ## Workflow code ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered and additional relevant datapoints. Here's an example: ```json { "request": { "ip": "***", "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0", "authUrlParams": { "state": "b9ea1131f7796a10abe8eac1b48c715575a0ffd349fb9c602e13d824", "orgCode": "org_12345667", "clientId": "cad2d86b1ac645e1957889fcb1eff0f9", "redirectUri": "http://localhost:3000" } }, "context": { "auth": { "connectionId": "conn_0194ee03c226d48c6858d5a412359ed2" }, "domains": { "kindeDomain": "https://newbus.localkinde.me" }, "workflow": { "trigger": "user:pre_registration" }, "application": { "clientId": "cad2d86b1ac645e1957889fcb1eff0f9" } } } ``` ### Example workflows See examples on GitHub: [Prevent disposable email sign ups](https://github.com/kinde-starter-kits/workflow-examples/blob/main/preUserRegistration/blockDisposableEmails.ts) - Check the email address against a list of disposable email domains and block the registration if it matches.

# Workflows - Example workflows - User token generation workflow

> Learn about the user token generation workflow trigger that fires when tokens are created, allowing customization of access and ID tokens with custom claims from external APIs.

token generation, custom claims, access token, ID token, external API, authentication triggers
workflows, example-workflows, tokens

Trigger: `user:tokens_generation` This trigger fires when ID and Access tokens are generated for a user. - After authentication - a sign in or sign up event. - After a pre-authentication event - i.e the user is redirected to Kinde and returned invisibly to your app because they were already authenticated. - When a refresh token is generated. ## Security considerations To ensure the integrity of Kinde-issued tokens there are some claims which cannot be modified. See [Prohibited claims](https://github.com/kinde-oss/infrastructure/blob/main/lib/prohibitedClaims.ts) in the workflows infrastructure resource. ## Example use cases Here's a few ways that this trigger might be used for a workflow. ### Custom claims using Kinde data You may want to add additional custom claims to the access or ID token before it is delivered to your product. ### Custom claims using data from an external service You have entitlements or other data in a CRM that you wish to make an API call out to, and then append that data into the access token. [See example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/userTokens/customClaimsAccessTokenWorkflow.ts) ### Reduce token size Kinde automatically populates the access token with data such as `permissions` and `feature_flags`. If your product use these features heavily, the access token can bloat and you may prefer to use the Kinde Management API to get the data, and strip them from the token. ### Modify Kinde claim format Some external systems rely on claims to be in a certain format. For example, Kinde supplies roles as an array of objects, but some systems require a space separated string. This workflow allows you to restructure the format of these Kinde claims. ## Workflow code ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered. Here's an example: ```json { "request": { "auth": { "audience": ["<EXAMPLE_API>"] }, "ip": "192.168.0.1" }, "context": { "domains": { "kindeDomain": "<https://example.kinde.com>" // Your Kinde domain }, "auth": { "origin": "authorization_request" | "refresh_token_request", "isExistingSession": false, // if user was preauthenticated, "connectionId": "conn_12345" // the ID of the auth connection method used }, "application": { "clientId": "299627bd8bfa493f8b17e6aec8ebfb86" // the M2M application ID }, "user": { "id": "kp_1234567890", // the ID of the user "identityId": "identity_123456789" // the ID of the identity the user authenticated with }, "organization": { "code": "org_123456789" // the org code the user authorized against }, "workflow": { "trigger": "user:tokens_generation" } } } ``` ### Access and ID token bindings To modify claims in the generated user tokens you will need to make use of the following bindings - [kinde.accessToken](/workflows/bindings/access-token-binding/) - [kinde.idToken](/workflows/bindings/id-token-binding/) ### Example workflows See examples on GitHub: [Add custom claims to access token](https://github.com/kinde-starter-kits/workflow-examples/blob/main/userTokens/customClaimsAccessTokenWorkflow.ts) - Call an external API to get data to add as custom claims to the user access token.

# Workflows - Example workflows - User post-authentication workflow

> Learn about the user post-authentication workflow trigger that fires after successful authentication, with examples for external system synchronization and security checks.

post-authentication, user authentication, external integrations, HubSpot sync, impossible travel, authentication triggers
workflows, example-workflows, authentication

Trigger: `user:post_authentication` This trigger fires after the user has completed single factor authentication (e.g email + password or Google). <Aside type="warning"> At this stage the user is not authorized - we have not checked organization access or carried out MFA. </Aside> ## Example use cases ### Minimize account sharing Check previous logins by the user to see if they have carried out impossible travel or if their IP address looks suspicious. [Example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/postUserAuthentication/impossibleTravelWorkflow.ts) ### Add properties to a user Add additional properties to a user before tokens are generated. ### Add user to organizations If the user has been invited to join multiple organizations you can add them as this point, before going through the authorization flow. ### Determine if the user is a first time user Users can be created in multiple ways (imported / API / via the UI / self-registration). This could well be an existing user in your own database, so we tell you if this is a new user from a Kinde perspective. i.e we create a new record so you can act accordingly. [Example code](https://github.com/kinde-starter-kits/workflow-examples/blob/main/postUserAuthentication/syncNewUserToHubspotWorkflow.ts) ## Workflow code ### Sample event object The main argument provided to your code is the Kinde workflow `event` object which has two keys `request` and `context`. This gives you access to the reason the workflow was triggered and additional relevant datapoints. Here's an example: ```json { "request": { "ip": "***", "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:135.0) Gecko/20100101 Firefox/135.0", "authUrlParams": { "state": "b9ea1131f7796a10abe8eac1b48c715575a0ffd349fb9c602e13d824", "orgCode": "org_12345667", "clientId": "cad2d86b1ac645e1957889fcb1eff0f9", "redirectUri": "http://localhost:3000" } }, "context": { "auth": { "connectionId": "conn_0194ee03c226d48c6858d5a412359ed2", "isNewUserRecordCreated": true }, "user": { "id": "kp_6e54d9612e8748b39557c9975bdba033" }, "domains": { "kindeDomain": "https://newbus.localkinde.me" }, "workflow": { "trigger": "user:post_authentication" }, "application": { "clientId": "cad2d86b1ac645e1957889fcb1eff0f9" } } } ``` ### Example workflows See examples on GitHub: - [Sync new user data to Hubspot](https://github.com/kinde-starter-kits/workflow-examples/blob/main/postUserAuthentication/syncNewUserToHubspotWorkflow.ts) - Send user data and UTM tags to Hubspot when a new user record is created in Kinde. - [Impossible travel - Trustpath integration](https://github.com/kinde-starter-kits/workflow-examples/blob/main/postUserAuthentication/impossibleTravelWorkflow.ts) - Evaluate user login risk using TrustPath's API by checking for "impossible travel" patterns based on IP and recent login activity. If high risk is detected, access is blocked proactively.

# Workflows - Getting started - Connect your workflows repo and branch

> Learn how to connect GitHub repository to Kinde workflows, including repo setup with kinde.json configuration, branch selection, code sync, and preview mode for safe deployments.

GitHub integration, repository setup, code sync, branch connection, workflow deployment, preview mode
workflows, getting-started, GitHub integration

We want you to keep control of your own code, in your own repo, so you can update and commit as usual. Then sync your code with one click and it’s ready to use. You first need to set up your GitHub repo and connect the branch to Kinde. ## Set up your repo For the code sync to work, your workflow files need to be stored in a specific place in your repo. This tells Kinde where your custom code lives. If you prefer to use an alternative directory you can change `kindeSrc` to something else. 1. In the root of the repo create a file called `kinde.json` with the content: ```jsx { "rootDir": "kindeSrc" // This is root folder Kinde will use to discover workflows. } ``` 2. Create this folder structure in your repo's root directory: `[RootFolder]/environment/workflows`. This is where you will add the files that Kinde will read. ## Connect or change your repo and branch 1. In Kinde, go to **Settings > Environment > Git repo**. 2. Select **Connect repo** (first time) or **Change repo**. 3. Follow the on-screen prompts to connect your git service. 4. Select the repo and select **Next**. 5. Select the branch and select **Save**. You will know the connection is successful when you see the connected repo panel at the top of the screen. 6. If you are on an eligible Kinde plan, switch on the code preview mode option in **Advanced settings**. This lets you preview code in prod before making it live. 7. Check if your code has synced to Kinde. Go to **Home > Workflows**. If you already have workflow files set up, the workflows will appear in **Workflows** page. If we failed to read your workflow code, you should see a warning. ![workflow in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/7f6299c4-5af2-406a-4d8b-7e6812a94e00/public) 8. Review any issues in the [Sync log](/workflows/testing/preview-workflows/). 9. You can re-sync the code at anytime by selecting **Sync code**. <Aside type="warning"> If the preview code option is switched off, your code will be pushed live automatcially each time you sync. We recommend switching this off for production. This is a paid feature. </Aside> ## Code status alerts The home page of your Kinde dashboard shows a code alert status. You can see immediately if there are any concerns with your code. Select **View code status** to see if the issue is: - a code sync problem - a workflow code problem - a design custom code issue

# Workflows - Getting started - Infrastructure package

> Learn about Kinde's infrastructure package (@kinde/infrastructure) - an NPM package providing TypeScript methods and examples to simplify workflow development.

infrastructure package, NPM package, TypeScript, workflow methods, GitHub repository, installation
workflows, getting-started, infrastructure

Kinde provides a helpful infrastructure package that simplifies the process of creating workflows. This package includes a set of methods and examples to help you build your workflows effectively. It is built in TypeScript and is designed to be used in your workflow files. The package is available as an NPM package, which you can install in your project. ## Installation To install the Kinde infrastructure package, run the following command: ```bash # npm npm i @kinde/infrastructure ``` ## Github repository You can find the source code on [GitHub](https://github.com/kinde-oss/infrastructure). The repository includes a README file that provides a guide to creating the code that powers your workflows.

# Workflows - Getting started - Project structure

> Learn about Kinde workflow project structure including folder conventions, file naming rules, and recommendations for organizing workflow code in repositories.

project structure, folder conventions, file naming, workflow organization, kindeSrc, package.json, kinde.json
workflows, getting-started, project-structure

This page provides an overview of all the folder and file conventions for Kinde workflows, and recommendations for organizing your project. ## Folder and file conventions Your workflow code can live either in a brand new repo or it can co-exist with your main application code. ### Top-level folders Top-level folders are used to organize your workflow code ``` kindeSrc/ └── environment/ └── workflows/ ``` | Folder name | Description | | ------------- | ---------------------------------------------------------------------------------------------------- | | `kindeSrc` | The root directory of your custom code. Allows for co-locating Kinde code with your application code | | `environment` | The context for the workflow | | `workflows` | Houses all your workflow code | ### Top-level files Top-level files are used to configure your project and manage dependencies | File name | Description | | -------------- | ---------------------------- | | `package.json` | Project dependencies | | `kinde.json` | Configuration file for Kinde | ### Workflow files The files which contain your workflow code. These files are executed when the workflow is triggered. | File name | Extension | Description | | ---------- | ----------- | --------------------------------------------------------------------------------------- | | `Workflow` | `.ts` `.js` | Call the file whatever you like so long as it ends with "Workflow" e.g `m2mWorkflow.ts` | ## Organizing your project Kinde is mostly unopinionated about how you organize and colocate your project files. So long as you follow the conventions above, you can organize the workflow files within the `workflows` folder however you like.

# Workflows - Getting started - Quick start guide (workflows)

> Step-by-step guide to create your first Kinde workflow using the base template, connecting GitHub repository, and testing authentication triggers with runtime logs.

quick start, workflow setup, GitHub integration, template, first workflow, authentication triggers
workflows, getting-started, setup

The quickest way to see an end-to-end example is to follow this guide. It will help you set up your project and create your first workflow. ## Prerequisites - A Kinde account with an application set up - A GitHub account to host your code. ## 1. Clone the base template Sign in to your GitHub account and navigate to [Kinde base workflow template](https://github.com/kinde-starter-kits/workflow-base-template). Click the green **Use this template button** and select "Create a new repository". This will create a new repository in your GitHub account with the base template code. It contains a basic workflow that logs out "Hello, world!" when a user authenticates. ## 2. Connect your GitHub repository to Kinde Sign in to your Kinde account and navigate to **Settings > Git repo**. Select **Connect GitHub** and follow the instructions to connect your GitHub account to Kinde. When you select the repository you just created, Kinde will automatically sync the code and create a new workflow for you. ## 3. View your first workflow Navigate to Workflows in the Kinde admin area. You should see a new workflow called `Workflow 1`. Select the workflow to see the details and deployments. Select on **Runtime logs** to view the logs for the workflow. This should currently be empty. ## 4. Test your workflow Assuming you have a Kinde application set up, you can test your workflow by signing in to your application. This will trigger the workflow and a new runtime log entry will be available to view. Click on the new log entry to see "Hello, world! ## 5. That's it! You have successfully created your first Kinde workflow! You can now modify the workflow code to do whatever you like or add more workflows. ### Next steps - Explore the [Kinde workflows documentation](/workflows/about-workflows/) to learn more about how workflows work, the available triggers, and how to create more complex workflows. - Dive into example workflows in the [Kinde workflow examples GitHub repository](https://github.com/kinde-starter-kits/workflow-examples)

# Workflows - Getting started - Workflow examples

> Collection of workflow examples and templates including base template, password validation, custom claims, MFA grace periods, external integrations, and security workflows like impossible travel detection.

workflow examples, templates, GitHub repository, authentication workflows, password validation, custom claims, MFA, external integrations
workflows, getting-started, examples

View examples to help you get started with Kinde workflows. ## Base workflow template This is the most basic template for a Kinde workflow. You can use this as a starting point for your own workflows. You can use this in conjunction with the example files below to create more complex workflows. [Base workflow template](https://github.com/kinde-starter-kits/workflow-base-template) ## Workflow example files These can be used as a starting point for your own workflows. You can find them in the [Kinde GitHub repo](https://github.com/kinde-starter-kits/workflow-examples). Either copy the files you need into your existing project or the base template above. - [Block disposable emails](https://github.com/kinde-starter-kits/workflow-examples/blob/main/preUserRegistration/blockDisposableEmails.ts) - Prevent users from creating accounts with disposable email addresses. - [Drip feed migration](https://github.com/kinde-starter-kits/workflow-examples/blob/main/existingPassword/dripFeedMigrationWorkflow.ts) - Shows how to check a password against an external database before creating the user in Kinde. - [Sync passwords to another system](https://github.com/kinde-starter-kits/workflow-examples/blob/main/newPassword/securelySyncPasswordWorkflow.ts) - Use encryption keys to securely keep passwords in sync between systems. - [Custom password validation](https://github.com/kinde-starter-kits/workflow-examples/blob/main/newPassword/customPasswordValidationWorkflow.ts) - Shows how to validate a password against your own rules. - [Sync new user data to Hubspot](https://github.com/kinde-starter-kits/workflow-examples/blob/main/postUserAuthentication/syncNewUserToHubspotWorkflow.ts) - Send user data and UTM tags to Hubspot when a new user record is created in Kinde. - [Set a grace period for MFA](https://github.com/kinde-starter-kits/workflow-examples/blob/main/preMFA/gracePeriodWorkflow.ts) - Don't ask for MFA for a set period of time after a user has logged in. - [Add custom claims to access token](https://github.com/kinde-starter-kits/workflow-examples/blob/main/userTokens/customClaimsAccessTokenWorkflow.ts) - Call an external API to get data to add as custom claims to the user access token. - [Map M2M applications to organizations](https://github.com/kinde-starter-kits/workflow-examples/blob/main/m2mToken/mapOrgToM2MApplicationWorkflow.ts) - Shows how to map M2M applications to organizations. Useful if using Kinde for B2B API key management - [Impossible travel - Trustpath integration](https://github.com/kinde-starter-kits/workflow-examples/blob/main/postUserAuthentication/impossibleTravelWorkflow.ts) - Evaluate user login risk using TrustPath's API by checking for "impossible travel" patterns based on IP and recent login activity. If high risk is detected, access is blocked proactively.

# Workflows - Getting started - Workflow files

> Learn how to create workflow files with proper naming conventions, workflowSettings configuration, and API reference for request and context objects in Kinde workflows.

workflow files, file naming, workflowSettings, triggers, API reference, request object, context object
workflows, getting-started, file-structure

Kinde identifies workflows by searching for files named with the pattern `*Workflow.[ts/js]`. For instance, a workflow triggered upon m2m token generation might be named `m2mTokenWorkflow.ts`. ## Creating a workflow To create a workflow, add a file named Workflow.[ts/js] within the `workflows` directory. Each workflow file must export: - A workflowSettings object defining the workflow's configuration. - A default asynchronous function containing the workflow's logic. The simplest workflow example: ```js export const workflowSettings = { id: "onTokenGeneration", trigger: "user:tokens_generation" }; export default async function Workflow({request, context}) { console.log("Hello world"); } ``` In this example, every time a user token is generated, this workflow will execute, logging "Hello world" to the console. ## API reference The default exported function receives a single event argument, which is an object containing two keys: `context` and `request`. ### `request` (object) Provides information about the request that triggered the workflow, such as the originating IP address and user agent string. ### `context` (object) Contains additional, trigger-specific data relevant to the workflow, which can include details like the user ID or organization code. Refer to the documentation for each specific workflow trigger to understand the data available within the `request` and `context` objects.

# Workflows - Manage workflows - Create a workflow

> Learn how to create new workflows in Kinde, including connecting GitHub repositories, setting up workflow files, and configuring workflow settings.

create workflow, workflow setup, workflow creation, GitHub integration
workflows, manage-workflows, setup

You can create workflows using Kinde's provided triggers. All you need to do is add workflow code to your repo, that can be executed when the trigger fires. Note that workflows only show up in Kinde if you have connected your repo and there are valid workflow files found in the branch you select. Otherwise, you won't see them. ## Add a workflow file to your repo 1. In the Kinde infrastructure folder, you set up (e.g. `[RootFolder]/environment/workflows`) create a TypeScript file. You can name it anything ending in `...Workflow.ts`. For example if the Kinde workflow name is `Custom-access-token`, the filename could be `CustomAccessTokenWorkflow.ts.` 2. Enter your code into the file in plain JavaScript or TypeScript. For details on what must be included, see the [kinde/infrastructure readme file in Github](https://github.com/kinde-oss/infrastructure). 3. When you commit code in your repo and then sync the code in Kinde, we will perform validity tests on the files. If the commit is valid, it will have the status of ‘Draft’ in Kinde. You can make draft workflows live. ## Make the workflow live (for the first time) 1. Got to **Workflows** and click on the workflow trigger. 2. In the **Summary** screen for the workflow, find the draft deployment. 3. Select the three dots (…) menu on the far right and select **Make live**. 4. Confirm you want to make the deployment live. For information on managing deployments and making a different deployment live, see the [workflows management](/workflows/manage-workflows/manage-code-and-deployments/) topic.

# Workflows - Manage workflows - Deactivate or delete a workflow

> Learn how to deactivate or delete workflows in Kinde, including the differences between deactivation and permanent deletion, and how to safely manage workflow lifecycle.

deactivate workflow, delete workflow, workflow management, workflow lifecycle
workflows, manage-workflows, administration

There is a difference between deactivating and deleting a workflow. ## Deactivate a workflow Deactivating a workflow stops it from being triggered or used. The workflow cannot be triggered by users until you make the same or a different deployment live. 1. Go to **Workflows**. 2. Select the workflow you want to deactivate. The workflow **Summary** page opens. 3. In the **Live** section, select the three dots menu, then select **Deactivate**. 4. Confirm that you want to deactivate. The workflow will be stopped. It will not work again until you make a deployment live. ## Delete a workflow There are two parts to deleting a workflow: ### 1: Delete workflow files in your repo Even when you delete the workflow from your repo it will remain in Kinde. This is to safeguard against error and to protect your auth flow. The workflow keeps running until you manually delete it. ### 2: Delete a workflow in Kinde 1. Go to **Workflows**. 2. Select the … menu next to the workflow and select **Delete workflow**. A confirmation window opens explaining what is about to happen. 3. Confirm the deletion. <Aside> A workflow will re-appear if you add the files back in your repo and sync the code again. </Aside>

# Workflows - Manage workflows - Disconnect Git repo for workflows

> Learn how to disconnect Git repositories from Kinde workflows, including the process and implications of removing repository connections.

disconnect Git repo, GitHub integration, repository management, workflow setup
workflows, manage-workflows, GitHub integration

Follow the procedure below to disconnect the workflow git repo connection. You need to do this in GitHub while we work on making this possible in Kinde. ## Disconnect Git repo for workflows 1. Sign in to GitHub. 2. Go to https://github.com/settings/apps/authorizations. 3. Select **Revoke** next to the repo connected to Kinde. 4. Confirm that you want to revoke access. The repo will be disconnected from Kinde.

# Workflows - Manage workflows - Manage code and deployments

> Learn how to manage workflow code and deployments in Kinde, including GitHub synchronization, preview mode for testing, and production deployment strategies.

code management, deployments, GitHub sync, preview mode, production deployment
workflows, manage-workflows, deployment

Workflows rely on your code being available to execute when the trigger event happens. When you update your code, you need to update the related workflow in Kinde. ## Sync code from your repo Get the latest code from your repo so that it can be checked for deployment-readiness. The result of a sync will tell you if the code is ready. 1. Go to **Workflows**. 2. Select **Sync code**. This will update all workflows with any new code. The latest deployment shows on the **Summary** page for each workflow. 3. If the code is valid, Kinde will create a new deployment for each workflow. ## Make a deployment live By default, Kinde will create a new deployment and set it live immediately when you sync your code. If you have disabled this settings, you may wish to manually make the latest code deployment live, so it is used in the workflow. You can make any deployment live which can be useful for rolling back to working versions of your code if there are issues with your currently live version. 1. Go to **Workflows**. 2. Refresh code from your repo by selecting **Sync code**. 3. Select the workflow you want to update. 4. On the **Workflow** page, select **Make live** from the deployment context menu. The workflow will update to use the latest code. ## View all deployments 1. Go to **Workflows**. 2. Select the workflow to view the details. 3. Select **Deployments** in the menu. A list of all your deployments shows. See below to interpret deployment statuses. ## Deployment status | Status | Meaning | | ----------- | ------------------------------------------------------------------------------------------------------------------------- | | Live | The code version currently live and ready to use in a workflow | | Deployed | Code that you have committed in your repo and has been checked for validity in Kinde and is ready to run in the workflow. | | Failed | Code that you have committed in your repo and has been found not be valid to run in Kinde. | | Deactivated | Code that was live and has now been deactivated. It is possible for it to be made live again. | | Processing | You may occasionally see one of these. They indicate transitional states before a definitive status is achieved. | | Draft | New workflow without a live deployment. |

# Workflows - Manage workflows - Workflow encryption key

> Learn about workflow encryption keys used to secure sensitive data transmission in secure fetch operations and other encrypted workflow communications in Kinde workflows.

encryption key, security, secure fetch, sensitive data, encryption
workflows, manage-workflows, security

You can generate unique encryption keys to be used to make secure API calls within your workflows. Encryption keys protect sensitive data and should be updated regularly for continued protection. Keys are per-workflow, so you can have different keys for different workflows. You can also have multiple keys for a single workflow, but only one key can be active at a time. ## How encryption keys work When an POST request is made using the [kinde.secureFetch binding](/workflows/bindings/secure-fetch-binding/), the body is automatically encrypted with the active encryption key for the workflow. Use the same encryption key in your own code to decrypt the payload on arrival. This ensures secure transfer of the data. ## Add an encryption key to a workflow 1. Go to **Workflows** and select a workflow. 2. Select **Encryption keys** in the menu. 3. Select **Add encryption key**. A dialog appears, enabling you to copy the key. You need to copy it immediately, as it cannot be viewed again. 4. After you copy the key, select **Close**. If this is the first key you have added, it will automatically be made **active**. 5. Add the key to your code, to decrypt data sent from Kinde. ## Update an encryption key 1. Go to **Workflows** and select a workflow. 2. Select **Encryption keys** in the menu. 3. Select **Add encryption key**. A dialog opens with information about adding the key. 4. Select **Add**. A dialog appears showing the key value. 5. Copy the key value and store it somewhere you can access again. 6. Select **Close**. 7. When you are ready to update the key in your code, select the three dots menu on the new key, then select **Activate**. A dialog opens, confirming the action. 8. Select **Activate encryption key**. This makes the new key active and deactivates the previously active key. 9. Add the new key value to your code, to continue decrypting data sent from Kinde. ## Deactivate/activate an encryption key You can change the active status of any key. Remember to update your code to use the active key. 1. Go to **Workflows** and select a workflow. 2. Select **Encryption keys** in the menu. 3. To deactivate an active key: 1. Select the three dots menu on the active key. 2. Select **Deactivate**. A confirmation window opens. 3. Follow the prompts and select **Deactivate encryption key.** 4. To activate a deactivated key: 1. Select the three dots menu on the inactive key. An inactive key shows no status. 2. Select **Activate**. A confirmation window opens. 3. Follow the prompts and select **Activate encryption key**. This makes the new key active and deactivates any previously active key. ## Delete used or unwanted encryption keys Deleting used keys is good security hygiene. But deleting an active key can also break your code. Only delete inactive keys. 1. Go to **Workflows** and select a workflow. 2. Select **Encryption keys** in the menu. 3. Next to an inactive key, select the three dots menu. 4. Select **Delete key**. A confirmation window opens. 5. Follow the prompts and select **Delete encryption key**.

# Workflows - Observability - Workflow build logs

> Learn about workflow build logs that show compilation and deployment information when workflows are synced and deployed in Kinde, including error and warning details.

build logs, workflow logs, deployment logs, observability, debugging
workflows, observability, logs

A log entry is created every time your code is compiled and deployed on Kinde. This log entry contains information about the build process, including any errors or warnings that occurred during the build. ## View build logs If your code was succesfully synced from your repo Kinde will then attempt to build (compile and deploy) your code. The results of this build will show up in the deployment build logs. 1. Go to **Workflows**. 2. Select a workflow in the list to open it. The **Summary** page opens. 3. Select **Deployments** in the menu. A list of all your deployments shows. 4. Select the deployment you want to test. The **Deployment details** page opens. 5. Scroll to the bottom of the page and view the build logs. ## Common issues ### Failed to resolve file, invalid location Typically this means that the file you are trying to import is not in the correct location. Check the following: - The file is in the correct location. - The file you are importing is a valid file type - i.e a `.ts` or `.js` file - If you are using a package from the NPM registry make sure it is a Kinde supported package.

# Workflows - Observability - Workflow logs

> Learn about workflow logs that capture console output and debugging information from workflow execution in Kinde, helping troubleshoot and diagnose workflow issues.

workflow logs, console logs, observability, debugging, monitoring
workflows, observability, logs

Logs are an important component of a developer's toolkit to troubleshoot and diagnose workflow issues, and to maintain system health. Kinde offers a range of logs to help diagnose issues. ## Sync logs Sync logs are generated when you sync your code to Kinde. They provide information about the sync process, including any errors or warnings that occurred during the sync. [See more about sync logs](/workflows/observability/workflow-sync-logs/) ## Build logs Build logs are generated when you sync your code to Kinde. They provide information about the build process, including any errors or warnings that occurred during the build. [See more about build logs](/workflows/observability/workflow-build-logs/) ## Runtime logs Runtime logs are generated when your workflow is executed. They provide information about the execution of your workflow, including any errors or warnings that occurred during the execution. [See more about runtime logs](/workflows/observability/workflow-runtime-logs/)

# Workflows - Observability - Workflow runtime logs

> Learn about workflow runtime logs that show execution details and performance metrics when workflows are triggered and run in Kinde, including error and debugging information.

runtime logs, workflow execution, observability, debugging, monitoring
workflows, observability, logs

When your code is running in a workflow, we monitor performance and activity as the workflow executes. If you discover or someone reports an issue with the workflow, runtime logs are likely to pick up any errors. ## View runtime logs 1. Go to **Workflows**. 2. Select a workflow in the list to open it. The **Summary** page opens. 3. Select **Runtime logs** in the menu. A list of all your recent logs shows. 4. Select the runtime log you want to view. ## Common issues The Kinde runtime environment is a secure JavaScript environment. This means that some JavaScript features are not available in the Kinde runtime. If you try to use a feature that is not supported, you will see an error in the runtime logs. For example, if you try to use the `fs` module to read a file from the file system, you will see an error like this: ``` Error: fs is not defined ```

# Workflows - Observability - Workflow sync logs

> Learn about workflow sync logs that show GitHub repository synchronization status and any issues encountered during code deployment in Kinde workflows.

sync logs, GitHub sync, code synchronization, observability, deployment
workflows, observability, logs

A log entry is created every time your code is synced to Kinde from your repo. This log entry contains information about the sync process, including any errors or warnings that occurred during the sync. ## View code sync log When your code hits Kinde from a fresh commit in your repo, we check to make sure we’re able to run it. If these checks fail, this will show up in the sync logs. 1. Go to **Settings > Git repo > Sync logs**. This shows a page list of all the sync events in chronological order. 2. Select the leftmost column or open the three dots menu next to an item in the list to view details of the sync. The **Sync event details** page opens. 3. Details of which processes succeeded and fails are shown. ## Common issues ### No workflows At the point of syncing, Kinde checks to see if there are any workflows in your repo. If there are none, the sync will fail. You need to create a workflow before you can sync your code. If there is a workflow file in your repo there are other reasons why Kinde may not be able to find it. Check the following: - The workflow file is in the correct location. The workflow file must be in the root of your repo. - The workflow file is a valid file type - i.e a `.ts` or `.js` file - The file name finishes with `Workflow` - for example `m2mWorkflow.ts`. - Your `kinde.json` file is pointing at the correct `kindeSrc` ### Unknown trigger requested If you have a trigger in your workflow that Kinde does not recognize, the sync will fail. Check the following: - The trigger is a valid trigger type. See the [about workflows](/workflows/about-workflows/) page for a list of valid triggers. - The trigger is spelled correctly. Check for typos in the trigger name. ### More than one workflow assigned to this trigger A trigger can only be assigned to one workflow. If you have more than one workflow assigned to the same trigger, the sync will fail. Check the following: - The trigger is only assigned to one workflow. If you have more than one workflow assigned to the same trigger, remove the duplicate workflows. ### Duplicate workflow ID A workflow ID must be unique. If you have more than one workflow with the same ID, the sync will fail. Check the following: - The workflow ID is unique. If you have more than one workflow with the same ID, change the ID of one of the workflows. ### Missing output bundle When the Kinde compiler runs, it creates a bundle of the workflow code. If this generated bundle is empty, the sync will fail.

# Workflows - Testing - Testing workflows

> Overview of testing strategies for Kinde workflows including preview mode, testing methodologies, and best practices for ensuring workflow reliability.

workflow testing, preview mode, testing strategies, quality assurance, debugging
workflows, testing, quality-assurance

It is common that you would like to test your workflow code before you make it live for your end users. Kinde provides a few ways to do this. ## Use environments You can set up different environments in Kinde to test your code before you make it live. This is useful for testing new features or changes to your workflow code without affecting your production environment. To take advantage of this, we recommend you [add a second environment](/build/environments/environments/#add-an-environment) in Kinde (this is included on all plans). Connect your GitHub repo to this environment and ensure everything works as expected before syncing the branch to your production environment. You can make use of the [environment variables](/build/env-variables/store-environment-variables/) feature to set up different configurations for each environment to ensure seamless switching. ## Use preview mode <Aside type="upgrade"> Only users on eligible plans can preview workflows before they go live. This option needs to be switched on in **Settings > Environment > Git repo**. </Aside> Preview mode allows you to test your workflow code in your production environment without affecting your live deployment. See the [preview workflows](/workflows/testing/preview-workflows/) article for more information on how to use this feature.

# Workflows - Testing - Preview workflows

> Learn about preview mode in Kinde workflows that allows safe testing of workflow changes in production before making them live, using deployment IDs and passwords.

preview workflows, testing, safe deployment, production testing, workflow validation
workflows, testing, preview

<Aside type="upgrade"> Only users on eligible plans can preview workflows before they go live. This option needs to be switched on in **Settings > Environment > Git repo**. </Aside> You can preview a workflow by testing one of your code deployments. For this you need to get the Workflow deployment ID and password from Kinde. ## Copy workflow testing details for code preview If you don't have the right plan to preview and test your code in production, we recommend you test it in a [staging environment](/workflows/testing), before you make it live. 1. Go to **Workflows**. 2. Select a workflow in the list to open it. The **Summary** page opens. 3. Select **Deployments** in the menu. A list of all your deployments shows. 4. Select the deployment you want to test. The **Deployment details** page opens. 5. Select **Preview** in the menu and copy the workflow deployment ID and password that you need for testing. 6. Copy these and apply them in your application. Use them when you test the workflow. ## Use the workflow deployment ID in your code The deployment ID is used to identify the workflow deployment you want to test. You can use this in your code to make sure you are testing the right deployment. This should be passed as part of the authorization URL: ``` https://<your_kinde_subdomain>.kinde.com/oauth2/auth ?response_type=code &client_id=<your_kinde_client_id> &redirect_uri=<your_app_redirect_url> &scope=openid%20profile%20email &state=abc &deploy_id=<your_workflow_deployment_id> ``` ## Use the password If the `deploy_id` URL parameter is passed, then Kinde will display a password prompt at the start of the auth flow. This is the password you copied from the **Deployment details** page. When entered the auth flow will continue as normal and the workflow will be triggered.

