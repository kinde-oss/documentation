---
page_id: 1d2e3f4a-5b6c-7d8e-9f0a-1b2c3d4e5f6a
title: Kinde Documentation - Build
description: "Complete documentation for Kinde's build section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - build
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - build
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's build section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Build

This is the complete documentation for Kinde's build section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Build - Applications - Applications in Kinde

> Comprehensive overview of Kinde applications including backend, frontend, and machine-to-machine applications with OAuth 2.0 flows and security considerations.

applications, OAuth 2.0, authorization flows, backend apps, frontend apps, M2M apps, client credentials
applications, oauth, authentication

Applications in Kinde facilitate the receipt of access tokens in your application’s code. Kinde applications use OAuth 2.0 flows to securely pass tokens. See [Section 4 of the OAuth 2.0 Authorization Framework](https://datatracker.ietf.org/doc/html/rfc6749#section-4) for details on Authorization flows. We support the following applications and flows. ## Back-end / server-side apps Use for server-rendered web applications. Suitable for confidential applications (such as Regular Web Applications) because the application's authentication methods are included in the exchange and must be kept secure. ### Secured with Authorization Code Flow This application uses the Authorization Code Flow to exchange an authorization code for a token. For security, a client secret is required to request an access token. The client secret is known only to the application and the authorization server. So when the application makes a request for an access token, it includes the client secret as a form of authentication. This ensures that the authorization server can verify the identity of the client application. The use of client secrets protects sensitive data from being accessed by unauthorized users and systems. <Aside> If the Client secret field is empty in your Kinde app it’s because client secrets are only available for back-end/server-side apps. You may have created a front-end/client-server app (that has no client secret) by mistake. </Aside> ### SDKs and compatible frameworks Apollo GraphQL, Elixir, ExpressJS, Express GraphQL, Java, .NET, Next.js, NodeJS, Nuxt, PHP, Python, Ruby, TypeScript. [View Kinde SDKs](/developer-tools/about/our-sdks/) ## Front-end / client-side apps Use for client-side web applications, single page web applications, and mobile applications. Authentication methods are different for these apps because they run in unsecured systems, such as web browsers. ### Secured with Authorization Code Flow and PKCE This application uses the Authorization Code Flow with Proof Key for Code Exchange (PKCE). Client-side applications, such as single-page web apps, are typically unable to securely store a client secret due to the inherent exposure of client-side code. That’s why OAuth 2.0 recommends the Implicit Flow or PKCE (Proof Key for Code Exchange) to provide security without relying on a client secret. <Aside> **Kinde does not support the Implicit Flow** method for front-end apps as it has some security vulnerabilities. We support Authorization Code Flow with PKCE instead. </Aside> ### SDKs and compatible frameworks JavaScript, React, TypeScript, Android, iOS, React Native, Expo, Flutter, Node/Apollo GraphQL, Node/Express GraphQL. [View Kinde SDKs](/developer-tools/about/our-sdks/) ## Machine to machine (M2M) apps Use for your backend services that require access to an API. This includes accessing the Kinde management API. Other use cases include CLIs, daemons and IoT devices. You can create as many M2M apps as you require. See [Add a machine to machine application for API access](/developer-tools/kinde-api/connect-to-kinde-api/). ### Secured with Client Credentials M2M applications are secured through an initial exchange of each application’s Client ID and Client Secret. This identifies each application as authorized for token exchange. Each access token request must include the `Client Credentials` grant type. Typically, a request includes scopes, which define the type of information that can be requested in the exchange. ### Access to Kinde's Management API is managed via scopes When you set up an M2M application that you will use with Kinde's Management API, you need to select the scopes that your application will need to access. For example, you'll select `read`, `create`, `update`, and `delete` actions. ### Add properties to M2M tokens If you want, you can [add custom properties to an M2M application](/properties/work-with-properties/manage-properties/) and then [include these properties in M2M tokens](/properties/work-with-properties/properties-in-tokens/). This is helpful if you want to include special information when you pass M2M tokens between systems.

# Build - Applications - Add and manage applications

> Step-by-step guide for adding and managing applications in Kinde including configuration tasks, application deletion, and integration setup requirements.

add applications, manage applications, application configuration, delete applications, application keys, callback URLs
applications, configuration

Applications are how you make your product or service available to your users, such as through a mobile app, a web app, or a website. If you plan to manage authentication for each of your applications using Kinde, you will need to add and configure each application. [Kinde provides several application types](/build/applications/about-applications/), including a regular web app (for execution on a server), single page web app (for browsers and mobile), and machine to machine applications (for backend services that require access to an API, including the [Kinde management API](/developer-tools/kinde-api/connect-to-kinde-api/)). ## Add an application 1. Go to **Settings > Environment >** **Applications**. 2. Select **Add application**. 3. Enter a name and select the type of application. 4. Select **Save**. A tile appears for the application. 5. Configure the application by selecting **View details** on the application tile. Some of the main tasks are listed below. ## Application configuration tasks - [Get application keys](/get-started/connect/getting-app-keys/) to connect your apps - Set callback URLs using the [relevant SDK](/developer-tools/about/our-sdks/) - [Set up authentication](/authenticate/authentication-methods/set-up-user-authentication/) - [Configure tokens](/build/tokens/configure-tokens/) ## Delete an application You can now delete applications in Kinde. You need to be an owner or an admin to do this. <Aside type="danger"> Deleting an application is a destructive action which cannot be reversed. We recommend backing up all relevant data and checking for application dependencies. </Aside> When an application is deleted, all application-related authentication settings, token settings, session information, and API links are also deleted. 1. Go to **Settings > Environment >** **Applications**. 2. Select the three dots next to the application you want to delete and select **Delete application**. A confirmation window appears. 3. Follow the prompts in the window and select **Delete application**.

# Build - Applications - Authenticating single-page apps (SPAs) with Kinde

> Comprehensive guide for authenticating single-page applications with Kinde including client-side and server-side authentication approaches with React and Node.js examples.

SPA authentication, single-page apps, client-side auth, server-side auth, PKCE, JWT validation, API routes
applications, authentication, spa

A very common architecture is to use a decoupled front-end / back-end with a standalone front-end and separate REST API for the back end. This topic runs through a scenario for authenticating a SPA. In our scenario, you have a React front-end and a NodeJS based API. This is a pretty common set up we see at Kinde, however, the guiding principles are the same regardless of the technologies you use. There are a couple of ways you can use Kinde to authenticate this style of application. ## Option 1: Client side authentication This authentication option takes place in the browser and when you want to call your API, you send the access token you received from Kinde to your API in the **Bearer header**. ### Front end setup 1. In Kinde, go to **Settings > Applications > Add application** and choose **Front-end and mobile** application. <Aside> This application type does not have a client secret as authentication takes place in the browser and there is no place to securely store secrets. Instead it uses the Authorization Code Flow with Proof Key for Code Exchange (PKCE) extension which you can read more about [here](/build/tokens/oath-scopes/#oauth-flows). </Aside> 2. Follow the **Quick Start** guide for your chosen technology to get set up. This can be found in the menu when you view details of the application in Kinde. 3. Once you are up and running, call your API with code similar to the below - replacing `<your_api_endpoint>` with the API you are trying to call. 4. This sample is from a React application, but it will be very similar for any frontend technology. ```jsx const { getAccessToken } = useKindeAuth(); const fetchData = async () => { try { const accessToken = await getAccessToken(); const res = await fetch(`<your_api_endpoint>`, { headers: { Authorization: `Bearer ${accessToken}` } }); const {data} = await res.json(); console.log({data}); } catch (err) { console.error(err); } }; ``` ### Back end setup You do not need to set up a back-end application in Kinde. The request sent to your API will include the access token, which gets validated when you receive it on your back end. Validation checks the token has not expired and that the token has originated from Kinde, as well as various other checks. While it is possible to write code to check this yourself, it can be easy to miss something and accidentally introduce serious security vulnerabilities. Here's our recommendations: - Use the Kinde JWT verifier for your chosen technology (if available). Our Node package is available [here](https://www.npmjs.com/package/@kinde/jwt-validator). OR - Use any existing middleware for your web framework OR - Choose a third-party library, for example the OpenID Foundation has [a list of libraries for working with JWT tokens](https://openid.net/developers/jwt/). #### Audience To further protect your project, we recommend you [register your API](/developer-tools/your-apis/register-manage-apis/) in Kinde and make sure it is enabled for your front end application. You will then need to [request the audience](/developer-tools/your-apis/register-manage-apis/#request-an-audience-be-added-to-a-token) from your front end to make sure it is included in the `access_token` when your user authenticates with Kinde. This is an additional check in the JWT validation above, which should be handled by the verifier you are using. ## Option 2 - Server side authentication with API routes In this approach your API deals with the authentication side and shares a session cookie with your front end. It is important to note that in order for this to work securely, both your API and front-end need to be hosted on the same domain. 1. In Kinde, go to **Settings > Applications > Add application** and choose **Back-end web** application. 2. Follow the **Quick start** guide for your respective technology to initiate the Kinde client. This can be found in the menu when you view details of the application in Kinde. 3. Implement `/login` and `/register` and `/callback` routes on your API. For example in Express this might look something like: ```typescript const app = express(); app.get("/login", async (req, res) => { const loginUrl = await kindeClient.login(sessionManager); return res.redirect(loginUrl.toString()); }); app.get("/register", async (req, res) => { const registerUrl = await kindeClient.register(sessionManager); return res.redirect(registerUrl.toString()); }); ``` 4. In your front-end SPA, your login and register buttons will point to the API endpoints you set up above - e.g `[api.myapp.com/login](<http://api.myapp.com/login>)` ```jsx <a href="https://<api.myapp.com>/login">Sign in</a> ``` This will handle the redirect to Kinde where your user will authenticate. 5. You will also need an API route to handle the callback - again using Express as an example: ```jsx app.get("/callback", async (req, res) => { const url = new URL(`${req.protocol}://${req.get("host")}${req.url}`); await kindeClient.handleRedirectToApp(sessionManager, url); // Code to creates a stateful session goes here return res.redirect("/"); }); ``` Your API should create a stateful session which is shared with your front end via a `secure`, `same-site`, `httpOnly` cookie. As previously mentioned, for this to be secure it should be on the same domain. In this architecture the user is only authenticated with your API which means your frontend SPA doesn't know their identity. For this reason it is a good idea to create a `/profile` route on your API to fetch the identity of the user after authentication.

# Build - Applications - Set a default login route for an application

> Guide for setting default login routes to handle session issues and provide fallback authentication endpoints for applications with expired or problematic sessions.

default login route, login URI, session management, authentication loop, callback URLs, safety net redirect
applications, authentication, routing

A default login route provides a kind of ‘safety net’ redirect for users who encounter issues with authenticated sessions in your application. This route provides the login endpoint for the application, so users can navigate back to the sign in screen to restart an authentication session. There are a number of reasons that default login routes are useful. - A bookmarked link to an application tries to access an expired session - A user hits ‘back’ in their browser while authenticating and the session cannot resume - A user has cookies disabled and the redirect URI sends them into an authentication loop - A link in an invitation or verification email fails when a past session has not closed properly ## To set default login routes We recommend setting a default login route for all your front-and back-end applications. 1. In Kinde, go to **Setting > Applications**. 2. Select **Configure** on the relevant application. 3. In the left menu, select **Authentication**. 4. Scroll to the **Callback URLs** section. 5. Add the **Application login URI.** This is the default login route for resolving session issues. Hits the /auth endpoint to redirect back to your application sign in page. E.g. `https://app.yourapp.com/api/auth/login` 6. Select **Save**. 7. Repeat for each relevant application.

# Build - Applications - Rotate client secret

> Security guide for rotating client secrets in backend and machine-to-machine applications including step-by-step rotation process and dependency management.

client secret rotation, security, backend apps, M2M apps, secret management
applications, security

To ensure your applications remain secure, you can periodically rotate the Client secret stored in the Kinde-side application. You can only do this for back-end and machine-to-machine applications. Note that you can only rotate a client secret by completely deactivating the old one. So you must update any dependent apps, connections, and services with the new secret ASAP. ## Rotate client secret in Kinde 1. In Kinde, go to **Settings > Applications**. 2. Select **View details** on the relevant application. 3. Scroll to the **Admin actions** section. 4. If you have previously retained a Client secret you’ll need to delete the previous secret first: 1. Take a copy of the previous secret if you want to. 2. Select **Delete previous client secret.** 5. Select **Rotate**. A confirmation window opens. 6. If you want, opt in to rotate the client secret and retain the old secret. You may need to [upgrade plans](https://kinde.com/pricing/) to do this. 7. If you don’t want to retain the previous secret, or you don’t want to upgrade, leave the switch off. 8. Select **Rotate client secret**. 9. Update any dependent apps, connections, and services with the new secret.

# Build - Domains - Add a custom domain for an organization

> Comprehensive guide for adding custom domains to organizations including DNS configuration, SSL certificate provisioning, verification monitoring, and troubleshooting steps.

custom domain, organization domain, DNS records, SSL certificate, subdomain, domain verification, social auth callback
domains, organizations, ssl

<Aside type="upgrade"> This is an advanced org feature that is only available on the [Kinde Scale plan](https://kinde.com/pricing/). Charges apply for each organization that uses [advanced org features](/authenticate/custom-configurations/advanced-organization/). </Aside> When you add a custom domain to an organization, it sets the domain URL for authentication to the custom domain, instead of a Kinde domain address. For example `account.domain.com` instead of `domain.kinde.com`. It's important to include a subdomain for this procedure to work. Common subdomain names include `account` , `id` , or `auth`, e.g. `account.domain.com`. Kinde currently supports a single custom domain per organization. ## Step 1: Add the custom domain to the organization 1. In Kinde, go to **Organizations**. 2. Browse or search for the organization. 3. In the list, select the organization to open the **Details** page. 4. Select **Custom domain** in the menu. 5. Select **Add custom domain** and enter the custom domain you want. Be sure to include the subdomain, e.g. `account.domain.com`. 6. Select **Save**. The DNS details are generated. Use them to add DNS records to your domain provider site. ## Step 2: Add DNS records to your domain provider site Instructions will vary depending on your domain provider. Here’s the general process. 1. Sign in to your domain provider admin portal. 2. Navigate to the page where you can add DNS records. 3. Use the details provided by Kinde to add CNAME DNS records. ## Step 3: Monitor for verification and SSL certificate provisioning 1. Open the individual organization record. 2. Select **Custom domains**. 3. The custom domain panel DNS records shows the current verification status. The verification process can take anywhere from a few minutes to a couple of hours. When it completes, the verification statuses will change. Here are the possible statuses you will see: - Unverified - Verification in progress - Verified - Verification failed (check that DNS records are correct on your domain provider site and try again). - Unprovisioned - Provisioning in progress - Provisioned (SSL certificate issued) - Provisioning failed Once successfully provisioned, your custom domain will then be used for this organization. You will also receive email confirmation. <Aside type="warning"> The challenge DNS record needs to remain in place after verification in order for us to renew your SSL certificate on an ongoing basis. </Aside> ## Step 4: Update provider social auth apps and codebase If the organization's users will use social authentication to sign in, update the provider apps such as Google or GitHub to include the custom domain callback (e.g. `account.example.com/login/callback`) as an authorized redirect URI. How you do this will be different for each provider you use. Remember to also update your application's codebase to reference the custom domain. ## Troubleshoot custom domain issues If you encounter any errors, such as the verification taking too long, re-check the DNS records you created on your provider site, to ensure the details are correct. ### No subdomain It's important to include a subdomain for the procedure to work, e.g. `account.domain.com`. If you left out the subdomain, delete the custom domain in Kinde, re-add it using the subdomain, and add the newly generated DNS details to your provider records. ### Tips for the DNS set up When you create the DNS records be sure to match the format and details provided in Kinde. For example, if your custom domain is `account.example.com`, then: Host = `account` Record type = `CNAME` Value = `account.example.com` TTL = Leave as default Routing policy = Leave as default ### Using multi-level subdomains If you are using a multi-level subdomain, like `multi.subdomain.example.com`, how you set up DNS records will depend on how your zones are set up. The details provided in the admin console assumes the domain entered is adding a single level to your DNS zone, but if you are adding more than one level you’ll need to create others. So if your business is `multi.subdomain.example.com` and your zone is `example.com`, you need to create a DNS entry for `multi.subdomain`, as well as for `_acme-challenge.multi.subdomain`. ## Remove a custom domain for an organization <Aside type="warning"> If your users are already signing in through a custom domain, removing it can break their authentication experience. </Aside> 1. Open the **Organization** record in Kinde. 2. Select **Custom domain** in the menu. 3. In the custom domain details area, select the three dots menu and then select **Remove custom domain**. Respond to the confirmation message.

# Build - Domains - Use your own custom domain

> Complete guide for setting up custom domains in Kinde including DNS configuration, verification process, SSL certificate provisioning, and integration with social authentication providers.

custom domain, DNS records, CNAME, SSL certificate, subdomain, social auth, domain verification, multi-level subdomains
domains, custom-domain, dns

By default, Kinde issues a Kinde subdomain when you first register. But for your production environment you can use your own custom domain instead of Kinde’s as your URL. For example, `account.example.com` instead of `mydomain.kinde.com`. There are a few reasons you may wish to do this. - It will give your users the impression they have never left your application to authenticate, creating a seamless user experience. - For Single Page Applications (SPAs) it means we can securely set a first party cookie meaning authentication state persists for full-page refreshes and new tabs. - If you also register the domain in the configuration for any social providers you are using, the social providers auth screen will be customized with your app details. <Aside title="When to still use the Kinde domain"> Even if you use custom domains, you need to use your Kinde domain for Kinde Management API access and machine-to-machine applications. </Aside> ## Before you begin - Name your custom domain. It needs to include a subdomain for this procedure to work. Common subdomain names include `account` , `id` , or `auth`, e.g. `account.example.com`. - Make sure your application is configured to use the exact custom domain. This includes updating the environment variables and any relevant configuration files. For example, the KINDE_ISSUER_URL needs to be updated to the custom domain. - Ensure that the callback and logout redirect URLs in your Kinde settings are updated with the custom domain. This can be done in the Kinde dashboard under Settings > Applications > [your app] > View details. ## Set up in Kinde Note that the verification process can take anywhere from 5 minutes to a few hours, depending on who your domain provider is. See [tips for the DNS set up](/build/domains/pointing-your-domain/#tips-for-the-dns-set-up) below. 1. Go to **Settings > Environment > Custom domain**. 2. Select **Add custom domain** 3. In the dialog, enter your custom domain. Be sure to include the subdomain, for example `account.example.com`. 4. Select **Save**. DNS details appear. You need to add these to your domain provider site. ## Add CNAME DNS records 1. Go to your domain provider website. 2. Create CNAME DNS records using the DNS details generated above. Apologies that we can’t offer instructions for all situations, as this will be different depending on your provider. But here are the setup steps for [Godaddy](https://au.godaddy.com/help/add-a-cname-record-19236), [Cloudflare](https://community.cloudflare.com/t/adding-dns-records/52718), and [NameCheap](https://www.namecheap.com/support/knowledgebase/article.aspx/9646/2237/how-to-create-a-cname-record-for-your-domain/). <Aside type="warning"> Cloudflare users: DNS entries must be DNS-only, not proxied. </Aside> ## Check verification status in Kinde Once you have created the DNS entries, Kinde will start the verification process. This can take anywhere from a few minutes to a couple of hours. When it completes, the verification status will change to 'Provisioned' and an SSL certificate will be provisioned. Your domain will then be used instead of Kinde’s. You will also receive an email notification when the process is complete. If you encounter any errors, such as the verification taking too long, re-check the DNS records you created on your provider site, to ensure the details are correct. <Aside type="warning"> The challenge DNS record needs to remain in place after verification in order for us to renew your SSL certificate on an ongoing basis. </Aside> ## Update your code - Update your code to use the custom domain. ## Add the custom domain to social sign in When you use social connections to authenticate users, you need to add the callback URL to the provider app so that the custom domain shows on the sign in form, instead of kinde.com. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/9247cb87-9e7a-4977-b3f5-6c8b52f64200/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> If you haven't set this up, follow these instructions for the [relevant social provider](/authenticate/social-sign-in/add-social-sign-in/). If you already have social auth set up, make sure you add the custom domain callback (e.g. `account.example.com/login/callback` as an authorized redirect URI in the provider app. ## Domains and auth end points Auth endpoints are available for both custom domains and your Kinde subdomain. You can get tokens from either end point, but they are not interchangeable. For example, if you get an ID and access token from `account.example.com`, it cannot be used with `mydomain.kinde.com`. ## Local domain Currently, Kinde only supports `*.localhost` for non-https traffic. ## Tips for the DNS set up When you create the DNS records for linking your own domain to Kinde, be sure to match the format you have used above. For example, if your custom domain is `account.example.com`, then: Host = `account` Record type = `CNAME` Value = `account.example.com` TTL = Leave as default Routing policy = Leave as default ## Using multi-level subdomains If you are using a multi-level subdomain, like `multi.subdomain.example.com`, how you set up DNS records will depend on how your zones are set up. The details provided in the admin console assumes the domain entered is adding a single level to your DNS zone, but if you are adding more than one level you’ll need to create others. So if your business is `multi.subdomain.example.com` and your zone is `example.com`, you need to create a DNS entry for `multi.subdomain`, as well as for `_acme-challenge.multi.subdomain`. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/ee01b968-bea8-4082-7680-cde0522fbf00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> There are many different ways people manage multi-level domains and zones, and unfortunately we can’t cover all variations in these instructions.

# Build - Domains - Org handles and dynamic callbacks for subdomains

> Guide for implementing organization handles and dynamic callbacks to route users to correct subdomains in multi-tenant applications with authentication flow examples.

organization handles, dynamic callbacks, subdomains, multi-tenant, callback URLs, organization routing
domains, organizations, callbacks

If you use [organizations in Kinde](/build/organizations/multi-tenancy-using-organizations/), you probably build and maintain multi-tenant software. And if you manage multiple subdomains for those tenants, you'll need to make sure they are redirected to the right subdomain when they authenticate. The most effective way to do this is via ‘organization handles’ supported by a dynamic callback URL. ## How it works For every organization that has its own subdomain, you will add an organization handle. The handle and the subdomain need to match exactly. Here's an example. | Organization | Handle | Subdomain | | --- | --- | --- | | Red | red | red.everycolor.com | | Green | green | green.everycolor.com | | Blue | blue | blue.everycolor.com | Then you add one dynamic callback URL to your application that routes all the users to the correct subdomain via the organization handle: `{organization.handle}.everycolor.com`. The result is that users of the **Red** org will be automatically redirected to `red.everycolor.com` when they authenticate, and so on. ## Example authentication flow ![showing how handles and a dynamic callback route users during authentcation](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/e4e8e1ca-564f-4e25-602f-5f7cc51b1700/public) ## Requirements - This feature works for top level subdomains only - Handles must exactly match subdomain names - Handles must be unique for each organization ## Add the dynamic callback URL to your application 1. In Kinde, go to **Settings > Applications > [your application] > Details.** 2. Scroll to the **Callback URLs** section and in the **Allowed callback URLs** field, add `https://{organization.handle}.<yourdomain>.com.`, and replace `<yourdomain>` with your primary domain. For example, `https://{organization.handle}.everycolor.com` 3. Select **Save**. 4. Repeat from step 1 for each app you want to enable this for. ## Add handles to your organizations You can do this [via API](/kinde-apis/management#tag/organizations/patch/api/v1/organization/{org_code}) using the `handle` parameter, or manually in Kinde (see below). 1. In Kinde, go to **Organizations > [your organization] > Details.** 2. Enter the subdomain name for this organization in the **Handle** field, without the added URL information. For example, enter `blue` for the subdomain `https://blue.everycolor.com`. Ensure the subdomain name and the handle match exactly. The handle must also be unique within your Kinde business. 3. Select **Save**.

# Build - Env variables - Add and update environment variables

> Step-by-step guide for adding, updating, and deleting environment variables in Kinde including naming conventions and sensitive variable management.

add environment variables, update environment variables, delete environment variables, sensitive variables, variable naming, environment configuration
env-variables, configuration

Environment variables are key-value pairs configured outside your source code so that each value can change depending on the [Environment](/build/environments/environments/). Common use cases are for API keys, and URLs or IDs which change per environment, as they can be more easily updated wherever the key is referenced. You can store as many environment variables in Kinde as you want. ## Recommendations for variables - Choose a key name that helps you easily recognize what the variable is for. - Use descriptive, purpose-indicating names (e.g., `DATABASE_URL`, `API_KEY_STRIPE`). - Use a consistent case, such as CamelCase, snake_case, kebab-case, etc. We recommend using UPPER_SNAKE_CASE for environment variables as this is a widely adopted convention. - Mark a variable as sensitive if the value should be kept secret. For example an API key or password. - Consider adding a prefix for different environments (e.g., `PROD_`, `DEV_`). - Document the purpose and format of each variable for team reference. ## Add an environment variable 1. Go to **Settings > Data management > Env variables**. 2. Select **Add environment variable**. 3. In the dialog that opens, enter the **Key** and the **Value**. 4. Select if the key is **Sensitive**. 5. Select **Save**. ## Update an environment variable value You can only update the value of non-sensitive variables. If you need to update a sensitive variable value, you’ll need to delete and then create a new variable. 1. Go to **Settings > Data management > Env variables**. A list of all your variables is shown. 2. Select **Edit variable** in the … three dots menu next to the relevant non-sensitive variable. The **Edit variable** dialog opens. 3. Change the **Value**. You cannot change the `key`. 4. Select **Save**. ## Delete an environment variable 1. Go to **Settings > Data management > Env variables**. A list of all your variables is shown. 2. Select **Delete variable** in the … three dots menu next to the relevant variable. A confirmation window appears. 3. Confirm the variable deletion.

# Build - Env variables - Store environment variables in Kinde

> Guide for storing environment variables in Kinde including sensitive and non-sensitive variable types, environment-specific configuration, and security best practices.

environment variables, sensitive variables, secret management, key-value pairs, workflow variables
env-variables, security, workflows

Environment variables are key-value pairs that enable access to applications across different environments and systems. Once you can bring your code into Kinde via workflows, it’s important to be able to reference environment variables using a key, instead of hardcoding these values into your code. Kinde allows you to create and store sensitive (secret) and non-sensitive key-value pairs. ## Store variables for each environment You need to set environment variables separately, in each of your Kinde environments. You can’t share keys across development, testing, staging, and production, etc. ## Sensitive and non-sensitive environment variables The environment variables you store in Kinde can be sensitive or non-sensitive. - **Sensitive environment variables** contain confidential data (e.g., passwords, API keys, credentials) that must be handled with care to avoid security risks and data breaches. When you mark an existing environment variable as sensitive, Kinde converts it to a non-readable format and the value can no longer be read by you or your team. It can only be read by Kinde workflows at runtime. The value will also be redacted in any logs. - **Non-sensitive environment variables** handle non-confidential settings (e.g., language, application name, etc.) that don’t pose a risk if exposed. ## Examples of environment variables | Variable Name | Type | Description | Example Value | | --- | --- | --- | --- | | API_KEY | Sensitive | Authentication key for external services | `********` | | CLIENT_SECRET | Sensitive | OAuth client secret | `********` | | APP_NAME | Non-sensitive | Application identifier | `my-kinde-app` | | LOG_LEVEL | Non-sensitive | Application logging configuration | `debug` |

# Build - Environments - About environments

> Overview of Kinde environments including production and non-production environments, environment management, rate limiting considerations, and development workflow best practices.

environments, production environment, non-production, staging, testing, environment management, rate limiting
environments, development, production

Kinde allows you to run multiple environments to support your software development cycle. All plans come with one production environment and one non-production environment. Higher plans come with additional non-production environments, so you can add staging, testing, beta, etc. to meet your team’s needs. <Aside> You must use the default production environment (the one you got when you first signed up to Kinde) as your production environment. This is important for when you are [ready to go live](/build/environments/production-to-live/). You cannot delete the production environment or add additional production environments. </Aside> You can see the environment you are working in at the top left of the home page when signed in. ## Take care using multiple environments Unless you are a developer, we recommend you stay in the production environment for viewing and working with your Kinde account. For developers who want to test new user configurations or make other changes, do this in a non-production (testing or staging) environment first, before replicating in the production environment. ## Rate limiting for live production environments Before you make your production environment live, [follow ](/build/environments/production-to-live/)[this checklist](/build/environments/production-to-live/). It is critical that all [third-party authentication](/authenticate/authentication-methods/set-up-user-authentication/) connections (such as social connections or enterprise connections) are set up with the third-party’s Client ID and Client secret. If you leave these fields blank during setup, Kinde’s credentials will be used as a proxy, and rate limits will apply. Note that you can leave these fields blank in your non-production environments. Non-production environments cannot be made live. ## View and manage environments Select the environment drop-down in the top left of the home screen. From here you can: - Switch to another environment - View all your environments (and create additional ones) - View environment settings ## Add an environment You can only add non-production environments. 1. Select the environment drop-down in the top left of the home screen, and select **All environments**. 2. On the **Environments** page, select **Add environment**. 3. Enter a name and code for the environment, then select **Save**. ## Switch between environments Select the environment drop-down in the top left of the home screen, and select the environment you want to switch to. ## Change the name of an environment 1. Switch to the environment you want. 2. Select the environment drop-down in the top left of the home screen and choose **Environment settings**. 3. Change the environment name and select **Save**. ## Delete a non-production environment You cannot delete the production environment. 1. Select the environment drop-down in the top left of the home screen, and select **All environments**. 2. On the environment you want to delete select the three dots, then select **Delete environment**. 3. Confirm you want to delete the environment. This action is irreversible. ## Move data between environments There is currently no way to shift data or configuration settings between environments. For now, you need to replicate settings manually, and export/import data or use the [Kinde Management API](https://docs.kinde.com/kinde-apis/management/). It's on our roadmap to make this easier someday.

# Build - Environments - Prepare your production environment to go live

> Comprehensive checklist for preparing production environment to go live including authentication setup, domain configuration, security measures, and analytics integration.

production environment, go live, live checklist, third-party authentication, custom domain, multi-factor authentication, Google analytics
environments, production, go-live

As you build your business on Kinde and configure connections and features, you will eventually want to set your production environment to be ‘live’. This indicates the status of the environment to anyone making changes. Follow the checklist below before you switch your environment to show as 'Live'. <Aside title="The live button is not actually live"> The 'Live' switch is for indicating the environment is live. It does not actually change or do anything in relation to your app. Your app can be live on Kinde without the switch being on. </Aside> ## Go-live checklist Before you go live, make sure you’ve done the following: - (Required) Enter a `Client ID` and `Client secret` in all your [third-party authentication](/authenticate/authentication-methods/set-up-user-authentication/) connections (such as social connections or enterprise connections). If you left these fields blank at setup, Kinde’s credentials are used and rate limits will apply. - (Required) Add Twilio details if you have [phone or SMS authentication](/authenticate/authentication-methods/phone-authentication/) switched on. - Add a [development environment](/build/environments/environments/) to continue building your product on Kinde without affecting the live production instance. - Add [policies and terms](/manage-your-account/business-information/policies-terms/) so that users can access and agree to these on sign up. - Configure [custom email details](/get-started/connect/customize-email-sender/) so that authentication emails sent to your users come from your business, and not Kinde. - Connect [your own domain](/build/domains/pointing-your-domain/) and customize the [sign in screens](/design/brand/global-brand-defaults/) to provide a seamless and branded experience for users. - Set up [multi-factor authentication](/authenticate/multi-factor-auth/enable-multi-factor-authentication/) to add extra layers of security for user sign in. - Connect [Google analytics](/manage-users/view-activity/track-user-sign-in-with-google-analytics/) to track sign ups through Kinde. - Set up [default roles](/manage-users/roles-and-permissions/default-user-roles/) for assigning to new users when they sign up. ## Switch an environment to appear live When you are ready, turn the 'Live' indicator switch on. 1. Open your production environment. 2. Go to **Settings > Environment > Details.** 3. Scroll to the **Environment status** section and toggle the switch to **Live**. 4. Select **Save**. If there are any issues, an error message will appear. Where there are no errors, your Kinde environment should now show as 'Live. ![Status of production environment in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/ac1aa617-bcb6-4a7f-02d3-b51aa7bcc600/public)

# Build - Organizations - Add and manage organizations

> Step-by-step guide for adding and managing organizations in Kinde, including creating new organizations, modifying the default organization, and understanding organization codes.

add organizations, manage organizations, default organization, organization code, external organization ID
organizations, multi-tenancy

All Kinde businesses come with one default organization. Some businesses will create more organizations to support a multi-tenancy business model. [Learn more about organizations](/build/organizations/multi-tenancy-using-organizations/). - To add organizations manually, follow the procedure below. - To add multiple organizations, we recommend importing them. See [Import organizations](/build/organizations/import-organizations/). ## Add an organization 1. In the main menu, select **Organizations.** The **Organizations** page opens. 2. Select **Add organization**. 3. Enter the name of the organization. 4. If you want, add an **External organization ID**. This is the ID you use to identify the organization, and enables you to import users and assign them to organizations by matching to this ID. 5. Select **Save**. The organization now appears on the **Organization** page, and is assigned a unique code. Developers need this code for using the Kinde API and SDKs. 6. To view the details or get the code again, select the three dots and then select **View details**. ## Change the name of the default organization When you first sign up to Kinde, you have one organization already created for you. This is the default organization that all users will be added to, until you create other organizations. You can change the name of this organization, but not the unique code. 1. In the main menu, select **Organizations.** The **Organizations** page opens. 2. Select the three dots next to the default organization, and select **View details**. 3. Edit the organization name and select **Save**.

# Build - Organizations - Allow organization creation on sign up

> Guide for controlling organization creation during user signup, including how to disable automatic organization creation for new registrations.

organization creation, signup, self-signup, is_create_org
organizations, signup

By default, Kinde allows organizations to be created when a user signs up if the `is_create_org` param is passed. This is helpful if your customers are organizations and you want them to be able to self-sign up. If you want to, you can disable organization creation for new sign ups. ## Switch off organization creation on sign up You can switch this option off at any time. 1. Go to **Settings > Environment > Policies**. 2. Switch off the **Allow organization creation on sign up** option. 3. Select **Save**.

# Build - Organizations - Manage user sign up to organizations

> Comprehensive guide for managing user signup to organizations, including allowing specific organization registrations, default organization settings, and disabling self-signup with security considerations.

user signup, organization registration, default organization, user policies, registration management
organizations, user-management, signup

Kinde lets you easily manage which organizations users can sign up to. For example, you can: - allow or disable users from signing up to specific organizations (if you manage multiple organizations) - allow or disable automatic sign up to the default organization (all Kinde businesses have a default) - disable signups completely, and add users manually, via API, or by import. - disable organizations from being created when a user signs up - this is usually only needed by businesses who’s customers are also businesses (B2B). Follow the relevant procedure below to set up your preferences. ## Allow users to register to a specific organization Each organization you set up in Kinde will have a unique `org_code`. If you want users to sign up to a specific organization, the `org_code` must be passed with their registration request. You need to switch this functionality on per organization. <Aside type="warning" title="Caution"> The `org_code` in the http request is vulnerable to manipulation, so only allow registrations to organizations that you would allow anyone to sign up to. If this is not the case, we suggest you leave this switched off and add the user to the right organization later via the Kinde management API. </Aside> 1. Go to **Organizations** and select the organization. 2. On the **Policies** page, switch on the option to **Allow registrations**. 3. Select **Save**. Anyone can now register onto this organization if the `org_code` is passed with the registration request. ## Sign users up to the default organization If the organization being signed up to is not known when a user signs up, the default organization is used. This applies to users created via API and by import as well. If you want, you can switch this off to prevent sign-ups to the default org. <Aside type="warning"> Users must belong to an organization to be assigned roles and permissions </Aside> 1. Go to **Organizations** and open the default organization. 2. Go to **Policies**, then switch off the **Sign users up to the default organization if one can’t be detected** option. 3. Select **Save**. ## Disable user self-sign up You can disable user self-sign up altogether. You might do this if you want to add and manage users manually, by API, or by import only. 1. Go to **Settings > Environment > Policies**. 2. Switch off the **Allow users to sign up** option. 3. Select **Save**. This setting applies to all apps in your business. <Aside type="warning"> Leave this on if you plan to use [JIT provisioning for enterprise connections](/authenticate/enterprise-connections/provision-users-enterprise/). </Aside> ## Sign in experience for users in multiple organizations If a user belongs to multiple organizations, they will be prompted to select an organization when they sign in unless they pass a specific `org_code`. If you use enterprise authentication, users will be recognized by their email domain and will be forwarded to the correct identity provider.

# Build - Organizations - Delete an organization

> Guide for safely deleting organizations including data cleanup considerations, user reassignment, and irreversible deletion process with safety precautions.

delete organization, organization removal, data cleanup, user reassignment
organizations, data-management

You can delete organizations in Kinde, but doing so removes all users from the organization, and deletes organization settings, feature flags, and data. Users who belong to other organizations remain assigned to those organizations. Users who only belong to the organization you are deleting will be removed, but not deleted from Kinde. ## Caution: Before you delete Deleting an organization cannot be reversed, so we recommend you: - [Reassign users to other organizations](/manage-users/about/manage-users-across-organizations/) (if you need to) - Review [feature flags](/releases/feature-flags/manage-feature-flags/) that might only apply to this organization - [Export any data](/manage-your-account/your-data/exporting-data/) that you want ## Deleting an organization 1. In Kinde, go to **Organizations**. 2. In the list, find the organization you want to delete. 3. Select the three dots menu at the far right and then select **Delete organization**. 4. In the confirmation window that appears, select **Yes, I definitely want to delete**, and then select **Delete organization**.

# Build - Organizations - Customize email sender for an organization

> Guide for customizing email sender settings for organizations including sender name and email address configuration with SMTP requirements.

email sender, organization branding, custom email, SMTP, email customization
organizations, email, branding

<Aside type="upgrade"> This is an advanced feature that is only available on the [Kinde Scale plan](https://kinde.com/pricing/) </Aside> If you want, you can set a unique email address and sender name for each organization you have. Users in the organization will receive emails from the email address and sender name you set, for example one-time passcode emails. You can change the customer sender name any time, but you must have a [custom email sender](/get-started/connect/customize-email-sender/) set up to change the email sender address. ## Change the email sender name for an organization 1. In Kinde, go to **Organizations**, then view an organization. 2. Select **Email**. 3. Add or change the **Sender name**. 4. Select **Save**. 5. To change the sender email, see below. ## Change the email sender address for an organization You must have a [custom SMTP email provider](/get-started/connect/customize-email-sender/) set up in Kinde, and your provider details configured with the address you are sending from. 1. In Kinde, go to **Organizations**, then view an organization. 2. Select **Email**. 3. Add or change the **Sender email**. 4. Select **Save**. 5. If you want, select **Send test email**. This lets you check the changes you made. ## Send a test email 1. In Kinde, go to **Organizations**, then view an organization. 2. Select **Email**. 3. Select **Send test email**. This lets you check the email details that your customer sees.

# Build - Organizations - Import organizations

> Guide for importing multiple organizations via CSV including file format requirements, import process, and integration with user bulk import workflows.

import organizations, bulk import, CSV import, external organization ID, B2B setup
organizations, bulk-import, csv

All Kinde businesses come with one default organization. For B2B business models, multiple organizations are usually required. [Learn more about organizations](/build/organizations/multi-tenancy-using-organizations/). Use this procedure to import multiple organizations into Kinde via CSV, before you [import users](/manage-users/add-and-edit/import-users-in-bulk/) into those organizations. You can also [add and manage organizations](/build/organizations/add-and-manage-organizations/) manually. ## Set up your CSV file Before importing, you need to set up the CSV file with the organization details: - Organization name - External organization ID The CSV should be set up like this: ```text name, id alpha, a001 beta, b002 charlie, c003 ``` ## Import organizations You can use this procedure to add new organizations or update the details of your existing organizations. 1. In Kinde, go to **Organizations** and then select **Import organizations**. 2. In the window that opens, select **Choose file** and select the CSV file. 3. Select **Import**. The **Organizations** window now shows the imported organizations or changes. Next: [Import users in bulk](/manage-users/add-and-edit/import-users-in-bulk/) and include the **external organization id** to assign users to the imported organizations.

# Build - Organizations - About organizations

> Overview of multi-tenancy using Kinde organizations including business models, tenant isolation, and user management across multiple organizational structures.

multi-tenancy, organizations, B2B, B2B2B, B2B2C, tenant isolation, business structure
organizations, multi-tenancy, business-models

Kinde is designed to support most business models and structures, from single entities to large enterprises. You can [run multiple businesses](/build/set-up-options/run-multiple-businesses/) on the Kinde platform, and you can also use organizations to separately manage sub-entities and user groups - known as multi-tenanting. ## What is multi-tenancy? Multi-tenancy is where a single instance of software (e.g. a business on Kinde), and its supporting infrastructure, can serve multiple customers. There are a number of ways that multi-tenancy can be done: - A single database with a tenant ID per tenant - A single database with a schema per tenant (how Kinde does it) - A database per tenant At Kinde we use a single database with a schema per tenant, which means each customer shares the application and a single database, but each tenant’s data is isolated and remains invisible to other tenants. ## Who needs to use organizations? If your business services businesses, who in turn service businesses or customers in a B2B2B or B2B2C model, you’ll need to set up organizations. For example, you might be: - a parent company running multiple stores, branches or membership groups. - a service or SaaS company managing access to a platform for different businesses and their customers. - a consultancy managing projects for different clients. ## Sample organization structure The diagram below shows an example of an organization structure. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/84dfbf3e-75bd-4f4a-d513-94088fc10100/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> An organizational structure outlines how certain activities are managed, including [user roles and permissions](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/). ## User management in organizations Organizations function to separate user groups or members, so you can separately control and manage access for them. Users can also belong to multiple organizations. For example, you may want freelancers or contractors to access all organizations. User management at the organization level, lets you: - Control who can access the organization - Set roles and permissions for each user in the organization

# Build - Organizations - Set access policies for an organization

> Advanced guide for setting organization-specific access policies including domain restrictions, auto-addition rules, and default role assignments for new members.

organization policies, access control, domain restrictions, default roles, organization security
organizations, access-policies, security

<Aside type="upgrade"> This is an advanced feature that is only available on the [Kinde Scale plan](https://kinde.com/pricing/). You can apply policies for 5 orgs, and then charges apply. </Aside> You can set policies for an organization to control access to the organization. When you set policies for an organization, this overrides any [policies set at the environment level](/build/set-up-options/access-policies/). This topic provides instructions for the following tasks: - Allow anyone to join the organization - Only allow users from specific domains to sign in to the organization (i.e. apply domain restrictions for an organization) - When users from specific domains sign up, add them as members to this organization - Assign specific roles to new members of an organization You may need to activate some features as you go. ## Go to the Policies section in your organization 1. In Kinde, go to **Organizations**. 2. Browse or search for the organization. 3. In the list, select the organization to open the details page. 4. Select **Policies** in the menu. 5. Configure policies using the following procedures. ### Configure access 1. If you want users to be able to join this organization if they pass the correct `org_code`, select **Allow org members to be auto-added**. 2. (Only in the default organization) Choose if you want to **Add users to this organization if no organization is specified** on sign up. ### Configure domain restrictions 1. Select **Allow org members to be auto-added** (if not already selected). 2. Select **Auto-add users from allowed domains**. 3. Enter the domains in the **Allowed domains** list. Use the format `domain.com` and not `https://www.domain.com`. This restricts users from joining the organization unless they belong to an allowed domain. If you leave this empty, users from any domain can sign up. 4. Select **Save**. ### Configure default roles for new members 1. In the **Default roles** section, select which roles will be assigned to new members when they sign up. ![Select default roles](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/6fc3e960-8bfe-427e-1e34-051b515aa600/public) 2. Select **Save**. ## Policy setting quick reference Note that your selections for each organization override the [global policy settings](/build/set-up-options/access-policies/). | To… | Do this… | | --------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | | Allow anyone to join this organization. | Select **Allow org members to be auto-added**. | | Sign up users who are not already associated with an organization, to the default organization. | Select **Add users to this organization if no organization is specified**. | | Allow only people from `specificdomain.com` to sign up to this organization. | Select **Allow self sign-up** and enter the `specificdomain.com` into the **Allowed domains** list. | | Allow only people from `specificdomain.com` to sign up to this organization and auto-add them seamlessly. | Select **Allow self sign-up** and enter the `specificdomain.com` into the **Allowed domains** list and select Auto-add users from allowed domains. | | Assign new members specific roles when they sign up | Select the **Default roles** you want assigned

# Build - Organizations - Give API access to an organization using M2M

> Guide for creating organization-scoped machine-to-machine applications to provide secure API access for automated systems and backend services within specific organizations.

organization m2m, api access, machine to machine, organization scoped, backend services
organizations, m2m, api-access

If you want to give automated systems, AI agents, or backend services access to data in a specific organization, you can do this securely using an **organization-scoped machine-to-machine (M2M) application**. This type of app is tied to a single organization and can only be used to access resources for that org. To create an org-scoped M2M app: 1. In Kinde, go to **Organizations**, then select the organization. 2. Select **Machine-to-machine apps**. 3. Follow the steps to create the app and assign the appropriate scopes. For full details, see [M2M access scoped to organizations](/machine-to-machine-applications/organization-scoped-m2m-apps/m2m-applications-for-organizations/).

# Build - Organizations - Kinde organizations for developers

> Comprehensive developer guide for working with Kinde organizations including creation, user assignment, self-signup flows, and organization management with code examples.

organizations, multi-tenancy, organization creation, user assignment, organization management, org_code
organizations, multi-tenancy, user-management

Organizations allow you to group your users into buckets. An organization in Kinde could represent a club, a company, a practice, a department - however you model your business. We’ll refer to them collectively as **organizations** in this topic. ## Important things to know about Kinde organizations - A user can belong to [multiple organizations](/manage-users/about/manage-users-across-organizations/) - The same user can have different [roles and permissions](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/) in different organizations - By default they inherit global styles - but you can [brand them individually](/design/brand/apply-branding-for-an-organization/) - There is a **default organization** where new users are placed if we don’t know which organization they belong to. Auto assigning to this organization can be [turned off](/build/organizations/allow-user-signup-org/#sign-users-up-to-the-default-organization). - You can also [turn off](/build/organizations/allow-user-signup-org/#allow-users-to-register-to-a-specific-organization) the ability for users to sign up to specific organizations. ## Creating an organization There are three ways of creating an organization. 1. [Add](/build/organizations/add-and-manage-organizations/) or [import](/build/organizations/import-organizations/) through the Kinde application. 2. Add through the [Kinde management API](/kinde-apis/management#tag/organizations/post/api/v1/organization). 3. Allow organizations to sign themselves up (see below). ## New organization self-sign up By default Kinde allows organizations to self-sign up to your project. You can [turn this off](/build/organizations/allow-org-create-on-signup/) in Kinde if you prefer to handle registration another way. ### Basic implementation To initiate the organization self-sign up flow pass the `is_create_org` parameter in the auth url when redirecting to Kinde. This will prompt the user to register an account and upon successful registration create an organization in the background on Kinde. Our SDKs contain helpers to achieve this. The below example is from the Kinde React SDK, which ships with a `createOrg` method. ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-react"; export const RegisterOrgButton = () => { const {createOrg} = useKindeAuth(); return ( <button onClick={createOrg} type="button"> Create Organization </button> ); }; ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. ### Providing an organization name If you want to pass an organization name to Kinde, you can pass it in the auth url with the `org_name` parameter. A common pattern is to provide an input field in your project for the user to type their preferred name. Here’s another example using React. ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-react"; import {useState} from "react"; const RegisterOrgForm = () => { const {createOrg} = useKindeAuth(); const [orgName, setOrgName] = useState(""); const handleSubmit = (e) => { e.preventDefault(); // 1. store whatever you need to in your project // 2. redirect to Kinde createOrg({org_name: orgName}); }; return ( <form> <label for="id_org_name">Org name</label> <input id="id_org_name" onChange={(e) => setOrgName(e.target.value)} type="text" /> <button onSubmit={handleSubmit}>Register</button> </form> ); }; ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. ## Assigning a user to an existing organization There are a few ways of doing this. 1. Go into Kinde and [add](/manage-users/add-and-edit/add-and-edit-users/) or [import](/manage-users/add-and-edit/import-users-in-bulk/) users manually. 2. Add users via the [Kinde management API](/kinde-apis/management#tag/organizations/post/api/v1/organizations/{org_code}/users). 3. Provide a sign up link from your product (see below). ### Signing up new users into an existing organization As noted earlier, Kinde has the notion of a **default organization** where new users are placed if we don’t know which organization they belong to. This can be [switched off](/build/organizations/allow-user-signup-org/#sign-users-up-to-the-default-organization), or you can pass an `org_code` parameter in the auth URL to specify which organization you would like users to sign up to. <Aside type="warning" title="Caution"> Caution: the `org_code` in the http request is vulnerable to manipulation, so only allow registrations to organizations that you would allow anyone to sign up to. If this is not the case, we suggest you leave this switched off and add the user to the right organization later via the [Kinde management API](/kinde-apis/management/). </Aside> Our SDKs provide specific helper methods for passing the `org_code` parameter. For example, in React, this can be achieved as follows: ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-react"; export const RegisterOrgButton = (orgCode) => { const {register} = useKindeAuth(); return ( <button onClick={() => register({org_code: orgCode})} type="button"> Register for this org </button> ); }; ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. ### Signing users into an existing organization The flows are slightly different depending on whether you supply an organization code to us in the auth url as `org_code` parameter. **No org code provided** If Kinde is not provided with an `org_code`, there are three possible outcomes: 1. If a user only belongs to a single organization they will be automatically signed into this organization. 2. If the user belongs to multiple organizations, after they have authenticated we present them with an organization selector that shows all the organizations they have access to. They can then choose one to continue. 3. If the user belongs to no organizations, they will be signed in without an organization, meaning the `org_code` claim will be omitted from the access token. Code wise there is nothing different to do from a standard sign in. Again, a React example: ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-react"; export const LoginButton = () => { const {login} = useKindeAuth(); return ( <button onClick={login} type="button"> Log in </button> ); }; ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. **Org code provided** If Kinde receives the `org_code` parameter in the auth url it means two things: 1. If you have set up [branding for the organization](/design/brand/apply-branding-for-an-organization/) we display this to the end user providing a much more customized experience 2. If the user is a member of multiple organizations we can skip the organization switcher step mentioned above and sign them straight into the requested organization. Our SDKs describe how to provide the `org code` in the auth url. Here’s an example from React. ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-react"; export const LoginOrgButton = (orgCode) => { const {login} = useKindeAuth(); return ( <button onClick={() => login({org_code: orgCode})} type="button"> Log in to org </button> ); }; ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. ## Getting the organization ID We refer to the organization’s ID as an `org_code` which is unique for each organization. Once a user has authenticated and is returned to your project we expose the `org_code` in their access token. Each SDK has a way of accessing this. For example in React: ```jsx const {getOrganization} = useKindeAuth(); console.log(getOrganization()); //returns {orgCode: "org_xxxxxxxxxx"} ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. ## Getting the list of all organization IDs a user belongs to If a user belongs to multiple organizations, you might find it useful to get a list of them. You could do this in a couple of ways: 1. Via the [Kinde management API](/kinde-apis/management#tag/organizations) 2. Reading the `id_token` (see below). ### Using the id_token to get a list of organization IDs We provide an array of organization codes in the `org_codes` claim of the `id_token`. You can either use a JWT parser to extract these, or use our SDKs provide helper methods. In React you can use the following helper: ```jsx const {getUserOrganizations} = useKindeAuth(); console.log(getUserOrganizations()); //returns {orgCodes: ["org_1234", "org_5678"]} ``` ## Roles and Permissions A user can have different roles and permissions per organization. This means they can have an `admin` role in Organization ABC but a `member` role in Organization XYZ. You can manage these roles and permissions: 1. In the [Kinde admin area](/manage-users/roles-and-permissions/user-permissions/) 2. Via the [Kinde Management API](/kinde-apis/management#tag/permissions) 3. Read them from the `access_token` (see below). Note that only permissions specific to the organization the user is signed into will be returned. ### Using the access_token to get a list of permissions We provide an array of permissions in the `permissions` claim of the `access_token`. You can either use a JWT parser to extract these, or using our SDK helper methods. In React you can use the following helper: ```jsx const {getUserOrganizations} = useKindeAuth(); console.log(getUserOrganizations()); //returns {orgCodes: ["org_1234", "org_5678"]} ``` ### Using an SDK for permission-based access control Our SDKs also ship with helpers for handling permission checks. For example in React you could use: ```jsx const {getPermission} = useKindeAuth(); getPermission("create:todos"); // {orgCode: "org_1234", isGranted: true} ``` Then you could gate the feature as follows: ```jsx { getPermission("create:todos").isGranted ? <button>Create todo</button> : null; } ``` See the [relevant SDK doc](/developer-tools/about/our-sdks/) for your stack, for examples on how to do this. ## Release management You can use feature flags to provide different features to different organizations. This is especially helpful if you want to beta test a new feature for your project and only release it to selected organizations. You can manage these feature flags: 1. In the [Kinde admin area](/releases/feature-flags/add-feature-flag/) 2. Via the [Kinde Management API](/kinde-apis/management#tag/feature-flags) 3. Read them from the `access_token` (see below). ### Using the access_token to get a list of feature flags We provide an array of flags in the `feature_flags` claim of the `access_token`. You can use a JWT parser extract these, or use an [appropriate SDK](/developer-tools/about/our-sdks/) for handler examples. Here’s an example from the React SDK. ```jsx feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ```

# Build - Organizations - Customize the self-serve portal for an organization

> Use advanced organizations to override the self-serve portal setting for individual organizations. For example, make a function available in one organization that is not suitable for another org.

self-serve, plan, bill, payment method, SSO
self-serve portal, manage organizations, self-manage, SSO, plan management, payment details

<Aside type="upgrade"> This is an advanced feature that is only available on the [Kinde Scale plan](https://kinde.com/pricing/) </Aside> If an organization requires a unique setup for the self-service portal, you can do this using an advanced organization function. If you set this up, the authorized members of the organization will be able to perform the selected functions. 1. In Kinde, open the organization you want to customize. 2. In the side menu, select **Self-serve portal**. 3. If you don't have Advanced organizations switched on, enable this now. 4. Switch on the **Override environment settings** option. ![Switch to override](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/9461ff2f-0c8e-4f2a-0dbb-f6db420bb400/public) 5. Select the options you want to be available in the self-serve portal for this org. 6. Select any additional changes you want to make for members of the org (users) to access. Note that individual access is still controlled via system roles. 7. Select **Save**. Learn more about [setting up the self-serve portal for an organization](/build/self-service-portal/self-serve-portal-for-orgs/).

# Build - Set up options - Customer self-serve portal

> Intro to concept of self-serve portals in Kinde, including what functions they include, how to use them, and when to set them up.

organization portal, self-serve portal, user portal, billing portal, portal permissions
self-serve-portal, organizations, users, billing

Customer support is one of the higher overheads for a SaaS business. For paying customers, the expectation is that they get help when needed, for example, to manage their account or get assistance with your app. Kinde lets you configure a self-serve portal so authorized customers can self-manage functions provided by Kinde. A self-serve portal means your customers can make account changes without contacting you for support, saving everyone time and money. There's two types of portal: one for end users (B2C), and one for organizations (B2B). ## Watch Dave's portal demo in 90 seconds <YoutubeVideo videoId="Q3HW6Mgj6wA" videoTitle="Customer portal in 90 seconds"/> ## Self-serve portal for organizations In the organization portal, you can allow org members to manage: - Account details - Payment details (if you have billing set up) - API Keys (Paid plans) - Members and roles (Coming soon - Paid plans only) - SSO enterprise connections (Coming soon - Kinde Scale plan only) You can enable all functions or limit them to what you offer. [Set up a self-serve portal for an org](/build/self-service-portal/self-serve-portal-for-orgs/) <Aside> If you are on the Kinde Scale plan, you can configure the [portal per organization](/build/organizations/self-serve-portal-per-org/). E.g. allow some functions for some customers and not others. </Aside> ## Self-serve portal for users In the user portal, you can allow users to manage: - Account details - Payment details (if you have billing set up) - Multi-factor auth settings (coming soon) - API Keys [Set up a self-serve portal for users](/build/self-service-portal/self-serve-portal-for-users/) ## Self-serve portal settings These are the self-serve portal settings you can enable. ![Self-serve portal settings in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/1fd3505c-883b-4b01-8dff-e028e25b6300/public) ## Current limitations Currently, we don't support any customer design for the portal appearance. However, you can build your own portal and use the [Kinde API](https://docs.kinde.com/kinde-apis/management/) endpoints to provide the functions.

# Build - Set up options - Set global access policies

> Guide for setting global access policies including self-signup controls, domain restrictions, organization creation, and social profile synchronization settings.

access policies, domain restrictions, self signup, organization creation, social profile sync, global policies
access-policies, security, user-management

This topic is about setting user access policies at the environment level. If you want to apply user access policies per organization, see [Set access policies for an organization](/build/organizations/organization-access-policies/) This topic covers the following tasks: - Allow anyone to sign-up for an account - Create an organization when someone signs up (for B2B businesses usually) - Allow only users from specific domains to sign up (i.e. restrict sign up based on email domain) - Enable profiles from social providers to sync with Kinde profiles (recommended if you allow social sign in) ## Set policies for all organizations 1. In Kinde, go to **Settings > Environment > Policies**. 2. If you want users to be able to sign up or register to your application, select **Allow self sign-up**. 3. If you want to restrict which domains can sign up to your applications, enter domains in the **Allowed domains** list. Use the format `domain.com` and not `https://www.domain.com`. If you leave this empty, users from any domain can sign up. 4. Choose if you want to **Allow organization creation on sign up**. This is common for B2B businesses. 5. Select **Sync user profiles on sign in** if you want to keep basic user profile data provided by third-party sources (like Google, GitHub, etc.) in sync with Kinde profiles. You only need to select this if you allow sign-up and sign-in using social providers. 6. Select **Save**. ## Policy setting quick reference Note that global access policies can be overriden at the individual organization level if you are on a [Kinde Scale plan](https://kinde.com/pricing/) and activate the Advanced organization feature. | To… | Do this… | | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | | Allow anyone to sign up to your applications. | Select **Allow self sign-up**. | | Allow only people from `specificdomain.com` to sign up to your applications. | Select **Allow self sign-up** and enter the specificdomain.com into the **Allowed domains** list. | | Allow anyone to sign up to your applications and create an organization if they are a business. | Select **Allow self sign-up** and **Allow organization creation on sign up**. |

# Build - Set up options - Configure attack protection

> Guide for configuring attack protection including brute force protection settings, credential enumeration protection, and security best practices for account lockouts.

attack protection, brute force protection, credential enumeration, account lockout, security settings, failed sign-in attempts
security, attack-protection, brute-force

Attack protection is always on, and Kinde ships with sensible defaults to keep your product protected without you lifting a finger. There are some things you can configure. ## Set brute force protection 1. In Kinde, go to **Settings > Attack protection**. 2. Select **Brute force protection**. 3. Set how many sign-in attempts users get before being locked out of their account. You can choose the Kinde default of 5 or set a custom amount. 4. Set how long the account lockout lasts before users can sign in again. You can accept the Kinde default of 5 minutes or set a custom time, up to 60 minutes. 5. Select **Save**. ### What counts as a failed sign-in attempt - incorrect password entered - incorrect OTP code entered - incorrect recovery code entered - incorrect MFA response entered ## Enable credential enumeration protection Enumeration attacks are where an attacker tries to verify if an account exists using your credentials. One of the ways an attacker knows you have an account or not, is if they enter credenitals (e.g. email or phone number) and the screen either progresses to a password/code entry screen, or shows a message that the account does not exist. Once an attacker knows an account exists, they can go about breaking in. To prevent them ever knowing, you can ensure that the sign in experience does not give the answer away. 1. In Kinde, go to **Settings > Attack protection**. 2. Select **Enumeration protection**. 3. Switch on the toggle for **Credential enumeration protection**. 4. Select **Save**. For general information about Kinde security, practices, and policies, see the [Trust Center](/trust-center/security/security-at-kinde/).

# Build - Set up options - Kinde for different business models

> Comprehensive guide to different business models supported by Kinde including B2C, B2B, B2B2C, marketplace, agency, and membership organizations with configuration recommendations.

business models, B2C, B2B, B2B2C, marketplace, agency, membership, multi-tenancy
business-models, multi-tenancy, organizations

Kinde is built to support many types of SaaS models, for apps, sites, and projects. From straightforward models where you provide services directly to individuals, to multi-tenant setups for managing other business’s auth and user needs. This topic explains how to use organizations in Kinde to support your business model. ## You provide services directly to customers (B2C) Users sign up directly to your business and you manage them in one large user group. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/3c8e194f-db16-44e9-691e-8cb6e3d7b300/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> For this business setup, configure everything at the Business and Environment level in Kinde, including: - [Authentication](/authenticate/about-auth/about-authentication/) (including signing up and in with third party providers like Google) - [Global brand and page design](/design/brand/global-brand-defaults/) - [Defining roles and permissions](/manage-users/roles-and-permissions/user-roles/) Kinde comes with a default organization, so if you only have one user group, they all belong to that default organization. ## You provide services to companies (B2B) Each company your business services has their own organization in Kinde. Each organization can also have it’s own group of users. If you want, you can [allow organizations to be created when a new business signs up](/build/organizations/allow-org-create-on-signup/) to your service. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/0b98bd9f-ad8c-498d-e194-d04ee99bf600/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> Configure these settings at the Business and Environment level for organizations to inherit: - [Authentication](/authenticate/about-auth/about-authentication/) (including enterprise auth such as [Entra ID](/authenticate/enterprise-connections/azure/) or [SAML](/authenticate/enterprise-connections/custom-saml/)) - [Global brand and page design](/design/brand/global-brand-defaults/) - [Define roles and permissions](/manage-users/roles-and-permissions/user-roles/) Then you’ll set up organizations for each business you service, and in each organization: - [Manage how users sign up to organizations](/build/organizations/allow-user-signup-org/) - (optional) Set up individual [organization brand, including the sign up and sign in experience](/design/brand/apply-branding-for-an-organization/) - Define what [roles and permissions](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/) apply for users of each organization - Enable special [feature access](/releases/about/about-feature-flags/#overriding-feature-flags) for individual organizations ## You provide services to companies, and their customers (B2B2C) Each company your business services has their own organization in Kinde. And for each organization, there is a group of users who are managed separate to each other. In tech-speak, this is multi-tenanting. You will want to carefully manage [how users sign up to organizations](/build/organizations/allow-user-signup-org/) for this business model. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/adc65381-19f9-44bb-6db5-dbec7e5b0e00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> You will configure most settings at the Business and Environment level, and then you can decide if you customize some settings per organization. You might set up the following for your business and in your applications: - Supported [Authentication](/authenticate/about-auth/about-authentication/) types, including custom auth for [SAML](/authenticate/enterprise-connections/custom-saml/), and [social sign in](/authenticate/social-sign-in/add-social-sign-in/) - [Global brand and page design](/design/brand/global-brand-defaults/) - Define the [roles and permissions](/manage-users/roles-and-permissions/user-roles/) that can be applied to users in each organization For each organization, you will want to: - Assign [user roles and permissions](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/), including [default roles](/manage-users/roles-and-permissions/default-user-roles/) that apply when a user signs up - Enable special [feature access](/releases/about/about-feature-flags/#overriding-feature-flags) for individual organizations - (optional) Set up individual [organization brand, including the sign up and sign in experience](/design/brand/apply-branding-for-an-organization/) In this set up, you will likely need to [manage users across organizations](/manage-users/about/manage-users-across-organizations/) as well. ## You’re a membership-type organization You’re a central organization, and you service related businesses, branches, locations, or clubs, who have members. This works a bit like a B2B2C, but the structure is usually more simple. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/5267537f-80e7-4208-464c-f0ee4d66da00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> Membership organizations are typically branded at the org level, and authentication is kept fairly simple. You will configure most settings at the Business and Environment level, such as: - [Authentication](/authenticate/about-auth/about-authentication/) (including [passwordless](/authenticate/authentication-methods/passwordless-authentication/) and [social sign up](/authenticate/social-sign-in/add-social-sign-in/) to make things easy) - A base [global brand and page design](/design/brand/global-brand-defaults/) - [Defining simple sets of roles and permissions](/manage-users/roles-and-permissions/user-roles/) For each organization, you will want to: - Spend time setting up [brand and design](/design/brand/apply-branding-for-an-organization/) - Align [roles](/manage-users/roles-and-permissions/user-roles/) and [feature access](/releases/feature-flags/edit-feature-flag/#override-feature-flag-value-for-an-organization) within each organization to ensure different users see the right part of your application - Decide [how user’s are able to sign up to an org](/build/organizations/allow-user-signup-org/) ## You’re a marketplace A marketplace usually combines a bit of B2C and B2B. This kind of business connects buyers with sellers, creators and audiences, businesses and consumers - you get the idea. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/0ed1e797-10a0-4b18-f57e-b1184b4a0e00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> A marketplace usually separates the different market participants, which can be done through organizations. This enables independent control of the parts of your app each organization can access, and how. Configure most settings at the Business and Environment level, such as: - A base [global brand and page design](/design/brand/global-brand-defaults/) - [Defining simple sets of roles and permissions](/manage-users/roles-and-permissions/user-roles/) For each organization, you will want to: - Set up [Authentication](/authenticate/about-auth/about-authentication/) per organization to enable different sign up and sign in methods, depending on user segment. For example, set password authentication with [multi-factor authentication](/authenticate/multi-factor-auth/enable-multi-factor-authentication/) for your supplier side users, and [easy social sign up](/authenticate/social-sign-in/add-social-sign-in/) for your consumer side users. - Align [roles](/manage-users/roles-and-permissions/user-roles/) and [feature access](/releases/feature-flags/edit-feature-flag/#override-feature-flag-value-for-an-organization) within each organization to ensure different users see the right part of your application - Decide [how user’s are able to sign up to an org](/build/organizations/allow-user-signup-org/) - (optional) Set up individual [organization brand, including the sign up and sign in experience](/design/brand/apply-branding-for-an-organization/) ## You’re an agency This model is for enterprise-sized customers who really love Kinde. For example, an agency who sets up and runs multiple businesses and applications, on behalf of clients, using the Kinde platform. You’ll set up each of your client’s businesses according to what type of business model they are. See above for business structure recommendations. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/52f6adce-cd5e-4a2c-7639-9b7e32cdee00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> Tip: You could adapt this model if you’re a large multi-location, multi-department, or multi-service enterprise.

# Build - Set up options - Set up and manage user access requests

> Guide for setting up and managing user access requests including page configuration, contact conversion to users, and access request lifecycle management.

access requests, user conversion, request access page, contact management, user onboarding
access-requests, user-management, onboarding

In Kinde, you can collect user information before you give people access to your application. This is managed through the **Access requests** user list. You might use this function if you’re not ready to give people product access, but you want them to register their interest. You can also use this if you want to select and control who or how many people can access your application. It’s a good idea to maintain a separate contact list for general communication to customers, and you can do this by [building your subscriber list](/manage-users/add-and-edit/manage-subscribers/). ## Set up the request access page Kinde allows you to design the page where customers can go to register their interest. See [set up your request access page](/design/pages/set-up-the-request-access-page/). ## View access requests list 1. In Kinde, go to **Users > Access requests**. A list of customer contacts is shown. 2. To see when a contact requested access, find them in the list, select the three dots menu and select **View details**. A panel slides out showing added information. ## Convert an access requests contact to a user When you’re ready to give application access to someone on your access requests list, you can convert them to a user and (if applicable) allocate them to an organization. 1. Go to **Users > Access Requests** and find the contact you want to convert to a user. 2. Select the three dots menu and select **Convert to user**. A window appears, prompting you to select the organization the user will belong to. You can only select one. 3. Select **Convert**. The contact will now appear on the **All users** list, but will also remain an **Access requests** contact. See [Manage users across organizations](/manage-users/about/manage-users-across-organizations/) if you want to assign the user to other organizations. ## Delete access request contact 1. Go to **Users > Access Requests** and find the contact you want to delete. 2. Select the three dots menu and select **Delete** **access request**. A confirmation message appears. 3. Select **Delete**. The contact is permanently removed from this list.

# Build - Set up options - Run multiple businesses

> Guide for managing multiple businesses on Kinde including adding new businesses, switching between them, and safely deleting businesses with data export considerations.

multiple businesses, business management, switch business, delete business, data export
business-management, multi-tenancy

You can run multiple businesses on Kinde. This is helpful if you want to create different businesses with different user groups. For instance if you are a founder working on multiple applications, or you also run a business in a different region. Organizations, users, branding, and activity are all managed separately. ## **Add a new business** 1. Select your business profile in the bottom left of the Kinde home screen. 2. From the menu, select **Switch business**. A screen showing all your businesses opens. 3. Select **Add business**. 4. Complete the form, including your preferred Kinde domain and data storage region. These details cannot be changed later. 5. Select **Save**. 6. To complete the setup, select the business to switch to it. Follow the quickstart prompts. ## **Switch between businesses** 1. Select your business profile in the bottom left of the Kinde home screen. 2. From the menu, select **Switch business*. A screen showing all your businesses opens. 3. Select the one you want to work in. The business loads. ## Delete a business You can only [delete a business](/manage-your-account/your-data/delete-business/) that is on the Kinde free plan. If you have a paid subscription, you need to email [support@kinde.com](mailto:support@kinde.com) to downgrade from a paid account before deleting. Include the Kinde domain and business name in the email, and send it from the owner account email. Deleting a business is a nuclear and irreversible action, so make sure you [export](/manage-your-account/your-data/exporting-data/) all your important data before doing this.

# Build - Set up options - Enable self-serve portal for orgs

> Guide for enabling self-serve portals for organizations including business details management, billing access, permission controls, and portal link generation methods.

organization portal, self-serve portal, org management, billing portal, portal permissions, organization alias
self-serve-portal, organizations, billing

You can configure a self-serve portal to enable authorized organization members to be able to self-manage functions provided by Kinde. Authorized org members can update: - [Business details](/manage-your-account/business-information/update-your-details/) - [Payment details](/manage-your-account/profile-and-plan/update-kinde-payment/) (if you have billing set up) - [API Keys](/manage-your-apis/add-manage-api-keys/self-serve-api-keys/) - [Members and roles](/get-started/team-and-account/add-team-members/) - Multi-factor auth settings (coming soon) - SSO enterprise connections (almost here) A self-serve portal means your customers can make account changes without contacting you for support. This can save you both time. If you are on the Kinde Scale plan, you can configure the [portal per organization](/build/organizations/self-serve-portal-per-org/). E.g. allow some functions for some customers and not others. ## Configure the organization self-serve portal 1. Go to **Settings > Environment > Self-serve portal**. ![Settings for self-serve portal for orgs](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/81169031-611b-402a-20f7-47c84f53b600/public) 2. Enter the **Return URL** that you want users to land on when they exit the portal, e.g. your app dashboard. 3. Add an **Organization alias** to represent how your customers are referred to in your business, e.g. Account, Partner, Workspace, etc. This will be visible in the interface in the portal. 4. In the **Organization profile** section, select the functions you want organization admins to be able to manage. ![Options for showing hiding settings for org members](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/13cf1ec6-bbe1-4059-4c78-b97d94b2b200/public) 5. Select **Save**. ## Portal access control with system permissions Each core function within the self-serve portal is governed by a corresponding system permission. For example, the `org:write:billing` permission allows users to update billing details. These permissions can be included in your custom roles and assigned to organization members. We recommend creating custom roles with varying levels of portal access, which you can then assign as needed. For instance, you might create a role that allows members to view billing details but not update them. You can select these permissions within your existing roles, or when you create them. ![Roles with system permissions for self-serve portal](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/1e90e72e-00d5-4063-8d34-79d1a9b8f000/public) When [configuring org roles](/billing/get-started/add-billing-role/), you can specify whether it should be: - Automatically assigned to all new organization members. - Automatically assigned to the organization creator. ## Generate the self-serve portal link Access to the portal is granted via a one-time link. You then use the link on an 'account' or 'profile' button in your app to open the Kinde portal screens. There are two main ways to generate this link: - **Using the user's access token** (recommended) - **Using the Kinde Management API** ### Include the self-serve portal link in the user's access token This method is ideal when you want to generate the portal link on the fly—for example, when a user clicks an "Account" button in your app. ### Generate a self-serve portal link with a Kinde SDK If you're using the Kinde React SDK, you can use the `<PortalLink />` component, which both generates the link and redirects the user: ```jsx import {PortalLink} from "@kinde-oss/kinde-auth-react"; <PortalLink>Account</PortalLink>; ``` ### Generate a self-serve portal link without a Kinde SDK If you're not using a Kinde SDK, you can manually call the Account API: ```js const response = await fetch("/account_api/v1/portal_link", { headers: { Authorization: `Bearer ${userAccessToken}` } }); const data = await response.json(); window.location = data.url; ``` Optional parameters: - `return_url` – where to redirect the user after exiting the portal. - `sub_nav` – specify the portal section to open (e.g., `organization_billing`, `profile`). ### Manage the self-serve portal link using the Kinde Management API This option is useful for server-side applications or if you're using Kinde billing features without Kinde Authentication. Make a request to the `POST /api/v1/portal/generate_url` endpoint using an M2M token. **Request body** ```js { "user_id": "kp_1234567890", // The ID of the user for whom you want to generate the portal link "organization_code": "org_123456789", // Optional: the organization code for which the portal link is generated "return_url": "https://yourapp.com/dashboard", // Optional: where to redirect the user after exiting the portal "sub_nav": "profile" // Optional: specify the portal section to open (e.g., `organization_billing`, `profile`) } ``` This will return a one-time portal link for the specified user. ## How the self-serve portal looks When the user clicks the link you've added to your app, the portal opens. The default design is shown below, and we are working on allowing you to style this yourself. The options a member sees depends on their role and what you have chosen to display. ![Self-serve portal in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/fb38548b-e530-4dfa-68b3-29ef2f287700/public)

# Build - Set up options - Enable self-serve portal for users

> Guide for enabling and configuring self-serve portals for users including profile management, billing access, and multiple methods for generating portal links with SDK and API examples.

self-serve portal, user portal, account management, billing portal, portal link, account API
self-serve-portal, user-management, billing

You can configure a self-serve portal to enable users to be able to self-manage functions provided by Kinde. For example, you can allow users to update their profile, as well as their billing subscription and payment details (if you have billing set up). If you have a B2C business, you might want to set this up. A self-serve portal means your customers can make basic account changes without contacting you for support. This can save time and money. ## Configure the user self-serve portal 1. Go to **Settings > Environment > Self-serve portal**. ![Settings for self-serve portal set up in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/81169031-611b-402a-20f7-47c84f53b600/public) 2. Enter the **Return URL** that you want users to land on when they exit the portal, e.g. your app dashboard. This can also be used as a fallback URL if you decide to use the SDK method of dynamically generting the URL (see below). 3. In the **User profile** section, select the functions you want the user to be able to manage. If you select **Billing**, they can manage their plan as well as payment methods. ![Self-serve portal settings for users](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/f821e9c5-497d-41f0-b373-2755320d1c00/public) 4. Select **Save**. ## Generate the self-serve portal link Access to the portal is granted via a one-time link. There are two main ways to generate this link: - **Using the user's access token** (recommended) - **Using the Kinde Management API** Both methods are able to generate the portal link on the fly. For example, when a user clicks an "Account" button in your app. ### Generate a self-serve portal link with a Kinde SDK If you're using the Kinde React SDK, you can use the `<PortalLink />` component, which both generates the link and redirects the user: ```jsx import {PortalLink} from "@kinde-oss/kinde-auth-react"; <PortalLink>Account</PortalLink>; ``` ### Generate a self-serve portal link without a Kinde SDK If you're not using a Kinde SDK, you can manually call the Account API: ```js const response = await fetch("/account_api/v1/portal_link", { headers: { Authorization: `Bearer ${userAccessToken}` } }); const data = await response.json(); window.location = data.url; ``` Optional parameters: - `return_url` – where to redirect the user after exiting the portal. - `sub_nav` – specify the portal section to open (e.g., `organization_billing`, `profile`). ### Manage the self-serve portal link using the Kinde Management API This option is useful for server-side applications or if you're using Kinde billing features without Kinde Authentication. Make a request to the `POST /api/v1/portal/generate_url` endpoint using an M2M token. **Request body** ```js { "user_id": "kp_1234567890", // The ID of the user for whom you want to generate the portal link "organization_code": "org_123456789", // Optional: the organization code for which the portal link is generated "return_url": "https://yourapp.com/dashboard", // Optional: where to redirect the user after exiting the portal "sub_nav": "profile" // Optional: specify the portal section to open (e.g., `organization_billing`, `profile`) } ``` This will return a one-time portal link for the specified user. ## How the self-serve portal looks When the user clicks the link you've added to your app, the portal opens. The default design is shown below, and we are working on allowing you to style this yourself. The options a member sees depends on their role and what you have chosen to display. ![Self-serve portal in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4b3574c5-a499-4da5-e8d0-467d56255e00/public) You can also watch this short video showing how the portal works when a customer signs up for a plan using Kinde billing. <YoutubeVideo videoId="xxVwZW8OxIA" videoTitle="The customer billing experience with Kinde"/>

# Build - Set up options - Manage your code in Kinde

> Guide for managing git code in Kinde including repository connection, branch selection, code preview functionality, and workflow deployment management.

git sync, GitHub, code preview, workflow code, BYO code, repository management
git, workflows, code-management

To use workflows and other BYO code features, you need to sync your git-stored code to Kinde. Currently, Kinde only syncs with Github, but other providers will be added as the feature progresses. ## Change the git repo If you are connecting your repo to Kinde for the first time, see [Connect your workflows repo and branch](/workflows/getting-started/connect-repo-for-workflows/) 1. Go to **Settings > Git repo**. 2. Select **Change repo** 3. Follow the steps to add your repo, select the branch, etc. 4. If you are on an eligible plan, switch on the code preview option in **Advanced settings**. This lets you preview newly deployed code before making it live. 5. Select **Save**. ## Preview workflow code If you are on an eligible plan, we recommend enabling code preview for your workflow. This lets you [test deployed code](/workflows/testing/preview-workflows/) before you make it live for customers. 1. Go to **Settings > Git repo**. 2. Select the **Enable preview mode** option. 5. Select **Save**. <Aside type="warning"> If the preview mode option is switched off, your code will be pushed live automatcially each time you sync. </Aside>

# Build - Tokens - Access tokens

> Comprehensive guide to Kinde access tokens including standard JWT claims, Kinde-specific claims like organization codes and feature flags, and token behavior during refresh operations.

access tokens, JWT, OAuth 2.0, token claims, feature flags, permissions, organization claims
tokens, authentication, oauth

Access tokens are a secure way of authenticating users, and passing information about a user to to a system. ## Access token standard claims - **Token Type** - indicates the type of access token being used. For example, `Bearer` is a common token type used in OAuth 2.0. - **Expiration Time** - `exp` **-** Access tokens come with an expiration time (also known as expiry or lifetime) after which it is no longer valid. The timestamp is usually represented in **seconds** and can be calculated using the [Epoch](https://www.epochconverter.com/) timestamp (UNIX) or other methods. More about [setting token expiry in Kinde](/build/tokens/configure-tokens/). - **Scopes** - `scp` - information about the scopes granted to the token holder. These scopes define what actions or resources the token can access. There can be multiple scope values, so the type of this claim is an `array`. - **Issuer -** the entity that issued the access token. This is often represented as the token's `iss` claim in JWT. Typically your kinde domain e.g. `https://<your_subdomain>.kinde.com` - **Subject** - subject of the token, i.e., the user or entity for which the token was issued. Represented as the token's `sub` claim in JWT. If this is an access token for a Kinde user this will be their ID e.g. `kp_xxxx` - **Audience** - intended recipient of the access token. Represented as the token's `aud` claim in JWT. There can be multiple audience values, so the type of this claim is an `array`. - **Issued At** - timestamp of when the access token was issued. Represented as the token's `iat` claim in JWT. The timestamp is usually represented in **seconds** and can be calculated using the [Epoch](https://www.epochconverter.com/) timestamp (UNIX) or other methods. - **Token ID** - `jti` - identifier for the access token, useful for tracking and validation purposes. See [this definition](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.7). - **Custom Claims** - Available using the [Kinde Properties feature](/properties/work-with-properties/properties-in-tokens/). ## Kinde additional claims - **Organization** - `org_code` claim for the organization they are accessing. Format is `org_xxxx`. - **Feature flags** - `feature_flags` claim. Access controls for what features the user can see and access. Format is: ```json "feature_flags": { "analytics": { "t": "b", "v": true }, "theme": { "t": "s", "v": "pink" } } ``` We use short codes for the various keys in the feature flags claim such as `t` and `v` to keep the token size down. `t` = `type` `v` = `value` `b` = `boolean` `i`= `integer` `s` = `strong` - **Permissions** - `permissions` claim controls for what the user can do in an app. This is an array. For example: ```json "permissions": [ "create:competitions", "delete:competitions", "view:stats", "invite:users", "view:profile ] ``` - **External provider ID** - The ID you use to identify the organization the user is authorized against - (MS Entra ID authentication only) Claims starting with `ext_` indicate that user details have come from a third party enterprise auth provider like Microsoft. For example: ```jsx "ext_groups": [ "group1", "group2 ], "ext_attributes": { "jobTitle": "engineer", "mail": "engineer@kinde.com", "preferredLanguage": "en", } ``` ## Example access token ```jsx { "aud": [ "myapp:prod-api ], "azp": "dee7f3c57b3c47e8b96edde2c7ecab7d", "exp": 1693371599, "feature_flags": { "analytics": { "t": "b", "v": true }, "theme": { "t": "s", "v": "pink" } }, "iat": 1693285199, "iss": "https://<your_subdomain>.kinde.com", "jti": "fbb6bc62-x64e-4256-8ea4-8fb9a645b123", "org_code": "org_xxxxxxxxx", "permissions": [ "create:competitions", "delete:competitions", "view:stats", "invite:users", "view:profile ], "scp": [ "openid", "profile", "email", "offline ], "sub": "kp:_xxxxxxxxx" // your user id } ``` ## Behaviour of Access Tokens on refresh When you use the `refresh_token` grant to refresh an access token, Kinde will return an existing access token if that existing access token is not expired. You will get a completely new access token if one (or more) of the following conditions are met: - You revoke your existing access token - Your user has signed out of their session, and your application has called the logout function in Kinde - Your existing access token has expired.

# Build - Tokens - ID tokens

> Complete guide to Kinde ID tokens including standard OpenID Connect claims, Kinde-specific claims, and troubleshooting missing claims with scope configuration.

ID tokens, OpenID Connect, user identity, token claims, authentication, user profile
tokens, authentication, oidc

During authentication, ID tokens carry information about authenticated users securely to your application. ## ID token standard claims - **At hash** - `at_hash` ensures the integrity of the claim made in the access token. - **Audience** - intended recipient of the token. Represented as the token's `aud` claim. This could be your kinde domain or app URI, e.g. `https://<your_subdomain>.kinde.com` - **Authentication time** - `auth_time` indicates the time when the user was authenticated. It's useful for scenarios where certain actions are allowed only if the user has recently authenticated. - **Authorized party** - an `azp` claim specifies the client ID of the party to which the ID Token was originally issued. - **Email** - the `email` associated with the user’s profile - **Expiration Time** - The `exp` claim specifies the timestamp when the ID token expires and should no longer be considered valid. It helps prevent the token from being used indefinitely. More about [setting token expiry in Kinde](/build/tokens/configure-tokens/). - **Issued At** - The `iat` claim indicates the timestamp when the ID token was issued. It can be used to determine the token's age and to mitigate replay attacks. - **Issuer** - The `iss` claim specifies the issuer of the ID token, usually the URL of the authorization server or identity provider. It's used to verify the token's authenticity. - **Picture URL** - the `picture` claim contains the location reference of the avatar picture of the user, if there is one. - **Subject -** The `sub` claim is a unique identifier for the authenticated user within the context of the issuing authentication server. In Kinde, this is the user’s ID. - **Token ID** - the `jti` claim is the unique identifier of the ID token - **Updated at** - the `updated_at` claim specifies the issuer of the ID token, usually the URL of the authorization server or identity provider. It's used to verify the token's authenticity. - **User last name** - the `family_name` claim contains the user’s last name - **User first name** - the `given_name` claim contains the user’s first name - **User full name** - `name` contains the first name and last name of the user ## Kinde additional claims - **Social identity** - Details from the user’s third-party profile, such as handle, username, and ID. - **Organizations** - The `org_codes` claim contains an array of IDs for the Kinde organizations that the user belongs to. ## Example ID token ```jsx { "at_hash": "VZ6cU0Ay0RKB5EosbWuTCQ", "aud": [ "https://<your_subdomain>.kinde.com ], "auth_time": 1692361334, "azp": "dee7f3c57b3c47e8b96edde2c7ecab7d", "email": "jane.smith@gmail.com", "exp": 1693288799, "family_name": "Smith", "given_name": "Jane", "iat": 1693285199, "iss": "https://<your_subdomain>.kinde.com", "jti": "fcxf6xd3-8c75-402x-a4cb-1659fb8c555d", "name": "Jane Smith", "org_codes": [ "org_xxxxxxxxxxx ], "picture": "https://lh3.googleusercontent.com/a/google-url", "provided_id": "<user_id_in_your_system>", "sub": "kp_xxxxxxxxxxxxxxxxxxxx", "updated_at": 1692009540 } ``` ## Can't find a claim in the token? Missing token claims are usually caused by missing scope requests in your app. If you are not using an SDK, you need to manually add scopes (such as `profile`, `email`, `openid`) so that the token you receive from Kinde includes the right claims. Review this document if you are [not using an SDK](/developer-tools/about/using-kinde-without-an-sdk/).

# Build - Tokens - Configure token and session expiry

> Comprehensive guide for configuring token and session expiry times including security best practices, token lifetime management, and risk mitigation strategies for different token types.

token expiry, session timeout, token lifetime, security, refresh tokens, access tokens, ID tokens
tokens, security, configuration

Tokens are an essential part of keeping your application secure. They enable the continued verification of users and applications (including APIs), and are a mechanism for detecting unauthorized intruders. Tokens need to be updated and refreshed to remain secure, which is why you need to set how long a token lasts, for each token type. ## Defining token lifetimes You can define the lifetime (expiry time) of ID tokens, access tokens, refresh tokens, and SSO session expiry tokens. Expiry and timeouts are usually defined in seconds - where 3,600 seconds is one hour and 86,400 seconds is one day. Tokens and sessions need to be configured per application. - **ID Tokens**: Contain identity information about a user. These do not need to last long as identity info is only needed at the moment of authentication, and is unrelated to session lifetimes. - **Access tokens**: Contain access permissions for a user during authentication. These are the most vulnerable token for attacks, and we do not recommend extending the access token lifetime beyond 1 day. - **Refresh tokens**: Are issued at the same time as an access token, and extend a user's session without them having to reauthenticate. If you want a user to stay authenticated without having to sign in daily or more frequently - set a high lifetime for refresh tokens. - **Session inactivity timeout**: A user can be requested to re-authenticate if they do not sustain activity in the current session. We recommend setting a fairly short limit for inactivity - e.g. up to one day. If you extend the session inactivity timeout, a user's data may become vulnerable, for example if they sign in on a public device and forget to sign out. Token and session expiry should be approached with priority for system and user security. The aim is to reduce risks such as: - Token theft through man-in-the-middle attacks - Unauthorized access through compromised refresh tokens - Session hijacking on shared or public devices - Data exposure through prolonged inactive sessions ## **Set token lifetimes** 1. Go to **Settings** **> Environment > Applications.** 2. Select **View details** on the application tile. 3. Select **Tokens** in the side menu. 4. For each token type, set the expiry time in seconds. 3,600 seconds is one hour; 86,400 seconds is one day. 5. Select **Save**. ## Token security Tokens can be vulnerable to security breaches. Access tokens in particular contain sensitive information, and these tokens can be used to access systems. Refresh tokens can be used to reduce some of this risk as they can be used to get new access tokens. However, refresh tokens are also a security risk for the same reason they are useful. To mitigate risk, we recommend using Automatic Reuse Detection and Refresh Token Rotation. You can revoke access tokens and refresh tokens via the Kinde Management API. [Search the Kinde API docs](/kinde-apis/management/).

# Build - Tokens - Using OAuth scopes

> Guide to using OAuth 2.0 scopes in Kinde including supported scopes, authorization flows, and implementation guidance for different application types.

OAuth scopes, authorization, openid, email, profile, offline, PKCE
tokens, oauth, scopes

In Kinde, OAuth 2.0 scopes are used to request access to the protected information we store on behalf of your users. The OAuth protocol helps ensure only authorized access to this information. ## Kinde-supported OAuth scopes The following scopes can be requested from Kinde. `openid` - requests an ID token which contains information about the user `email` - requests a user's email `profile` - requests profile details as part of ID token, e.g. name, family name, given name, picture (avatar) `offline` - request to act on behalf of the user if they're offline ## OAuth flows How you request scopes depends on your tech framework and the OAuth 2.0 flow you’re using for your application type. You can use the following flows to request scopes in Kinde. ### Authorization Code flow `authorization_code` Recommended for regular web applications rendered on the server. ### Authorization Code flow with Proof Key for Code Exchange (PKCE) `authorization_code_flow_pkce` Kinde supports the PKCE extension, in which case the `code_challenge` and `code_challenge_method` parameters are also required. This is recommended for mobile apps and single page applications (SPAs). ### Implicit flow (not supported) Before PKCE (see above) this was the method used by applications that were unable to store secrets securely. This flow has security implications and Kinde does not support it for this reason. ## Guidance on requesting scopes Our SDK documents contain guidance on how to connect and make requests in your chosen framework or language. See [all our SDKs](/developer-tools/about/our-sdks/). You can also access our [starter kits on GitHub](https://github.com/kinde-starter-kits) and our [Kinde Management API library](/kinde-apis/management/).

# Build - Tokens - Refresh tokens

> Understand how refresh tokens work, including token rotation, offline scope implementation, security best practices, and SDK integration for maintaining user sessions.

refresh tokens, token rotation, offline scope, session management, token security, auto-update
tokens, authentication, oauth

Refresh tokens are used to request new access tokens. Access tokens are issued when a user makes an authentication request or a call is made to an API. An access token gives permission to enter and interact with a system. ## How refresh tokens work Access tokens usually have an intentionally short lifetime. However, rather than having a user need to re-authenticate frequently, a refresh token can be used to request a new access token. Refresh tokens operate without user intervention, extending session access without the same security risk as requesting a new access token. Refresh tokens can be used a finite amount of times before re-authentication is required. ## How to get a refresh token To get a refresh token, you need to include the `offline` scope when you initiate an authentication request through the `https://<your_subdomain>.kinde.com/oauth2/auth` endpoint. You also need to initiate Offline Access in your API. Details on how to do this is provided in [our SDKs](/developer-tools/about/our-sdks/), but here’s how to do it yourself. Below is an example using the Authorization Code grant, with the `offline` scope being one of the scopes passed to the authentication request. ```jsx curl -X POST -H "Content-Type: application/x-www-form-urlencoded" \ -d "response_type=code&client_id=your_client_id&redirect_uri=your_redirect_uri&scope=offline%20email%20openid%20profile&grant_type=authorization_code" \ https://<yoursubdomain>.kinde.com/oauth2/auth ``` Refresh tokens are stored in sessions. When a session needs to be refreshed (for example, a pre-defined time has passed), the app uses the refresh token on the backend to obtain a new access token, using the `https://<your_subdomain>.kinde.com/oauth2/token` endpoint with `grantType=refresh_token`. **Example of a refresh token response** ```jsx { "access_token": "hju76F...P8rTh63Ute", "refresh_token": "VOe264go...oLp2dC6", "token_type": "Bearer" } ``` ## Refresh token rotation Kinde always rotates refresh tokens. When you use an existing refresh token to request a new access token, a new refresh token is also generated and provided with your new access token. The old refresh token becomes immediately invalid. ## Auto-update of refresh tokens Kinde allows a small overlap period when both a previous and new refresh token is valid. This is to account for retries and bad network connections. You can [set the lifetime of a refresh token](/build/tokens/configure-tokens/) in Kinde. It needs to be longer than the life of an access token. ## Refresh tokens when you are not using an SDK You should store the refresh token you get with your initial `/token` request. Otherwise, your user will need to go through the sign in process again, to get a new access token. ## Refresh tokens when you are using a front-end SDK If you’re using a front-end SDK like [JavaScript](/developer-tools/sdks/frontend/javascript-sdk/) or [React](/developer-tools/sdks/frontend/react-sdk/), the `getToken` function stores an in-memory cache of the access token, which it returns by default. If the token is about to expire it will use a refresh token to get a new access token from Kinde silently in the background so additional network requests to Kinde are only made when absolutely necessary. ## Token security recommendations Token security can be approached in a number of ways. We recommend at least covering the basics of: - keeping the number of refresh tokens within a manageable limit to keep credentials safe and secure. - storing refresh tokens securely in the back-end of your application because they essentially allow a user to remain authenticated forever. - employing refresh token rotation and automatic reuse detection for added security.

# Build - Tokens - Token customization

> Learn how to customize Kinde tokens by adding custom claims, properties, and third-party integrations like Hasura for enhanced token functionality.

token customization, custom claims, properties, additional claims, third-party integration, Hasura
tokens, customization, properties

If you want to include additional information in tokens, you can customize access tokens, M2M tokens, and ID tokens using preset custom claims and [properties](/properties/about-properties/). If you need Kinde token formats to be third-party friendly, you can also enable mapping for those services, e.g. Hasura. Token customization is a step toward enabling custom claims, but it is not the same thing. ## Add claims to a token 1. In Kinde, go to **Settings > Applications** and select **Details** on your application. 2. Select **Tokens**, then scroll to the **Token customization** section. 3. On the relevant token type card, select **Customize**. A window appears where you can select scopes and properties. ![Customize access token window with selection of scopes and properties](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/8b20408b-5494-4da9-c59c-01be32accf00/public) 4. Select the available **Additional claims** and **Properties** you want to include in the token. 5. Select **Save**. ## Additional claims for tokens Apart from your own [custom properties](/properties/work-with-properties/properties-in-tokens/), you can add some out of the box additional claims to tokens. ### Add claims to access tokens You can: - add an organization name to an access token (`org_name`) - add roles to an access token (`roles`) - add an email to an access token (`email`) - add an external organization ID to an access token (`external_organization_id`) ### Add claims to ID tokens You can: - Add a user's social identity to an ID token - Add a user's organizations to an ID token ### Add claims to M2M tokens You can [add feature flags to an M2M token](/machine-to-machine-applications/m2m-application-setup/add-feature-flags-to-m2m-applications/). ## Add properties to tokens To further customize tokens you can add information using [properties](/properties/about-properties/). Properties are custom fields and information that you can attach to your users, organizations, and applications in order to collect the data you want. For example, if you ask your customers to complete a form, you can map the answers to their user record. Another example could be you want to collect a delivery address for an organization, or include unique identifiers for M2M apps. To make a property available in a token, you need to [make the property public](/properties/work-with-properties/manage-properties/), and then customize the token following the procedure above, to add a property. The value will appear in the token under a `application_properties` claim: ```json { "application_properties": { "region": { "v": "eu" }, "tier": { "v": "pro" } } } ``` The `v` is a shortcode for the value of the property. Only the properties you explicitly toggle on will be included. ## Token integration for third parties Currently, we only support formatting for Hasura. 1. In Kinde, go to **Settings > Applications** and select **Details** on your application. 2. Select **Tokens.** 3. Scroll to the **Token integrations** section and switch the toggle on for the platform you use. 4. Select **Save**.

# Build - Tokens - OAuth 2.0 access token validation and error codes

> Reference guide for OAuth 2.0 access token validation including successful response formats and common error codes with troubleshooting information.

OAuth 2.0, token validation, error codes, invalid_request, invalid_client, invalid_grant, unauthorized_client
tokens, oauth, error-handling

OAuth 2.0 authentication involves a request for an access token, and a response to the request. Here’s some typical successful and unsuccessful (error) responses. ## Successful responses - `access_token` (required) – The access token string as issued by the authorization server. - `token_type` (required) – The type of token this is, typically just the string “Bearer”. - `expires_in` (recommended) – If the access token expires, the server should reply with the duration of time the access token is granted for. - `refresh_token` (optional) – If the access token will expire, then it is useful to return a refresh token which applications can use to obtain another access token. - `scope` (optional) – If the scope the user granted is identical to the scope the app requested, this parameter is optional. If the granted scope is different from the requested scope, such as if the user modified the scope, then this parameter is required. ## Unsuccessful responses - `invalid_request` – The request is missing a parameter so the server can’t proceed with the request. This may also be returned if the request includes an unsupported parameter or repeats a parameter. - `invalid_client` – Client authentication failed, such as if the request contains an invalid client ID or secret. Send an HTTP 401 response in this case. - `invalid_grant` – The authorization code (or user’s password for the password grant type) is invalid or expired. This is also the error you would return if the redirect URL given in the authorization grant does not match the URL provided in this access token request. - `invalid_scope` – For access token requests that include a scope (password or client_credentials grants), this error indicates an invalid scope value in the request. - `unauthorized_client` – The client is not authorized to use the requested grant type. For example, if you restrict which applications can use the Implicit grant, you would return this error for the other apps. - `unsupported_grant_type` – If a grant type is requested that the authorization server doesn’t recognize, use this code. Note that unknown grant types also use this specific error code rather than using the `invalid_request` above.

# Build - Tokens - Verifying JSON Web Tokens

> Learn how to verify JSON Web Tokens (JWTs) for secure authentication, including signing algorithms, validation methods, and security best practices for protecting your backend APIs.

JWT verification, token validation, RSA signing, JSON Web Key, issuer claims, audience claims, state verification
tokens, security, jwt

Kinde uses JSON Web Tokens (JWT) for secure data transmission, authentication, and authorization. JWT verification ensures that only authorized users and apps can access your regular web, native, or single-page applications, by checking that tokens are valid, and have not been tampered with, misused, or are expired. The validation process checks the structure, claims, and signature of the JWT. If you are [setting up with Kinde without an SDK](/developer-tools/about/using-kinde-without-an-sdk/), or if you are using a mobile or front-end SDK and want to protect your back-end APIs, this topic is relevant for you. ## **How the JWTs work** ### **Signing algorithm** The JWT signature is generated using a ’signing algorithm’. Kinde supports: - RSA with 2048-bit key - SHA-256 hashing algorithm - RSA signature with SHA-256 ### **Hash values** When validating a JWT, generally, the current hash value and the original hash value are parsed, or decoded, then compared to verify the token signature is authentic. This is part of token encryption. ## **Methods to verify JWTs** If you are not using one of our SDKs, you can parse and validate a JWT by: - Using any existing middleware for your web framework. - Choosing a third-party library, for example the OpenID Foundation has [a list of libraries for working with JWT tokens](https://openid.net/developers/jwt/) See also [Kinde’s supported languages and frameworks](/developer-tools/about/our-sdks/). ## **Asymmetric signing algorithm (RSA)** Verify that the token is signed with `RS256` algorithm (see the `alg` header in the token response). Kinde only supports signing tokens with the asymmetric signing algorithm (RSA). We don’t support `HMAC` signing by design. ## **JSON Web Key** It’s likely you will be using a library to validate your JWTs and they will require the url for your public JSON Web Key (also known as a `jwks` file). The file can be found here: `https://<your_subdomain>.kinde.com/.well-known/jwks` ## **Included in the Kinde access token** ### **Issuer (iss) claim** Verify the `iss` claim, that the token was issued by your Kinde environment. Each environment has a unique `iss` claim. ### **Audience (aud) claims** If you are authenticating an API, verify `aud` claims in the token. We support multiple `aud` claims which are passed in the token as a JSON array. ### **State versus stateless** For increased security in a back-end application, verify the `state` that you provided in the callback. Deny all requests with a `state` that your application does not recognize. You can use `state` for front-end applications, but it does not increase security. ## The getToken function The `getToken` function stores an in-memory cache of the access token, which it returns by default. If the token is about to expire it will use a refresh token to get a new access token from Kinde silently in the background so additional network requests to Kinde are only made when absolutely necessary. To keep tokens secure, they should only be stored in the back end of your application. Tokens become unsecured if stored in a browser’s local storage, indexed database, or session storage.

