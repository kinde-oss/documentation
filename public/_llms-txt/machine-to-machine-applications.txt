---
page_id: 7d8e9f0a-1b2c-3d4e-5f6a-7b8c9d0e1f2a
title: Kinde Documentation - Machine to machine applications
description: "Complete documentation for Kinde's machine to machine applications section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - machine-to-machine-applications
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - machine-to-machine-applications
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's machine to machine applications section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Machine to machine applications

This is the complete documentation for Kinde's machine to machine applications section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Machine to machine applications - About m2m - Authenticate with M2M applications

> Guide to authenticating with M2M applications using OAuth 2.0 client credentials flow including token requests, API authorization, and Bearer token usage

m2m authentication, oauth 2.0, client credentials, access tokens, api authorization, bearer token, jwt, audience, scopes
machine-to-machine-applications, about-m2m

You can use a Machine-to-Machine (M2M) application in Kinde to request access tokens using the OAuth 2.0 client credentials flow. These tokens can be used to call Kinde’s APIs or your own APIs with no user interaction required. ## Authorize your application Before an M2M app can request a token for a specific API audience, it must be authorized for that API. If the app is not authorized for the given audience, the token request will fail. 1. Open the M2M application in Kinde. 2. Select **APIs**. 3. Select the three dots menu and authorize each API the app is allowed to call. 4. Select **Save**. You can also [authorize apps programmatically](https://docs.kinde.com/kinde-apis/management/#tag/apis/patch/api/v1/apis/{api_id}/applications) using the Kinde Management API. ## Get an access token Your M2M application will be provided with a `client_id` and `client_secret` which can be used to request a token. To get a token, make a `POST` request to your Kinde environment’s token endpoint: ```http POST https://<your-subdomain>.kinde.com/oauth2/token ``` ### Required parameters The request body must include: ```text grant_type=client_credentials &client_id=<your-client-id> &client_secret=<your-client-secret> &audience=<your-api-audience> ``` If your app has scopes assigned, you can optionally request them: ```text &scope=read:users write:flags ``` **Note**: The `audience` parameter tells Kinde which API the token is intended for. Use `https://<your-subdomain>.kinde.com/api/v1` when calling Kinde’s management API. If you're protecting your own custom API, the audience should match the identifier you registered for that API in Kinde. ### Example (cURL) ```bash curl --request POST 'https://your-subdomain.kinde.com/oauth2/token' \ --header 'Content-Type: application/x-www-form-urlencoded' \ --data-urlencode 'grant_type=client_credentials' \ --data-urlencode 'client_id=your-client-id' \ --data-urlencode 'client_secret=your-client-secret' \ --data-urlencode 'audience=your-api-audience' \ --data-urlencode 'scope=read:users write:flags' ``` ### Successful response A successful request returns a JSON response with an access token: ```json { "access_token": "<token>", "token_type": "Bearer", "expires_in": 3600 } ``` ## Use the token Once you have a token, include it as a Bearer token in the `Authorization` header when making API calls: ```http Authorization: Bearer <token> ``` ## Example usage Calling a Kinde API: ```bash curl https://your-subdomain.kinde.com/api/v1/organizations \ -H "Authorization: Bearer <token> ``` ## Important information about tokens, audience, claims, and M2M apps - Access tokens are valid for 1 hour by default. - The `audience` must match the intended API — tokens are only valid for the audience they’re issued for. - You can request multiple audiences - If your M2M app is scoped to an organization, the token will include the `org_code` trusted claim. - Tokens are JWTs and can be decoded to inspect claims using standard libraries or tools like [Kinde's JWT decoder](https://kinde.com/tools/online-jwt-decoder/). ## Test your M2M app in Kinde You can also generate a token to help with testing. 1. Open your M2M app in Kinde. 2. Select *APIs* in the menu, then open the API you want to test with the app. 3. Select the **Test** tab 4. Select **Get token** 5. Copy the access token and use it in your API requests. This is useful for debugging or verifying scopes and claims without writing code.

# Machine to machine applications - About m2m - M2M overview

> Overview of machine-to-machine applications in Kinde including OAuth 2.0 client credentials flow, use cases, types, and best practices for secure API authentication

m2m, machine to machine, oauth 2.0, client credentials, access tokens, api authentication, automation, ci/cd, ai agents
machine-to-machine-applications, about-m2m

Machine-to-machine (M2M) applications allow you to authenticate backend services, scripts, or automation tools that need to call your APIs without a user being involved. M2M apps in Kinde use the OAuth 2.0 client credentials flow to obtain access tokens. These tokens can then be used to securely interact with Kinde APIs or your own APIs. You can create M2M applications for general use across your business, or [scope them to a specific organization](/machine-to-machine-applications/organization-scoped-m2m-apps/m2m-applications-for-organizations/) for tighter access control. ## Use cases Common scenarios where M2M apps are useful: - Internal automation scripts that manage users, flags, or orgs - CI/CD pipelines that update configuration or deploy features - AI agents that need to interact with your product on behalf of a customer - Customer-facing API keys that are tied to a specific tenant ## Types of M2M apps in Kinde ### Global (unscoped) M2M apps These are not linked to any one organization and can be used to call APIs across multiple orgs. Typically used for admin-level automation or infrastructure integration. ### Org-scoped M2M apps These are tied to a single organization. Tokens issued to these apps include trusted claims like `org_code`, ensuring that any access is isolated to that organization’s context. ## How M2M authentication works 1. Create an M2M app in Kinde. 2. Use the provided `client_id` and `client_secret` in a client credentials request. 3. Receive an access token in response. 4. Use the token to call Kinde APIs or your own backend. Tokens can include scopes to limit access and, if scoped to an org, will include the `org_code` trusted claim. ## Best practices for M2M apps - Use separate M2M apps for different scopes or services. - Limit the [scopes](https://docs.kinde.com/developer-tools/your-apis/custom-api-scopes/) assigned to each M2M app to the minimum required for its function. - [Rotate client secrets](/build/applications/rotate-client-secret/) periodically using the UI. - Avoid including any personally identifiable information (PII) in token claims.

# Machine to machine applications - About m2m - Top questions about M2M applications

> A set of popular questions about machine-to-machine applications in Kinde, including OAuth 2.0 client credentials flow, use cases, types, and best practices.

m2m, machine to machine, oauth 2.0, client credentials, access tokens, api authentication, automation, ci/cd, ai agents
machine-to-machine-applications, about-m2m

Here are short answers to the most common M2M questions. Click any question to expand the answer. <Aside title="Ask the docs"> Type **@kindeAI** to access 24/7 global support in the **#ask-kinde-ai** channel in the Kinde [Slack](https://join.slack.com/t/thekindecommunity/shared_invite/zt-1vyq8qilj-jFH5V27jfFnHk~BuBSU0ZA) or [Discord](https://discord.gg/KdkCXRNTFn) communities. </Aside> ## Core concepts and setup <details> <summary><strong>What's the difference between machine-to-machine and regular user authentication in Kinde?</strong></summary> M2M authentication is designed for servers, APIs, and automated systems that need to communicate securely without human intervention. Unlike regular user auth where someone signs in with a password or social login, M2M uses the client credentials flow - your application authenticates using a client ID and secret to get an access token. Think of it like having a service account that can access your APIs 24/7 without anyone needing to sign in. This is perfect for microservices, background jobs, or third-party integrations that need to access your Kinde-protected resources. [About machine-to-machine applications](/machine-to-machine-applications/about-m2m/) </details> <details> <summary><strong>How do I create and configure a machine-to-machine application in Kinde?</strong></summary> Setting up M2M is straightforward - create a new application in your Kinde dashboard and select "Machine to machine" as the type. You'll get a client ID and client secret (treat secrets as highly sensitive). The key difference from regular apps is that M2M applications don't need callback URLs since there's no user redirect flow. You will need to specify which APIs this M2M app can access and what scopes it needs. Start with minimal permissions and expand as needed - it's easier to add permissions than to figure out why something has too much access. [Create machine-to-machine application](/machine-to-machine-applications/m2m-application-setup/create-an-m2m-application/) </details> <details> <summary><strong>What are the security best practices for storing Kinde M2M credentials?</strong></summary> Never, ever put M2M credentials directly in your code or version control - that's like posting your house keys on social media. Use environment variables and a secrets manager (AWS Secrets Manager, Azure Key Vault, Google Secret Manager) or your platform’s secure configuration system. Rotate your client secrets regularly, especially if you suspect they might have been exposed. Consider using different M2M applications for different environments (development, staging, production) so a compromise in one doesn't affect others. [Machine-to-machine token structure](/machine-to-machine-applications/about-m2m/token-structure-and-claims-for-m2m-applications/) </details> <details> <summary><strong>When should I use multiple M2M applications versus one application with broad permissions?</strong></summary> Follow the principle of least privilege - create separate M2M applications for different services or use cases. Your email service might only need read access to user profiles, while your analytics service needs broader access to usage data. This compartmentalization means if one service gets compromised, the blast radius is limited. It also makes debugging easier when you can trace API calls back to specific applications. The slight overhead of managing multiple M2M apps is worth the security and operational benefits. [Create machine-to-machine application](/machine-to-machine-applications/m2m-application-setup/create-an-m2m-application/) </details> <details> <summary><strong>How do I handle Kinde M2M token expiration in production systems?</strong></summary> M2M access tokens expire (usually after an hour), so your application needs to handle token refresh gracefully. Most Kinde SDKs handle this automatically, but if you're doing it manually, implement retry logic that gets a fresh token when you receive 401 responses. Cache tokens in memory and refresh proactively before expiry. For high-traffic systems, use a short-lived, in-memory cache per host/process to reduce token requests. Do not share tokens across services or persist them. [About machine-to-machine applications](/machine-to-machine-applications/about-m2m/token-structure-and-claims-for-m2m-applications/) </details> ## API access and scopes <details> <summary><strong>What Kinde API scopes do I need for different M2M use cases?</strong></summary> It depends on what your M2M application needs to do. For basic user management, you might need `read:users` and `write:users`. For organization management, add `read:organizations` and `write:organizations`. If you're syncing billing data, include relevant billing scopes. Here's the thing - start narrow and expand permissions as needed. It's much easier to debug "permission denied" errors than to figure out why an M2M app has access to everything. Check the Kinde Management API docs for the complete scope list and map them to your actual business needs. [Add APIs to machine-to-machine applications](/developer-tools/your-apis/api-scopes-m2m-applications/) </details> <details> <summary><strong>How do I call Kinde APIs from my M2M application without getting rate limited?</strong></summary> Respect the rate limits and implement exponential backoff when you hit them. Batch your API calls when possible instead of making hundreds of individual requests. For high-volume operations like user imports, use bulk endpoints if available or spread the work over time. Cache data that doesn't change frequently - you probably don't need to fetch the same user profile 50 times per minute. If you're consistently hitting limits, it might be time to optimize your integration or contact Kinde about higher limits. [Authenticate with M2M](/machine-to-machine-applications/about-m2m/authenticate-with-m2m/) </details> <details> <summary><strong>What's the best way to handle Kinde Management API responses in M2M applications?</strong></summary> Always check HTTP status codes before processing response data – a 200 means success, anything else needs error handling. Parse the JSON response carefully and handle cases where expected fields might be missing. For paginated responses, implement proper pagination logic rather than just grabbing the first page. Log API responses (but never log credentials or tokens) for debugging purposes, and implement idempotent operations where possible so retrying failed requests doesn't cause duplicate data. [Troubleshoot M2M token errors](/machine-to-machine-applications/troubleshooting-m2m/troubleshoot-m2m-token-errors/) </details> <details> <summary><strong>How do I test Kinde M2M integrations safely without affecting production data?</strong></summary> Use separate M2M applications for development and production environments - this keeps your test data completely isolated. Create test organizations and users that you can safely experiment with. Set up your CI/CD pipeline to use development M2M credentials for automated testing. Mock the Kinde API responses in your unit tests rather than making real API calls every time. And please, test your error handling scenarios - what happens when the API is down or returns unexpected responses? [Create machine-to-machine application](/machine-to-machine-applications/m2m-application-setup/create-an-m2m-application/) </details> ## Integration patterns <details> <summary><strong>How should I structure Kinde M2M calls for microservices architecture?</strong></summary> Each microservice should have its own M2M application with only the permissions it needs - this follows the principle of least privilege and makes security auditing much easier. Consider creating a shared authentication service that handles token management for all your microservices, or use a service mesh that can inject tokens automatically. Don't pass M2M tokens between services - each service should authenticate directly with Kinde. This prevents token leakage and makes it easier to track which service is making which API calls. [About machine-to-machine applications](/machine-to-machine-applications/about-m2m/) </details> <details> <summary><strong>What's the best way to sync user data between Kinde and my application using M2M?</strong></summary> Use webhooks for real-time updates when users change their profiles or organizations, then use M2M API calls to fetch detailed data when needed. Don't try to keep a complete mirror of Kinde data in your system - it's better to cache frequently accessed information and fetch fresh data for important operations. Implement proper error handling for sync operations, and consider implementing eventual consistency patterns where slight delays are acceptable. [Sync data in Kinde](/authenticate/manage-authentication/sync-with-kinde/) </details> <details> <summary><strong>How do I handle Kinde organization management through M2M applications for multi-tenant SaaS?</strong></summary> M2M is perfect for automated organization provisioning when new customers sign up. You can create organizations, set up initial users, configure permissions, and even assign billing plans all through the Management API. Use consistent naming conventions for organizations (maybe map them to your internal customer IDs) and store the Kinde organization ID in your customer records for easy lookup. This automation means new customers can start using your product immediately without manual setup steps. [M2M apps for organizations](/machine-to-machine-applications/organization-scoped-m2m-apps/m2m-applications-for-organizations/) </details> <details> <summary><strong>How can I use Kinde M2M applications to automate user provisioning workflows?</strong></summary> Set up M2M applications that can create users, assign them to organizations, and configure their initial permissions based on your business logic. This is particularly useful for enterprise customers who need automated onboarding from their HR systems or directory services. You can trigger these workflows from webhooks, scheduled jobs, or API events from other systems. Just make sure to handle edge cases like duplicate email addresses or organization limits gracefully. [Machine-to-machine auth flow](/machine-to-machine-applications/about-m2m/authenticate-with-m2m/) </details> ## Troubleshooting and monitoring <details> <summary><strong>Why is my Kinde M2M application getting authentication errors in production?</strong></summary> Check the obvious stuff first - are you using the right client ID and secret for your production environment? M2M credentials are environment-specific, so development credentials won't work in production. Look at the exact error message: "invalid_client" usually means wrong credentials, while "insufficient_scope" means you're trying to access APIs without the right permissions. If tokens were working before but suddenly stopped, check if credentials were rotated or if API scopes changed. [M2M API scopes](/machine-to-machine-applications/m2m-application-setup/scopes-for-m2m-applications/) </details> <details> <summary><strong>How do I monitor and debug Kinde M2M API performance issues?</strong></summary> Implement proper logging that captures request/response times, error rates, and token refresh patterns. Monitor for increasing latency or higher error rates - these often signal capacity issues or misconfigurations. Use correlation IDs in your logs so you can trace requests across multiple services. Set up alerts for authentication failures or unusual API usage patterns. The Kinde dashboard shows some usage metrics, but you'll want your own monitoring for production applications. [Test API with M2M tokens](/developer-tools/your-apis/test-token-from-kinde/) </details> <details> <summary><strong>What should I do when my Kinde M2M application needs higher rate limits?</strong></summary> First, optimize your current usage - are you making unnecessary API calls or missing opportunities to batch requests? Cache data that doesn't change frequently and implement proper pagination for large datasets. If you've optimized everything and still need higher limits, document your use case and expected traffic patterns when contacting Kinde support. They'll want to understand your business needs and ensure the higher limits won't impact system performance for other customers. [API rate limits](/developer-tools/kinde-api/api-rate-limits/) </details> <details> <summary><strong>How do I handle intermittent failures when calling Kinde APIs from M2M applications?</strong></summary> Network issues happen, so build resilience into your M2M integrations. Implement exponential backoff with jitter for retries, set reasonable timeouts on API calls, and have circuit breaker patterns for critical paths. Log failures with enough context to debug later, but don't spam your logs with retry attempts. For non-critical operations, consider using message queues so failed operations can be retried later without blocking your main application flow. [Troubleshoot M2M](/machine-to-machine-applications/troubleshooting-m2m/troubleshoot-m2m-token-errors/) </details> ## Advanced use cases <details> <summary><strong>How can I use Kinde M2M applications for automated user lifecycle management?</strong></summary> M2M is perfect for automating the boring stuff - creating accounts when customers sign up through your sales process, deactivating users when they leave companies, or updating permissions based on role changes. Set up webhooks to trigger these workflows, then use M2M API calls to make the actual changes in Kinde. You can even automate organization setup for enterprise customers, complete with custom authentication requirements and user provisioning. Just make sure you have proper audit logging for compliance purposes. [Management API integration](/developer-tools/kinde-api/connect-to-kinde-api/) </details> <details> <summary><strong>What's the best approach for using Kinde M2M in serverless functions and background jobs?</strong></summary> Serverless functions are actually perfect for M2M since you don't need to worry about long-lived token storage. Get a fresh token at the start of each function execution - the overhead is minimal and it's more secure than trying to cache tokens across function invocations. For background jobs, implement token caching with proper expiration handling. Remember that cold starts might affect initial authentication performance, so consider warming up critical functions if latency matters. [Example of using M2M for AI](/machine-to-machine-applications/organization-scoped-m2m-apps/using-m2m-apps-for-ai-applications/) </details> <details> <summary><strong>How do I implement Kinde M2M for data synchronization between multiple systems?</strong></summary> Design your sync jobs to be idempotent - running them multiple times should produce the same result without creating duplicates. Use the Management API to query for changes since your last sync, then update your systems accordingly. Implement proper error handling and retry logic since network issues happen. Consider using message queues or event streams for real-time sync requirements. And always, always test your sync logic with large datasets before going live - edge cases love to hide in bulk operations. [Data sync in Kinde](/authenticate/manage-authentication/sync-with-kinde/) </details> <details> <summary><strong>How can I leverage Kinde M2M applications for compliance and audit requirements?</strong></summary> M2M applications are excellent for automated compliance workflows - you can programmatically generate user access reports, audit permission changes, or automatically revoke access for inactive accounts. Use the Management API to query user activities and organization changes, then format this data for compliance reporting. Set up scheduled jobs that check for policy violations or unusual access patterns. Remember to log all M2M operations for your own audit trail - knowing which automated system made which changes is crucial for compliance. [Management API overview](/developer-tools/kinde-api/connect-to-kinde-api/) </details>

# Machine to machine applications - About m2m - M2M quick start

> Step-by-step quick start guide for creating and using M2M applications in Kinde including API authorization, scope assignment, and token generation

m2m quick start, machine to machine, api authorization, client credentials, scopes, access tokens, bearer token, curl
machine-to-machine-applications, about-m2m

This guide shows you how to create a Machine-to-Machine (M2M) application in Kinde, authorize it for an API, and use the client credentials flow to get a token and make a secure API request. ## Step 1: Create a machine-to-machine app 1. On the Kinde home page, select **Add application**. 2. Enter a name for the application. 3. Choose **Machine-to-machine (M2M)**. 4. Select **Save**. ## Step 2: Create an API in Kinde (if you don't have one) You can skip this step if you already have an API registered in Kinde. 1. Go to **Settings > APIs**. 2. Select **Add API**. 3. Enter a name for the API. 4. Select **Save**. For details on the full API setup, see [Register and manage APIs](/developer-tools/your-apis/register-manage-apis/). ## Step 3: Authorize the app to access an API 1. Open the newly created M2M app. 2. Go to **APIs** in the menu. 3. Find the API you want to authorize in the list. 4. Select the three dots on the far right and select **Authorize**. ## Step 4: (Optional) Add scopes to define permissions 1. Go to **Settings > APIs**. 2. Choose the API you want to protect. 3. Select **Scopes** in the menu and add scopes (e.g. `read:users`, `write:flags`). 4. Once you are finished, open the M2M app and assign the scopes. See [Define and manage API scopes](/developer-tools/your-apis/api-scopes-m2m-applications/). ## Step 5: Get a token to test your M2M app You can test the app in one of two ways: ### Option A - Use the **Test** details in Kinde 1. Open your M2M app. 2. Go to **Test** in the menu. 3. Select the API (audience). 4. Copy the generated token. ### Option B - Use the client credentials flow directly ```bash curl --request POST 'https://<your-subdomain>.kinde.com/oauth2/token' \ --header 'Content-Type: application/x-www-form-urlencoded' \ --data-urlencode 'grant_type=client_credentials' \ --data-urlencode 'client_id=your-client-id' \ --data-urlencode 'client_secret=your-client-secret' \ --data-urlencode 'audience=<your-api-audience>' \ --data-urlencode 'scope=read:users write:flags' ``` The response will include a bearer token you can use in requests: ```json { "access_token": "<token>", "token_type": "Bearer", "expires_in": 3600 } ``` ## Step 6: Use the token in an API call Include the token in the `Authorization` header: ```bash curl https://your-subdomain.kinde.com/v1/organizations \ -H "Authorization: Bearer <token> ```

# Machine to machine applications - About m2m - Token structure and claims

> Reference guide to M2M token structure and claims including JWT payload examples, standard claims, and validation best practices for secure API access

token structure, jwt claims, m2m tokens, org_code, audience, scopes, token validation, openid configuration
machine-to-machine-applications, about-m2m

Access tokens issued by Kinde to Machine-to-Machine (M2M) applications are JSON Web Tokens (JWTs)that include trusted claims about the app, scopes, and (if applicable) the organization. This reference explains what those claims are and how to use them securely in your APIs or services. ## How to view M2M token claims Tokens returned from the client credentials flow can be decoded using any standard JWT library, or online tools like [Kinde's JWT decoder](https://kinde.com/tools/online-jwt-decoder/). You do **not** need to validate the signature unless you're verifying tokens on your own backend (outside of Kinde-hosted APIs). For most use cases, Kinde validates the token for you when you call our APIs. ## Example M2M token payloads ### Global M2M app ```json { "aud": [ "your-api-audience ], "azp": "d4d3c5b74e064badb9625a4aa6241bcc", "exp": 1751237068, "gty": [ "client_credentials ], "iat": 1751150668, "iss": "https://<your-subdomain>.kinde.com", "jti": "f95ed3e0-cc4d-40c4-b95a-9971729b0ae5", "scope": "read:users write:flags", "scp": [ "read:users", "write:flags ], "v": "2" } ``` ### Org-scoped M2M app ```json { "aud": [ "your-api-audience ], "azp": "d4d3c5b74e064badb9625a4aa6241bcc", "exp": 1751237068, "gty": [ "client_credentials ], "iat": 1751150668, "iss": "https://<your-subdomain>.kinde.com", "jti": "f95ed3e0-cc4d-40c4-b95a-9971729b0ae5", "org_code": "org_ba4a2311eb1", "scope": "read:users write:flags", "scp": [ "read:users", "write:flags ], "v": "2" } ``` ## Standard M2M token claims | Claim | Description | |-------|-------------| | `aud` | The audience for the token. This is the API that the token is intended for. | | `azp` | The client ID of the M2M app that requested the token. | | `exp` | The expiration time of the token. | | `gty` | The grant type for the token. This is always `client_credentials`. | | `iat` | The issuance time of the token. | | `iss` | The issuer of the token. This is the Kinde environment URL. | | `jti` | The unique identifier for the token. | | `scope` | The scopes granted to the token. | | `scp` | The list of scopes initially requested | | `v` | The version of the token. | ## Additional M2M claims for org-scoped apps | Claim | Description | |-------|-------------| | `org_code` | The organization code for the token. | ## Validating and using claims for M2M apps In your API or backend service, you can use these claims to enforce access: - Confirm the `aud` matches the expected audience for your API - If your endpoint is organization-specific (e.g. `/orgs/:org_code/...`), ensure that `org_code` from the token matches the route parameter - Use `scopes` to implement scope-based access control (e.g. `write:flags` required to enable a feature flag) ## Important information about M2M tokens, audiences, and scopes - Tokens are signed using asymmetric keys (RS256) - You can retrieve your Kinde environment’s public keys from the [OpenID configuration endpoint](https://your-subdomain.kinde.com/.well-known/openid-configuration) - Token claims are added by Kinde based on the M2M app’s configuration and assigned scopes — they cannot be overridden in the token request - You can request multiple audiences - You can request specific scopes to limit the permissions of the token

# Machine to machine applications - M2m application setup - Assign feature flags for use in M2M tokens

> Guide to assigning feature flags to M2M tokens including environment-level flag definition, token customization, and common use cases for conditional functionality

feature flags, m2m tokens, environment flags, token customization, boolean flags, string flags, json flags, ai agents
machine-to-machine-applications, m2m-application-setup

You can include feature flags in the tokens issued to machine-to-machine (M2M) applications in Kinde. This is helpful for enabling or disabling functionality in downstream systems based on feature access. <Aside> At this time, only **environment-level feature flags** can be included in M2M tokens. Support for organization-assigned flag values may be added in future releases. </Aside> ## Define environment-level feature flags Before including a flag in a token, you need to define it in your environment. This is the quick procedure (below), here's the [detailed procedure for adding feature flags](/releases/feature-flags/add-feature-flag/). 1. In Kinde, go to **Releases**. 2. Select **Add feature flag**. 3. Give the flag a key and (optionally) a description. 4. Choose the flag type (boolean, string, integer, JSON). 5. (Optional) Add a default value. 6. (Optional) Decide if the feature flag value can be overridden. 7. Select **Save**. Once defined, this flag will be available for inclusion in any M2M token issued in the same environment. ## Include a flag in an M2M token 1. Go to **Settings > Applications > Your M2M app**. 2. Select **Tokens** in the menu. 3. Under **Feature flags**, toggle on the flags you want included in the token. These flags will be embedded in the token under the `feature_flags` claim: ```json { "feature_flags": { "new-ai-agent": { "t": "b", "v": true }, "access-level": { "t": "s", "v": "beta" } } } ``` The `t` and `v` are short codes for the type and value of the feature flag. - `t` = `type` (boolean, string, number) - `v` = `value` (true | false, "beta", 1, etc.) Only the feature flags you explicitly toggle on will be included. ## Common use cases - Enable or disable AI models or endpoints - Drive conditional logic in APIs or job runners - Gate functionality in distributed workers ## Notes - Flags are set at the **environment** level - they are global, not org-specific - Token customization is configured per-app in the **Tokens** tab - Tokens remain small: only enabled flags are included - Flag values are read-only for the recipient - you must update them via the dashboard or API

# Machine to machine applications - M2m application setup - Add metadata to an M2M app using properties

> Guide to adding metadata to M2M applications using properties including property definition, assignment, and token customization for configuration management

properties, metadata, m2m applications, token customization, application properties, configuration, ai agents, structured data
machine-to-machine-applications, m2m-application-setup

You can use **Properties** in Kinde to add structured metadata to a Machine-to-Machine (M2M) application. These properties can store configuration or contextual data, such as `region`, `tier`, or `model_version`. While properties can be applied to users and orgs, only properties scoped to **Applications** are relevant for M2M apps. This feature is useful for: - Customizing tokens - Driving logic in downstream systems - Managing AI agent behavior - Setting up per-customer configuration without hardcoding or external storage If you're looking to include properties inside tokens, see [Customize the claims of an M2M token with properties](/machine-to-machine-applications/m2m-application-setup/add-metadata-to-an-m2m-application-with-properties/). ## Step 1: Define the property for the M2M application Before you can assign a property to an app, you need to define it. 1. In Kinde, go to **Settings > Data Management > Properties**. 2. Select **Add property**. 3. Give the property a name. 4. Add a description and key (e.g. `tier`, `region`, `model_version`). 5. If you want a property to be included in tokens, switch off the **Private** option. 6. Choose **Applications** for where the property is to be used. 7. Select **Save**. The property is now available across all M2M applications. ## Step 2: Assign the property to an M2M application 1. Open the relevant M2M application in Kinde. 2. Go to the **Properties** menu. 3. Add or edit values for the available properties. For example: | Property | Value | | ------------- | ----- | | region | eu | | model_version | v2 | | tier | pro | These values are stored with the app but are not included in tokens unless explicitly enabled. ## Step 3: Include a property in an M2M token 1. Open the relevant M2M application in Kinde. 2. Select **Tokens** in the menu. 3. Scroll to the **Token customization** section and select **Customize** on the **M2M token** tile. 4. Under **Properties**, toggle on the properties you want included in the token. 5. Select **Save**. The selected properties are embedded in the token under the `application_properties` claim: ```json { "application_properties": { "region": { "v": "eu" }, "tier": { "v": "pro" } } } ```

# Machine to machine applications - M2m application setup - Create an M2M application

> Guide to creating M2M applications in Kinde including general and organization-scoped applications with app key generation

create m2m application, machine to machine, organization scoped, app keys, client id, client secret, domain details
machine-to-machine-applications, m2m-application-setup

This guide shows you how to create a Machine-to-Machine (M2M) application in Kinde. They are either general or organization-scoped (Organization scoped M2M apps are available on Plus and Scale plans only). ## Create a general M2M application You will want to create a separate M2M application for each user, system, or business who needs to access your APIs. It is not secure to share access via the same tokens or app keys. 1. Go to **Settings > Applications.** 2. Select **Add Application**. 3. In the dialog that opens, give the application a name, and select **Machine to Machine** as the **Application type**. 4. Select **Save**. App keys - including **Domain** details, **Client ID** and **Client Secret** - are issued for the application. ## Create an organization-scoped M2M application 1. Go to **Organizations > [Organization] > M2M apps.** 2. Select **Add M2M application**. 3. In the dialog that opens, give the application a name, and select **Machine to Machine** as the **Application type**. 4. Select **Save**. App keys - including **Domain** details, **Client ID** and **Client Secret** - are issued for the application.

# Machine to machine applications - M2m application setup - M2M application API scopes

> Overview of M2M application API scopes for controlling token permissions and access control in Kinde applications

m2m scopes, api scopes, custom scopes, read:users, write:flags, token permissions, access control
machine-to-machine-applications, m2m-application-setup

Scopes define what actions a token is allowed to perform when calling an API. For example, you might create scopes like `read:users` or `write:flags` to control how each machine-to-machine (M2M) app can interact with your services. To learn how to create custom scopes and assign them to APIs and applications, see [Custom API scopes in Kinde](https://docs.kinde.com/developer-tools/your-apis/custom-api-scopes/). For information about API scopes for M2M apps, see [Manage API scopes for M2M applications](/developer-tools/your-apis/api-scopes-m2m-applications/).

# Machine to machine applications - M2m token customization - Customize the claims of an M2M token

> Guide to customizing M2M token claims including properties, feature flags, and custom metadata for enhanced token functionality and configuration

token customization, m2m tokens, properties, feature flags, custom claims, jwt, metadata, ai agents
machine-to-machine-applications, m2m-token-customization

You can customize the claims of tokens issued to Machine-to-Machine (M2M) applications in Kinde by including selected **Properties** and **Feature Flags**. This allows you to inject structured metadata and configuration directly into the token, without requiring an additional lookup at runtime. This is useful for: - Routing or behavior changes based on metadata - Feature gating in backend systems - Configuring AI agents or other automation tools Tokens remain signed JWTs and can be verified like any other Kinde-issued token. See [Token customization](/build/tokens/token-customization/) for detailed procedures. ## Include feature flags in the token If your M2M app is scoped to an organization, you can also include feature flags that are enabled for that org. See [Add feature flags to M2M applications](/machine-to-machine-applications/m2m-application-setup/add-feature-flags-to-m2m-applications/) ## Important info about customizing M2M tokens - [Properties must be defined and assigned](/properties/work-with-properties/manage-properties/) before they can be included in a token. - Only [environment level feature flags](/releases/feature-flags/add-feature-flag/) are available for M2M apps. - Only toggled flags and properties are included - so the token stays lean and secure. ## Complete control over the token For complete control over the token, you can use the [Kinde M2M token generation workflow](/machine-to-machine-applications/m2m-workflow-automation/m2m-workflow/) to customize the token further. For example, you can: - Add custom claims to the token - Add custom scopes to the token - Add custom metadata to the token

# Machine to machine applications - M2m workflow automation - Trigger workflows when an M2M token is generated

> Guide to triggering workflows when M2M tokens are generated including real-time token usage tracking, custom validation, and dynamic service configuration

m2m workflows, token generation, workflow triggers, audit logging, custom validation, dynamic configuration, rate limiting, usage tracking
machine-to-machine-applications, m2m-workflow-automation

Kinde lets you run your own code via the [M2M token generation workflow](/workflows/example-workflows/m2m-token-generation-workflow/) whenever a machine-to-machine (M2M) token is generated. This gives you a powerful way to react to token usage in real time. Use this to: - Audit or log token usage - Apply custom validation - Configure downstream services dynamically - Enforce limits or rate-based rules > This trigger runs **server-side** on Kinde infrastructure. You don’t need to deploy or host anything yourself. ## Real-world use cases Here are some examples of how teams are using this workflow trigger: ### 1. Track token usage by region Log a metric to your analytics system based on metadata in the token (e.g. `region: eu`). Helps track activity across territories. ### 2. Enforce internal token policies Prevent token generation if a certain property or flag is missing (e.g. `model_version` not assigned). ### 3. Apply dynamic configuration Trigger a downstream webhook or set a cache flag when a token is generated, allowing dependent services to fetch relevant settings. ### 4. Alert on suspicious usage Send an alert or log entry if a token is requested more than X times within a short period. ## Set up the M2M token generation workflow The full setup process and code example is documented in the [Token generated workflow trigger](/workflows/example-workflows/m2m-token-generation-workflow/) page, and includes: - Example JavaScript handler - Event payload shape - Deployment instructions

# Machine to machine applications - Organization scoped m2m apps - Enforce org access in your API using M2M tokens

> Guide to enforcing organization access control in APIs using M2M tokens including org_code validation, Express middleware examples, and multi-tenant security best practices

org access enforcement, m2m tokens, org_code validation, tenant-specific apis, access control, express middleware, jwt verification, multi-tenancy
machine-to-machine-applications, organization-scoped-m2m-apps

If you're using [org-scoped machine-to-machine (M2M) apps](/machine-to-machine-applications/organization-scoped-m2m-apps/m2m-applications-for-organizations/), Kinde will automatically include a trusted `org_code` claim in the token. You can then enforce access control in your own APIs using this claim. ## When to enforce org context You should validate `org_code` in any API route or resource that is **tenant-specific**, such as: - `/orgs/:org_code/users` - `/reports/:org_code/usage` - Backend functions or queues scoped to a customer’s data If the token’s org doesn’t match the route or request context, you should reject the request. ## What to check When you receive a token, decode it and check the following. 1. The token is valid and not expired. 2. The token contains `org_code`. 3. The `org_code` in the token matches the organization being accessed. ## Example in Node.js (Express) ```js const jwt = require("jsonwebtoken"); function verifyOrgAccess(req, res, next) { const authHeader = req.headers.authorization; const token = authHeader?.split(" ")[1]; if (!token) return res.status(401).send("Missing token"); // If Kinde is **not** validating the token for you, // verify the signature instead of a raw decode. // const PUBLIC_KEY = ... // fetch from /.well-known/openid-configuration const decoded = jwt.verify(token, PUBLIC_KEY, {algorithms: ["RS256"]}); // Check for required claims if (!decoded?.org_code) return res.status(403).send("Token not scoped to an organization"); const orgFromRoute = req.params.org_code; if (decoded.org_code !== orgFromRoute) { return res.status(403).send("Token does not match organization"); } next(); } ``` Then apply the middleware: ```js app.get("/orgs/:org_code/users", verifyOrgAccess, (req, res) => { // safe to fetch users for this org }); ``` ## Tips for working with org scoped M2M apps accessing your API - You don’t need to verify the token signature if Kinde is validating the token on the backend (e.g. if you’re using our hosted APIs). - If you’re validating the token yourself, use the public key from your environment’s OpenID configuration: `https://<your-subdomain>.kinde.com/.well-known/openid-configuration` - Always treat `org_code` as a **binding contract** — never override it with user input ## How to treat global tokens If the token has no `org_code`, treat it as **not authorized** to access org-specific resources unless explicitly allowed. You may choose to: - Reject the request - Allow access only to system-level endpoints - Prompt developers to use org-scoped apps instead

# Machine to machine applications - Organization scoped m2m apps - M2M apps scoped to organizations

> Guide to organization-scoped M2M applications including tenant isolation, token structure with org_code claims, and best practices for multi-tenant environments

org-scoped m2m, organization scoped, tenant isolation, org_code, client credentials, multi-tenancy, access control, audit trails
machine-to-machine-applications, organization-scoped-m2m-apps

<Aside type="upgrade"> This feature is available on the [Kinde Plus and Kinde Scale plans](https://kinde.com/pricing/) </Aside> You can create machine-to-machine (M2M) applications in Kinde that are scoped to a specific organization. These applications are used to issue access tokens that are automatically restricted to that organization’s context, ensuring strong tenant isolation when calling Kinde’s APIs or your own. Org-scoped apps use the same client credentials flow as other M2M apps, but the tokens they generate include the `org_code` claim. ## When to use an org-scoped M2M application Use an org-scoped app when: - You're building automation or AI tools that act on behalf of a specific customer or tenant - You want to issue per-organization API access keys with enforced access boundaries - You need to simplify your API logic by trusting `org_code` directly from the token - You want tighter auditability and control across multiple customer environments ## Token structure Tokens issued to an org-scoped app include trusted claims such as: - `org_code`: the organization the token is scoped to - `scope`: the permissions granted to the token ```json { "org_code": "org_123", "scope": "read:users write:flags" } ``` These claims are enforced at token issuance time and cannot be modified by the caller. ## Create an org-scoped M2M app 1. In Kinde, go to **Organizations**, then view an organization. 2. Select **M2M apps**. 3. Enter a name for the application. 4. Select **M2M application** as the type. 5. Select **Save**. Kinde generates a `client_id` and `client_secret` tied to the selected organization. Use the credentials in a standard client credentials flow to request a token. Use the credentials to authenticate using the [client credentials flow](/machine-to-machine-applications/about-m2m/authenticate-with-m2m/). The resulting token will include the organization context automatically. These claims can be used by your backend services to authorize access to specific APIs or resources. ## Org-scoped vs global M2M applications | Feature | Global M2M app | Org-scoped M2M app | | --------------------- | ---------------------------------- | ------------------------------ | | Org context in token | No | Yes | | Tenant data isolation | Manual | Enforced | | Use case | Admin scripts, internal automation | Per-tenant agents, scoped APIs | | Token restrictions | None | Scoped to one org | | Token claims | Basic | Includes `org_code` | ## Best practices for org-scoped M2M apps - Use separate M2M apps for different scopes or services. - Limit the [scopes](https://docs.kinde.com/developer-tools/your-apis/custom-api-scopes/) assigned to each M2M app to the minimum required for its function. - [Rotate client secrets](/build/applications/rotate-client-secret/) periodically using the UI. - Audit token usage by tracking `client_id` and `org_code` in logs. - Avoid including any personally identifiable information (PII) in token claims.

# Machine to machine applications - Organization scoped m2m apps - Using M2M apps for AI applications

> Guide to using M2M applications for AI tools and agents including organization-scoped authentication, custom properties, feature flags, and best practices for AI service security

ai applications, m2m apps, ai assistants, ai agents, organization scoped, properties, feature flags, token customization, org isolation
machine-to-machine-applications, organization-scoped-m2m-apps

If you're building AI-powered tools or agents that act on behalf of your customers, machine-to-machine (M2M) applications in Kinde offer a simple, secure way to authenticate them. M2M apps are ideal for: - Long-running background jobs - Headless tools or scheduled workers - AI assistants, agents, or orchestration layers By scoping M2M apps to specific organizations, you ensure each token can only access the data and functionality appropriate to that customer. ## Example: AI assistant per organization You’ve built a support assistant that uses a customer’s internal knowledge base to generate responses. Each org gets their own agent instance. With Kinde, you can: - Create one M2M app per organization - Assign custom metadata (e.g. model version, language preference) - Include feature flags in the token (e.g. `enable_agent_v2`) - Enforce `org_code` in your API to isolate access Your backend APIs validate the incoming token and respond accordingly — no need for separate credential logic or inline configuration. ## Example: Shared agent with dynamic tokens If you deploy a shared service that rotates between customer workspaces, you can: - Store the appropriate client credentials per org - Request tokens using the client credentials flow - Receive a token scoped to a single org, with configuration claims This keeps your infrastructure lightweight while maintaining strict org isolation. ## Best practices - Use [Properties](/machine-to-machine-applications/m2m-application-setup/add-metadata-to-an-m2m-application-with-properties/) to define custom configuration like `model_version` or `max_tokens` - Use [Token customization](/machine-to-machine-applications/m2m-token-customization/customize-m2m-tokens/) to inject only the claims your AI service needs - Enforce `org_code` and `scopes` server-side to prevent token misuse - Rotate credentials regularly and assign minimal scopes per app - Include feature flags to roll out new AI capabilities safely ## Sample token contents ```json { "org_code": "org_123456789", "application_properties": { "model_version": { "v": "gpt-4" }, "region": { "v": "eu" } }, "feature_flags": { "agent-v2": { "t": "b", "v": true }, "beta-tools": { "t": "b", "v": false } } } ``` The `t` and `v` are short codes for the type and value of the feature flag. - `t` = `type` (boolean, string, number) - `v` = `value` (true | false, "beta", 1, etc.) Only the feature flags you explicitly toggle on will be included.

# Machine to machine applications - Troubleshooting m2m - Troubleshoot M2M token errors

> Comprehensive troubleshooting guide for M2M token errors including common error codes, causes, fixes, and debugging techniques for machine-to-machine authentication issues

m2m troubleshooting, token errors, invalid_client, unauthorized_client, invalid_scope, invalid_request, 401 unauthorized, 403 forbidden, org_code, jwt decoder
machine-to-machine-applications, troubleshooting-m2m

If you're using a machine-to-machine (M2M) application to request tokens or call APIs, you may encounter errors related to token generation or usage. This guide covers the most common issues and how to resolve them. ## Token request errors These errors occur when calling the token endpoint (`/oauth2/token`). ### `invalid_client` **Cause:** - The `client_id` or `client_secret` is incorrect - The app has been deleted or had its secret rotated **Fix:** - Double check your credentials in the Kinde dashboard - If you recently rotated the secret, make sure you're using the new one ### `unauthorized_client` **Cause:** - The app hasn’t been authorized to access the requested API (audience) **Fix:** - Go to the **APIs** tab on your M2M app in Kinde - Make sure the app is authorized to access the audience you're requesting ### `invalid_scope` **Cause:** - You requested a scope the app isn’t allowed to use - The scope wasn’t defined on the API or wasn't assigned to the app **Fix:** - Go to the **API** in the Kinde dashboard and verify that the scope exists - Go to the **Scopes** tab on your M2M app and assign the correct ones ### `invalid_request` **Cause:** - Missing or malformed parameters in the request - Common issues: missing `audience`, unsupported `grant_type` **Fix:** - Make sure your request includes: - `grant_type=client_credentials` - `client_id`, `client_secret`, and `audience` - Check your content type: must be `application/x-www-form-urlencoded` ## Token usage errors These occur when using the token to call Kinde or your own API. ### `401 Unauthorized` **Cause:** - Missing or expired token - Malformed `Authorization` header **Fix:** - Make sure you're including the token in the request: ```http Authorization: Bearer <token> ``` - Check that the token hasn’t expired (`exp` claim) ### `403 Forbidden` **Cause:** - The token is valid, but doesn’t have access to the resource - For org-scoped tokens: the `org_code` doesn’t match the route or resource - Required scopes are missing **Fix:** - Check the token’s `org_code` and compare to the resource being accessed - Check the token’s `scopes` and ensure the required permission is present ### Token doesn't include `org_code` **Cause:** - You’re using a global M2M app instead of an org-scoped one **Fix:** - If you're expecting a token with `org_code`, create an [org-scoped M2M app](/machine-to-machine-applications/organization-scoped-m2m-apps/m2m-applications-for-organizations/) ## How to debug - Use tools like the [Kinde JWT decoder](https://kinde.com/tools/online-jwt-decoder/) to decode the token and inspect claims - Check your M2M app configuration in Kinde - Use the **Test** tab in the Kinde dashboard to generate a valid token and compare

