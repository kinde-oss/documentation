---
page_id: 4a5b6c7d-8e9f-0a1b-2c3d-4e5f6a7b8c9d
title: Kinde Documentation - Developer tools
description: "Complete documentation for Kinde's developer tools section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - developer-tools
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - developer-tools
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's developer tools section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Developer tools

This is the complete documentation for Kinde's developer tools section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Developer tools - About - Kinde SDKs

> Comprehensive overview of Kinde SDKs including frontend, backend, and native SDKs with version compatibility considerations and community SDK information.

Kinde SDKs, frontend SDKs, backend SDKs, native SDKs, community SDKs, version compatibility, tech stack
developer-tools, sdks, frontend, backend, native

Kinde provides Software Development Kits (SDKs) help you connect your app more easily to Kinde. Generally, you only need one SDK per application or service. But you might use multiple SDKs if your product is comprised of applications or services written in multiple languages. You can also use different SDKs to support front end and back end behavior, if this suits your setup. <Aside type="warning" title="Check version compatibility"> Make sure that your tech stack’s versions are compatible with the SDK you want to use. </Aside> ## **Front end** - [JavaScript SDK](/developer-tools/sdks/frontend/javascript-sdk/) - [React SDK](/developer-tools/sdks/frontend/react-sdk/) - [TypeScript SDK](/developer-tools/sdks/backend/typescript-sdk/) ## **Back end** - [Elixir SDK](/developer-tools/sdks/backend/elixir-sdk/) - [Express.js SDK](/developer-tools/sdks/backend/express-sdk/) - [.NET SDK](/developer-tools/sdks/backend/dotnet-sdk/) - [Java SDK](/developer-tools/sdks/backend/java-sdk/) - [Next.js App Router SDK](/developer-tools/sdks/backend/nextjs-sdk/) - [Next.js Pages Router SDK](/developer-tools/sdks/backend/nextjs-prev-sdk/) - [Nuxt module](/developer-tools/sdks/backend/nuxt-module/) - [Node.js SDK](/developer-tools/sdks/backend/nodejs-sdk/) - [PHP SDK](/developer-tools/sdks/backend/php-sdk/) - [Python SDK](/developer-tools/sdks/backend/python-sdk/) - [Remix SDK](/developer-tools/sdks/backend/remix-sdk/) - [Ruby SDK](/developer-tools/sdks/backend/ruby-sdk/) - [SvelteKit SDK](/developer-tools/sdks/backend/sveltekit-sdk/) - [TypeScript SDK](/developer-tools/sdks/backend/typescript-sdk/) ## **Native** - [Android SDK](/developer-tools/sdks/native/android-sdk/) - [iOS SDK](/developer-tools/sdks/native/ios-sdk/) - [React Native SDK](/developer-tools/sdks/native/react-native-sdk/) - [Expo and React Native SDK](/developer-tools/sdks/native/expo/) - [Flutter SDK ](/developer-tools/sdks/native/flutter-sdk/) ## **Other** - [Node/Apollo GraphQL](/developer-tools/sdks/backend/apollo-graphql/) - [Node/Express GraphQL](/developer-tools/sdks/backend/node-express-graphql/) ## Community SDKs Community SDKs are developed independently by members of the Kinde developer community. While we review community SDKs before we link to them, Kinde is not responsible for directly supporting or updating community SDKs. Please contact the author through GitHub. - [Angular SDK](https://github.com/luukhaijes/kinde-angular) Contact us via [Slack](https://join.slack.com/t/thekindecommunity/shared_invite/zt-2k5i0aeet-d6Z_2qYphcNCpj0bFa4oCg) or [Discord](https://discord.gg/KdkCXRNTFn) support channels if you want to contribute a community SDK.

# Developer tools - About - Using Kinde without an SDK

> Comprehensive guide for integrating with Kinde without SDKs using OAuth 2.0 and OpenID Connect standards including authorization flows, token exchange, and request parameters.

OAuth 2.0, OpenID Connect, callback URLs, authorization code, PKCE, access tokens, scopes, request parameters
developer-tools, oauth, openid-connect

Kinde is designed to help founders and developers build SaaS products by providing software infrastructure like authentication, feature flags, user management, and more. We support connecting to Kinde through [our SDKs](/developer-tools/about/our-sdks/), but everything we build is also OAuth 2 standard, so you can integrate into any language framework with Kinde without an SDK. ## **Get started** [Start for free](https://kinde.com/) on Kinde. ## **OpenID Connect** To connect to Kinde you need to know where the endpoints are for things like authorization, tokens, and user profiles. You’ll also need to know the response types, scopes, and claims that are supported. All this data and more can be found in your OpenID configuration file which is located at: `https://<your_kinde_subdomain>.kinde.com/.well-known/openid-configuration` ## **Set** **callback URLs in Kinde** During the auth process your user will authenticate on Kinde and once authenticated will be redirected back to an endpoint in your code. To define this callback url: 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example [`http://localhost:3000/api/auth/kinde_callback`](http://localhost:3000/api/auth/kinde_callback) - Allowed logout redirect URLs - for example `http://localhost:3000` 3. Select **Save**. You will need to use this redirect URL in the following step. ## **Signing up and signing in** Your users must be redirected from your product to Kinde to sign up or sign in securely. The redirect URL on your product side would look like the following: ```markdown https://<your_kinde_subdomain>.kinde.com/oauth2/auth ?response_type=code &client_id=<your_kinde_client_id> &redirect_uri=<your_app_redirect_url> &scope=openid%20profile%20email &state=abc ``` Note: Never include the client secret in the URL as this is publicly viewable. Kinde supports all the standard OAuth 2 request parameters as well as a few additional Kinde-specific parameters to improve the end user experience. Full details can be found in the **Request parameters** table below. Kinde also supports the PKCE extension, in which case the `code_challenge` and `code_challenge_method` parameters are also required. This is recommended for mobile apps and single page applications (SPAs). ## Handling successful auth for desktop and mobile apps If you offer mobile and desktop apps, as well as access through a browser, you'll need to handle the post-authentication browser state. Rather than leaving a hanging screen, you can show users a success page. To do this, add the `is_use_auth_success_page` parameter to the authorization URL. See the [Request prameters](/developer-tools/about/using-kinde-without-an-sdk/#request-parameters) section below. ## Handling the callback As mentioned before when a user authenticates through Kinde, we will redirect them to the endpoint you defined in the previous step. As part of this redirect, Kinde provides an authorization `code` as a query parameter in the URL. Using the localhost example from before the URL would look something like: ```jsx http://localhost:3000/api/auth/kinde_callback ``` You need to extract this authorization `code` parameter from the URL and exchange it for an access token by making a POST request to the Kinde token endpoint `https://<your_kinde_subdomain>.kinde.com/oauth2/token`. As well as the `code` you have received, this request should also include parameters such as the `client_id`, `client_secret` \*\*, `redirect_uri`, and `grant_type` (which should be set to `authorization_code`). Make a POST request with the following payload: ```markdown client_id=<your_kinde_client_id> &client_secret=<your_kinde_client_secret> &grant_type=authorization_code &redirect_uri=<your_app_redirect_url> &code=<CALLBACK_AUTHORIZATION_CODE> ``` Make sure you replace the `<values>` with your own credentials. This url can now be used to return the access token which can be stored and later used to make authenticated requests on behalf of the user. Note that the `code_verifier` is also required in PKCE flow. The response body will then contain a token that you can decode. Do not include the client secret in frontend / single page applications as this is publicly viewable - instead, use the PKCE extension. ## **Supported grant types for getting access tokens** ### **Authorization Code Flow** Recommended for regular web applications rendered on the server. ### **Authorization Code Flow with Proof Key for Code Exchange (PKCE)** Kinde supports the PKCE extension, in which case the `code_challenge` and `code_challenge_method` parameters are also required. This is recommended for mobile apps and single page applications (SPAs). ### **Implicit flow (not supported)** Before PKCE (see above) this was the method used by applications that were unable to store secrets securely. This flow has security implications and Kinde does not support it for this reason. ## OAuth 2.0 scopes The following scopes can be requested from Kinde. `openid` - requests an ID token which contains information about the user `email` - requests a user's email `profile` - requests profile details as part of ID token, e.g. name, family name, given name, picture (avatar) `offline` - request to act on behalf of the user even if they're offline ## **Request parameters** There are a few useful additional parameters that Kinde supports in the authorization URL. ### `audience` The `audience` claim for the JWT. This can be used to protect your APIs and resource servers. Type: `string` Required: No ### `client_id` The unique ID of your application in Kinde. Type: `string` Required: Yes ### `code_challenge` A base64 encoded string of a SHA256 hash of a code verifier. Type: `string` Required: For PKCE ### `code_challenge_method` Should always be `S256` tells Kinde the method used to hash the code challenge above Type: `string` Required: For PKCE ### `connection_id` Connection ID for authentication method when using [Custom sign-up and sign-in pages](/developer-tools/about/using-kinde-without-an-sdk/) Type: `string` Required: When using custom sign up and sign in pages ### `is_create_org` If an organization should be created along with the user. Type: `boolean` Required: No ### `is_use_auth_success_page` Displays a sign-in success page following authentication. Recommended for browser authentication. Type: `boolean` Required: No ### `has_success_page` Show a success page at the end of the auth flow, this is useful when the callback URL is not a web page Type: `boolean` Required: No ### `lang` For selecting the UI language. Type: `string` Required: No ### `login_hint` When your project knows which user it is trying to authenticate, it can provide their email in this parameter as a hint to Kinde. Passing this hint pre-fills the email box on the sign up and sign-in screens. Type: `string` Required: No ### `org_code` For multi-tenant or platform apps, tell Kinde which organization a user is trying to sign in or sign up to. Type: `string` Required: No ### `org_name` If `is_create_org` is passed then you can optionally include the name of the organization you would like to create. Type: `string` Required: No ### `start_page` (deprecated) Accepts `login` or `registration`, but we recommend using `prompt` as per below instead. Type: `string` Required: No ### `prompt` Accepts `login` or `create` so you can determine if your user should land on the sign up or sign in page. By default, users will land on the sign in page. You can also use `none`. If you use `none` Kinde will not show authentication screens to the user. - If the user has an active SSO session, this will redirect them to the callback URL where the token exchange can occur. - If the user does NOT have an active SSO session, this will redirect them to the callback URL with the following error: ```jsx 302 https://YOUR_CALLBACK_URL? error=login_required& error_description=User+authentication+is+required& state=YOUR_STATE ``` Type: `string` Required: No ### `redirect_uri` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `response_type` Should always be `code`. Kinde does not support the implicit flow as it has shown to be unsecure. Type: `string` Required: Yes ### `scope` The scopes to be requested from Kinde. Scopes include `openid`, `profile`, `email`, `offline`. Type: `string` Required: No ### `state` Kinde will return this to your app so you can validate it came from us and prevent CSRF attacks. Type: `string` Required: No (but recommended) ### nonce Single use code to prevent replay attacks, this will be included in the signed id token Type: `string` Required: No (but recommended) ### workflow_deployment_id workflow deployment to test, password will be requested on login Type: string Required: No ### supports_reauth When this is set to true, users state will be stored encrypted and returned back to application when accessing an expired link. Type: boolean Required: false ### reauth_state The `supports_reauth` is true, state will be returned with error, pass this back to the auth flow to restart flow. Type: string Required: No ### plan_interest Indicates which plan the user has expressed interest in to be signed up to. Type: String Required: No ### pricing_table_key Defines which pricing table to show in billing flow Type: String Required: No ## **Verifying the Kinde access token** It’s likely you will be using a library to validate your JWTs and they will require the URL for your public JSON Web Key (also known as a jwks file). The file can be found here: `https://<your_kinde_subdomain>.kinde.com/.well-known/jwks` ## **Signing out your users** When users sign out, you will want to clear any session or locally stored data in your app and redirect them to your preferred logout URL with the `redirect` parameter. Such as: ```markdown https://<your_kinde_subdomain>.kinde.com/logout?redirect=<your_logout_url> ``` This will end their session on Kinde. A new access token or refresh token needs to be issued for them to sign in again. To add a logout URL in Kinde, go to **Settings > Applications > View Details**, then add the URLs to the **Allowed logout redirect URLs** field. Users will be redirected back to this URL when they sign out.

# Developer tools - Account api - About Kinde's Account API

> Overview of Kinde's Account API for accessing user data like roles, permissions, profile, and billing entitlements using browser-scoped access tokens

account api, user access token, roles, permissions, profile, billing entitlements, feature flags, properties
developer-tools, account-api

Kinde's [Account API](https://docs.kinde.com/kinde-apis/frontend/) uses a users access token to grab data like roles, permissions, profile, billing entitlements, etc. These details can be called from a browser as the call is scoped to the user who the token is for. <Aside> Some data is intentially not available via the Accounts API. For example, plan entitlements information for organizations. This is because Accounts API data is surfaced via a browser token and passing data this way is less secure. Access the Kinde Management API to access secure data. Or contact support for guidance. </Aside> ## When to use the Kinde Account API - `properties` - show a specific promotion for users in certain regions or industries - `feature flags` - roll out beta features for a subset of users - `permissions` - only give access to certtain parts of your app based on permissions - `roles` - restrict access to functions by role, e.g. admins. - `entitlements` - to enable individual users to see plan entitlements ## Access the Account API 1. Get a user access token. This can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc). 2. Call one of the Account API endpoints using the user access token in the Authorization header as a Bearer token. Typically, you can use the getToken command in the relevant SDK. If you want an endpoint added to the [Account API library](https://docs.kinde.com/kinde-apis/frontend/), contact us via support@kinde.com.

# Developer tools - Guides - Troubleshoot code sync errors

> Troubleshooting guide for common code sync errors including deployment failures, missing exports, workflow configuration issues, and runtime error resolution.

code sync errors, troubleshooting, deployment failed, workflow triggers, default function, workflow ID, runtime errors, imports
developer-tools, guides, troubleshooting

If you’ve synced your repository to pass code to Kinde for custom pages or workflows, you may encounter errors from time to time. Here are some common issues and how to resolve them. ## Deployment failed: More than one workflow assigned to this trigger Each trigger can be mapped to only one workflow. Make sure you don’t already have a workflow using the same trigger. ## No default function exported Kinde expects a default function to be exported. Make sure the format is correct. ```jsx // Pages export default async function Page(event) { return "<div>Page content</div>"; } // Workflows export default async function Workflow(event) { // Workflow code here } ``` ## Workflow ID is required Workflows require a unique ID to be set in the `workflowSettings` object. If an ID is present in your code, this usually means the page failed to compile and the settings could not be read. ## Sync log showing no pages and no workflows Technically the sync was successful but Kinde was unable to find any pages or workflows in your repo. Check your `kindeSrc` file and default exports. ## No matching export in `"kindeKnownPackage:https://cdn.jsdelivr.net/npm/@kinde/infrastructure@latest/+esm" for import <xxxxx>` Occurs if you are trying to use a method from the Kinde infrastructure package that doesn’t exist. Check your imports. ## Runtime error: `x` is not defined at `y` Check your code for undefined variable usage.

# Developer tools - Guides - Deploy an app on Vercel

> Step-by-step guide for deploying Kinde applications on Vercel including environment variable configuration, callback URL setup, and starter kit integration.

Vercel deployment, environment variables, callback URLs, starter kits, GitHub integration, cloud deployment
developer-tools, guides, deployment, vercel

Vercel is a cloud platform which enables seamless deployment directly from a GitHub repository, offering scalability, performance, and security. You can use it to streamline the development and deployment process of applications. If you want to test what your app will look like with Kinde auth, follow this guide. Let’s deploy an app on Vercel! ## What you need - A [Vercel](https://vercel.com/) account - You can sign up free using GitHub or your email. - A [GitHub](https://github.com/) account - You can use third-party Git sources, but this tutorial will focus on GitHub. - A deployed application that uses Kinde OR a starter kit such as the [Next.js starter kit](https://github.com/kinde-starter-kits/kinde-nextjs-app-router-starter-kit). ## (Optional) Set up a project using a Kinde starter kit If you don’t have an existing project, create a project with a starter kit from Kinde. 1. Go to the [Kinde Starter Kits Github repository](https://github.com/kinde-starter-kits/) and find the starter kit you want to use. 2. Copy the starter kit by selecting **Use this template**, then select **Create a new repository**. This copies the kit content to your Github account. (You can also clone the repo to your GitHub account if you want.) 3. Enter a name for the new repository, then select **Create repository.** 4. Open the directory of the new repo and find the file called **`.env.local.sample`**. You will need this later. ## Step 1: Add a project in Vercel 1. Sign in to the Vercel [Dashboard](https://vercel.com/dashboard). You’ll see a list of all your projects if you have them. 2. In the top right, select **Add New**, then select **Project**. ![Shows new project screen in Vercel](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/6714b3d9-5725-454a-2dde-e06e6a832200/public) 3. Pick the repository you want to deploy to Vercel (e.g. the one you created above if you used the starter kit). This tutorial uses the project cloned from the previous step `vercel-nextjs-kinde`. 4. Select **Import** next to the project you want to deploy. 5. On the **Configure Project** page, expand the **Environment Variables** section: ![Environment variables in Vercel](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b95cb15a-4f2a-4aa7-9362-51561ea1c100/public) 6. Open the local `.env` file from your project and copy all the contents. 7. Paste the details into the **Environment Variables** section in Vercel. Vercel will autofill your keys and values for you. ![Paste environment variables in Vercel](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/faa5d8a5-7d00-4db8-d477-ba6607ad6e00/public) 8. Once you are done, select **Deploy**. Your project will deploy to Vercel. This may take a minute or two. When the process is finished, you will see the **Congratulations!** page. 9. Vercel generates a public URL for accessing your site. E.g. `https://vercel-nextjs-kinde.vercel.app/`. Copy the URL to use in a later step, where we will update the Kinde callback URLs. ## Step 2: Set up your application in Kinde 1. Sign in to your [Kinde](kinde.com) business and go to **Settings.** 2. Select **Applications.** 3. If you do not have any applications yet, create one. [Follow this guide](https://docs.kinde.com/build/applications/add-and-manage-applications/). 4. If you have already created your app, select **View details** on the application tile. 5. Scroll to the **App keys** section and copy the **Domain, Client ID, and Client secret** somewhere you can access it again. ![App keys section in your Kinde app](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/f6b6879b-2e12-4255-6b7d-864b57c3a400/public) 6. Scroll to the **Callback URLs** section and enter the URL you copied when you deployed on Vercel. The URL will be something like `<NAME_OF_YOUR_PROJECT>.vercel.app`, for example `https://vercel-nextjs-kinde.vercel.app`. 7. Enter the URL in the **Application homepage URI** field, the **Application login URI** field, and the **Allowed logout redirect URLs** field. 8. If you were using `https://localhost:3000`, replace it with your new domain in the **Allowed callback URLs** field. If you're using a starter kit, this might be: `https://vercel-nextjs-kinde.vercel.app/dashboard`. ![Updating Kinde callbacks](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/e4351ab5-a0cc-446c-f124-8f941c855900/public) 9. Select **Save.** ## Step 3: Update Vercel environment variables 1. Open your [Vercel project dashboard](https://vercel.com/dashboard) and navigate to your project. Select the three dots … menu, then **Settings**. 2. Select **Environment Variables**. 3. Edit the values of each environment variable by selecting three dots menu, then selecting **Edit**. ![Update Vercel variables again](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/339ec567-e386-4393-b4bd-da0f5b34fe00/public) 4. In the window that opens, enter the new value for the variable, then select **Save**. 5. Change the variables as follows, using Kinde values: - KINDE_CLIENT_ID - KINDE_CLIENT_SECRET - KINDE_ISSUER_URL (Domain in Kinde) 6. Change the variables as follows, using Vercel values (e.g. `https://vercel-nextjs-kinde.vercel.app`): - KINDE_SITE_URL - KINDE_POST_LOGOUT_REDIRECT_URL - KINDE_POST_LOGIN_REDIRECT_URL You need to deploy your Vercel instance to apply the updated variables. 7. Go to the **Deployments** section. 8. Select the three dots … menu and select **Re-deploy**. <Aside> Do not select **Use existing Build Cache** as that will preserve the old environment variables </Aside> Your website will now be fully functional and you can authenticate with Kinde! ![Shows Kinde verification page for auth](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/d7ecbc5a-08ee-407c-f2a6-60e753198200/public) Remember, if you need any assistance with getting Kinde connected reach out to [support@kinde.com](mailto:support@kinde.com). You can also join the [Kinde community on Slack](https://join.slack.com/t/thekindecommunity/shared_invite/zt-26hdaavyc-CfOa06vP23guSwK~~OpFMQ) or the [Kinde community on Discord](https://discord.com/invite/tw5ng5tK6V) for support and advice from the team and others working with Kinde. Congratulations 🎉 on deploying your Kinde project to Vercel!

# Developer tools - Guides - Integrate Kinde with ASP.NET using Open ID Connect

> Comprehensive guide for integrating Kinde with ASP.NET using OpenID Connect including authentication setup, authorization policies, and secure route protection for MVC and Razor pages.

ASP.NET, OpenID Connect, OIDC, authentication, authorization, policies, permissions, roles, MVC, Razor pages
developer-tools, guides, dotnet, openid-connect

Kinde supports the OpenID Connect (OIDC) protocol, which allows integration with the authentication services built into ASP.NET, without the need for a separate SDK. This guide walks through the steps of integrating Kinde auth into an ASP.NET web application using OpenID Connect. A complete sample project can be found in the .NET [starter kit](https://github.com/kinde-starter-kits/dotnet-starter-kit/). ## Configure your project 1. Install the OpenID connect package: ```bash dotnet add package Microsoft.AspNetCore.Authentication.OpenIdConnect ``` 2. Add authentication services (typically in `program.cs`): ```bash builder.Services.AddAuthentication(options => { options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme; options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme; }) .AddCookie() .AddOpenIdConnect(); ``` 3. Add the authentication and authorization middleware: ```bash app.UseAuthentication(); app.UseAuthorization(); ``` 4. Configure authentication in `appsettings.json`, replacing the placeholders `<your_kinde_domain>`, `<your_client_id>` and `<your_client_secret>`, with your [application keys](/get-started/connect/getting-app-keys/) found in Kinde. ```bash "Authentication": { "Schemes": { "OpenIdConnect": { "Authority": "<your_kinde_domain>", "ClientId": "<your_client_id>", "ClientSecret": "<your_client_secret>", "MapInboundClaims": false, "ResponseType": "code" } } } ``` 5. In Kinde, add an [allowed callback](/get-started/connect/callback-urls/#set-callback-urls) to your application. For local development this callback will look like the following, where `<local_port>` should be replaced with the port generated for your project: ```bash https://localhost:<local_port>/signin-oidc ``` Similarly, add an allowed logout: ```bash https://localhost:<local_port>/signout-callback-oidc ``` The OpenID Connect middleware will automatically handle requests to these routes. ## Manage authorization with policies Access tokens contain information (claims) about what a user is authorized to do when they sign in. In Kinde, you can create policies to manage authorization. ### Via permission claims (recommended) Create a policy that allows only users with certain permission claims, e.g. `read:weather` . ```csharp builder.Services .AddAuthorization(options => { options.AddPolicy("ReadWeatherPermission", policy => policy.RequireAssertion( context => context.User.Claims.Any(c => c.Type == "permissions" && c.Value == "read:weather") )); }); ``` [Set up permissions](/manage-users/roles-and-permissions/user-permissions/) in Kinde. ### Via role claims 1. [Set up Roles](/manage-users/roles-and-permissions/user-permissions/) in Kinde. 2. Add roles to the access token via custom claims, see the [token customization](/build/tokens/token-customization/) procedure. 3. Create a policy for a particular role, for example: ```csharp builder.Services .AddAuthorization(options => { options.AddPolicy("AdminRole", policy => policy.RequireAssertion( context => context.User.Claims.Any(c => c.Type == "roles" && c.Value == "admin") )); }); ``` Note roles defined in Kinde do not map to roles as defined in ASP.NET, so the related functionality, such as `RequireRole()`, cannot be used. ## Secure MVC pages To protect routes, add the `[Authorize]` attribute (from the `Microsoft.AspNetCore.Authorization` package) to any controllers or actions required. For example, allow access only to users that satisfy the policy defined in the previous section: ```csharp [Authorize(Policy = "ReadWeatherPermission")] public ActionResult Weather() ``` See the [ASP.NET Core documentation](http://ASP.NET) for more details on [authorization](https://learn.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-8.0#use-the-authorize-attribute). ## Secure Razor pages Razor pages can be secured by specifying the routes in service configuration, for example: ```csharp builder.Services.AddRazorPages(options => { options.Conventions.AuthorizePage("/Protected"); options.Conventions.AuthorizePage("/Weather", "ReadWeatherPermission"); }); ``` See Microsoft documentation for more details about [authorizing Razor pages](https://learn.microsoft.com/en-us/aspnet/core/security/authorization/razor-pages-authorization?view=aspnetcore-8.0). ## Log out You’ll want to log a user out of your application as well as Kinde, for example: ```csharp public async Task Logout() { await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme); await HttpContext.SignOutAsync(OpenIdConnectDefaults.AuthenticationScheme); } ``` ## Additional options Kinde has some [additional options](/developer-tools/about/using-kinde-without-an-sdk/#request-parameters) such as specifying the organization to log into. These parameters can be specified in the `OnRedirectToIdentityProvider` event in the OpenID connect options. For example: ```csharp .AddOpenIdConnect(options => { options.Events.OnRedirectToIdentityProvider = context => { context.ProtocolMessage.SetParameter("org_code", "<your_org_code>"); return Task.CompletedTask; }; }); ```

# Developer tools - Kinde api - About scopes and Kinde API access

> Comprehensive guide to M2M scopes for Kinde API access, including scope examples and management procedures

scopes, jwt, api access, permissions, read:users, write:users, read:roles, write:roles
developer-tools, kinde-api

The Kinde management API uses JSON Web Tokens (JWTs) to authenticate requests. The token’s scopes claim indicates which endpoints can be accessed when calling the API. ## Example scopes - `read:users` for fetching user details. - `write:users` for modifying user details. - `read:roles` or `write:roles` for managing roles. You can select scopes when you authorize a new application or you can add scopes to an existing application. We recommend adding as few scopes as you need, to maintain API security. ## Request scopes in the body of an access token request By default token requests for an authorized application will return all the scopes enabled below. You can also optionally ask for a subset of enabled scopes to be returned by including them in the body of the access token request. You might do this to add more security to access requests, or because you want your users to be very specific about scopes in their requests. Example request ``` curl --request POST \ --url 'https://<your_subdomain>.kinde.com/oauth2/token' \ --header 'content-type: application/x-www-form-urlencoded' \ --data grant_type=client_credentials \ --data 'client_id=<your_m2m_client_id>' \ --data 'client_secret=<your_m2m_client_secret>' \ --data 'audience=https://<your_subdomain>.kinde.com/api'\ --data 'scope=read:users update:users' ``` ## Add or modify scopes for accessing the Kinde Management API Follow this procedure if you already have an application and you experience a scope error, if you want to add scopes for an application, or remove scopes to tighten security. 1. Go to **Settings > Applications** and select the relevant M2M application. 2. On the left, select **APIs**. 3. Select the three dots next to the Kinde management API, then choose **Manage scopes**. 4. Select the scopes you want to include in the token. For maximum security only enable the minimum scopes you require. 5. Select **Save**.

# Developer tools - Kinde api - Call the Kinde Management API

management api, access token, m2m application, client credentials, oauth2, api authentication
developer-tools, kinde-api

Before you can get an access token and call the Kinde Management API, follow the steps to [create and authorize a machine-to-machine (M2M) application, with scopes](/developer-tools/kinde-api/connect-to-kinde-api/). ## Get access token There are two main methods for getting an access token for the Kinde Management API. ### Method 1: Get a test access token in the Kinde Admin 1. Open the M2M application you created for API access. 2. Go to **Test**. 3. Select **Get token**. 4. Select **Use test token**. You'll be taken to the API docs with the access token prepopulated. You can now test any endpoint. For full details, see [generate a test access token for the Kinde Management API](/developer-tools/kinde-api/kinde-api-test-token/). ### Method 2: Perform a POST request to get an access token To ask Kinde for an access token for calling the management API, perform a POST request to the `https://<your_subdomain>.kinde.com/oauth2/token` endpoint, using the credentials of the M2M application you created in the prerequisite step. The payload should look as follows: <Tabs> <TabItem label="cURL"> ```shellscript curl --request POST \ --url 'https://<your_subdomain>.kinde.com/oauth2/token' \ --header 'content-type: application/x-www-form-urlencoded' \ --data grant_type=client_credentials \ --data 'client_id=<your_m2m_client_id>' \ --data 'client_secret=<your_m2m_client_secret>' \ --data 'audience=https://<your_subdomain>.kinde.com/api' ``` </TabItem> <TabItem label="C#"> ```c# var client = new RestClient("https://<your_subdomain>.kinde.com/oauth2/token"); var request = new RestRequest(Method.POST); request.AddHeader("content-type", "application/x-www-form-urlencoded"); request.AddParameter("application/x-www-form-urlencoded", "grant_type=client_credentials&client_id=<your_m2m_client_id>&client_secret=<your_m2m_client_secret>&audience=https%3A%2F%2F<your_subdomain>.kinde.com%2Fapi", ParameterType.RequestBody); IRestResponse response = client.Execute(request); ``` </TabItem> <TabItem label="Go"> ```go package main import ( "fmt "strings "net/http "io/ioutil ) func main() { url := "https://<your_subdomain>.kinde.com/oauth2/token payload := strings.NewReader("grant_type=client_credentials&client_id=<your_m2m_client_id>&client_secret=<your_m2m_client_secret>&audience=https%3A%2F%2F<your_subdomain>.kinde.com%2Fapi") req, _ := http.NewRequest("POST", url, payload) req.Header.Add("content-type", "application/x-www-form-urlencoded") res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) } ``` </TabItem> <TabItem label="Java"> ```java HttpResponse<String> response = Unirest.post("https://<your_subdomain>.kinde.com/oauth2/token") .header("content-type", "application/x-www-form-urlencoded") .body("grant_type=client_credentials&client_id=<your_m2m_client_id>&client_secret=<your_m2m_client_secret>&audience=https%3A%2F%2F<your_subdomain>.kinde.com%2Fapi") .asString(); ``` </TabItem> <TabItem label="Node.js"> ```js async function getToken() { try { const response = await fetch(`https://<your_subdomain>.kinde.com/oauth2/token`, { method: "POST", headers: { "content-type": "application/x-www-form-urlencoded" }, body: new URLSearchParams({ audience: "https://<your_subdomain>.kinde.com/api", grant_type: "client_credentials", client_id: "<your_m2m_client_id>", client_secret: "<your_m2m_client_secret>" }) }); if (!response.ok) { throw new Error(`Response status: ${response.status}`); } const json = await response.json(); console.log(json); } catch (error) { console.error(error.message); } } getToken(); ``` </TabItem> <TabItem label="Obj-C"> ```objc #import <Foundation/Foundation.h> NSDictionary *headers = @{ @"content-type": @"application/x-www-form-urlencoded" }; NSMutableData *postData = [[NSMutableData alloc] initWithData:[@"grant_type=client_credentials" dataUsingEncoding:NSUTF8StringEncoding]]; [postData appendData:[@"&client_id=<your_m2m_client_id>" dataUsingEncoding:NSUTF8StringEncoding]]; [postData appendData:[@"&client_secret=<your_m2m_client_secret>" dataUsingEncoding:NSUTF8StringEncoding]]; [postData appendData:[@"&audience=https://<your_subdomain>.kinde.com/api" dataUsingEncoding:NSUTF8StringEncoding]]; NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://<your_subdomain>.kinde.com/oauth2/token"] cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:10.0]; [request setHTTPMethod:@"POST"]; [request setAllHTTPHeaderFields:headers]; [request setHTTPBody:postData]; NSURLSession *session = [NSURLSession sharedSession]; NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) { if (error) { NSLog(@"%@", error); } else { NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response; NSLog(@"%@", httpResponse); } }]; [dataTask resume]; ``` </TabItem> <TabItem label="PHP"> ```php $curl = curl_init(); curl_setopt_array($curl, [ CURLOPT_URL => "https://<your_subdomain>.kinde.com/oauth2/token", CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "", CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => "POST", CURLOPT_POSTFIELDS => "grant_type=client_credentials&client_id=<your_m2m_client_id>&client_secret=<your_m2m_client_secret>&audience=https%3A%2F%2F<your_subdomain>.kinde.com%2Fapi", CURLOPT_HTTPHEADER => [ "content-type: application/x-www-form-urlencoded ], ]); $response = curl_exec($curl); $err = curl_error($curl); curl_close($curl); if ($err) { echo "cURL Error #:" . $err; } else { echo $response; } ``` </TabItem> <TabItem label="Python"> ```python import http.client conn = http.client.HTTPSConnection("") payload = "grant_type=client_credentials&client_id=<your_m2m_client_id>&client_secret=<your_m2m_client_secret>&audience=https%3A%2F%2F<your_subdomain>.kinde.com%2Fapi headers = { 'content-type': "application/x-www-form-urlencoded" } conn.request("POST", "https://<your_subdomain>.kinde.com/oauth2/token", payload, headers) res = conn.getresponse() data = res.read() print(data.decode("utf-8")) ``` </TabItem> <TabItem label="Ruby"> ```ruby require 'uri' require 'net/http' require 'openssl' url = URI("https://<your_subdomain>.kinde.com/oauth2/token") http = Net::HTTP.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Post.new(url) request["content-type"] = 'application/x-www-form-urlencoded' request.body = "grant_type=client_credentials&client_id=<your_m2m_client_id>&client_secret=<your_m2m_client_secret>&audience=https%3A%2F%2F<your_subdomain>.kinde.com%2Fapi response = http.request(request) puts response.read_body ``` </TabItem> <TabItem label="Swift"> ```swift import Foundation let headers = ["content-type": "application/x-www-form-urlencoded"] let postData = NSMutableData(data: "grant_type=client_credentials".data(using: String.Encoding.utf8)!) postData.append("&client_id=<your_m2m_client_id>".data(using: String.Encoding.utf8)!) postData.append("&client_secret=<your_m2m_client_secret>".data(using: String.Encoding.utf8)!) postData.append("&audience=https://<your_subdomain>.kinde.com/api".data(using: String.Encoding.utf8)!) let request = NSMutableURLRequest(url: NSURL(string: "https://<your_subdomain>.kinde.com/oauth2/token")! as URL, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 10.0) request.httpMethod = "POST request.allHTTPHeaderFields = headers request.httpBody = postData as Data let session = URLSession.shared let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in if (error != nil) { print(error) } else { let httpResponse = response as? HTTPURLResponse print(httpResponse) } }) dataTask.resume() ``` </TabItem> </Tabs> Make sure to replace `<your_subdomain>`, `<your_m2m_client_id>` and `<your_m2m_client_secret>` with your own details. The response will contain a signed JWT containing claims including the scopes the token is allowed to access and the expiry time. Here is an example token: ```json { "aud": [ "https://example.kinde.com/api ], "azp": "bd69bb9fe5db44a38b6b2dacd1f4b451", "exp": 1729812040, "gty": [ "client_credentials ], "iat": 1729725640, "iss": "https://example.kinde.com", "jti": "6f091ebe-44ba-4afc-bd2f-05fcccafc89e", "scope": "read:users update:users" } ``` ## Use the access token To use this token, include it in the Authorization header of your request. For example to get all users you would call: <Tabs> <TabItem label="cURL"> ```shellscript curl --request GET \ --url 'https://<your_subdomain>.kinde.com/api/v1/users' \ --header 'authorization: Bearer <m2m_access_token>' \ --header 'content-type: application/json' ``` </TabItem> <TabItem label="C#"> ```c# var client = new RestClient("https://<your_subdomain>.kinde.com/api/v1/users"); var request = new RestRequest(Method.GET); request.AddHeader("content-type", "application/json"); request.AddHeader("authorization", "Bearer <m2m_access_token>"); IRestResponse response = client.Execute(request); ``` </TabItem> <TabItem label="Go"> ```go package main import ( "fmt "net/http "io/ioutil ) func main() { url := "https://<your_subdomain>.kinde.com/api/v1/users req, _ := http.NewRequest("GET", url, nil) req.Header.Add("content-type", "application/json") req.Header.Add("authorization", "Bearer <m2m_access_token>") res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) } ``` </TabItem> <TabItem label="Java"> ```java HttpResponse<String> response = Unirest.get("https://<your_subdomain>.kinde.com/api/v1/users") .header("content-type", "application/json") .header("authorization", "Bearer <m2m_access_token>") .asString(); ``` </TabItem> <TabItem label="Node.js"> ```js async function getUsers() { try { const response = await fetch(`https://<your_subdomain>.kinde.com/api/v1/users`, { method: "GET", headers: { "content-type": "application/json", authorization: "Bearer <m2m_access_token>" } }); if (!response.ok) { throw new Error(`Response status: ${response.status}`); } const json = await response.json(); console.log(json); } catch (error) { console.error(error.message); } } getUsers(); ``` </TabItem> <TabItem label="Obj-C"> ```objc #import <Foundation/Foundation.h> NSDictionary *headers = @{ @"content-type": @"application/json", @"authorization": @"Bearer <m2m_access_token>" }; NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://<your_subdomain>.kinde.com/api/v1/users"] cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:10.0]; [request setHTTPMethod:@"GET"]; [request setAllHTTPHeaderFields:headers]; NSURLSession *session = [NSURLSession sharedSession]; NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) { if (error) { NSLog(@"%@", error); } else { NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response; NSLog(@"%@", httpResponse); } }]; [dataTask resume]; ``` </TabItem> <TabItem label="PHP"> ```php $curl = curl_init(); curl_setopt_array($curl, [ CURLOPT_URL => "https://<your_subdomain>.kinde.com/api/v1/users", CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "", CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => "GET", CURLOPT_HTTPHEADER => [ "authorization: Bearer <m2m_access_token>", "content-type: application/json ], ]); $response = curl_exec($curl); $err = curl_error($curl); curl_close($curl); if ($err) { echo "cURL Error #:" . $err; } else { echo $response; } ``` </TabItem> <TabItem label="Python"> ```python import http.client conn = http.client.HTTPSConnection("") headers = { 'content-type': "application/json", 'authorization': "Bearer <m2m_access_token>" } conn.request("GET", "https://<your_subdomain>.kinde.com/api/v1/users", headers=headers) res = conn.getresponse() data = res.read() print(data.decode("utf-8")) ``` </TabItem> <TabItem label="Ruby"> ```ruby require 'uri' require 'net/http' require 'openssl' url = URI("https://<your_subdomain>.kinde.com/api/v1/users") http = Net::HTTP.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Get.new(url) request["content-type"] = 'application/json' request["authorization"] = 'Bearer <m2m_access_token>' response = http.request(request) puts response.read_body ``` </TabItem> <TabItem label="Swift"> ```swift import Foundation let headers = [ "content-type": "application/json", "authorization": "Bearer <m2m_access_token>" ] let request = NSMutableURLRequest(url: NSURL(string: "https://<your_subdomain>.kinde.com/api/v1/users")! as URL, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 10.0) request.httpMethod = "GET request.allHTTPHeaderFields = headers let session = URLSession.shared let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in if (error != nil) { print(error) } else { let httpResponse = response as? HTTPURLResponse print(httpResponse) } }) dataTask.resume() ``` </TabItem> </Tabs> Make sure to replace `<your_subdomain>` with your Kinde subdomain and `<m2m_access_token>` with the token received in the previous step. ## Use the Kinde Management API JS SDK As an alternative to making HTTP calls, you can also use the [Kinde Management API JS](https://github.com/kinde-oss/management-api-js/) SDK. You can use it to automatically obtain tokens for, and interact with the Kinde management API. ## Alternative - using Postman guide ### Set up Postman environment We recommend you do this in a non-production environment first. If you decide to use Postman, we recommend that you set up a Postman environment. Here's some [troubleshooting solutions](/developer-tools/kinde-api/troubleshoot-kinde-api/) in case you need them. 1. Add your Kinde machine to machine application keys as environment variables. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/69800dc4-2d22-468c-4300-71e4b4ee8b00/public" alt="Adding environment variables in Postman" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 2. Make sure you select `Save` or the variables will not persist. ### Get the access token 1. Go to **Collections**. Create a new collection called **Kinde**. 2. In the three dots menu next to the new **Kinde** folder, select **Add request**. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/ececdf0a-452f-49bc-6a96-f5343d8a8d00/public" alt="Adding a request in Postman" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 3. Go to the **Authorization** section and set the **Type** to **OAuth 2.0** and set the **Header Prefix** to **Bearer**. 4. In the **Configure New Token > Configuration options** section, set the **Grant Type** to **Client Credentials**. 5. Enter the **Access Token URL** using the domain variable you created above. For example, `{{business_domain}}/oauth2/token`. Note that even if you use a custom domain, the access token URL should still use your `https://<your_subdomain>.kinde.com` domain. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/8149baf6-e3b7-406d-7447-390fe4bc2100/public" alt="Entering the access token URL" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 6. Enter the **Client ID** and **Client Secret** using the environment variables you created earlier or by copying them from the Kinde application. 7. Set the **audience** to `{{business_domain}}/api`. To do this: - Scroll down click **Advanced**. In the **Token request** section, select the `audience` key and enter the above URL in the **Value** field. Ensure it is being sent in the `body` of the request <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/f2c9f0dc-ef24-40e4-dae9-2d1fd6731b00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 8. Go to the **Headers** tab. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/92102061-66fb-48f8-f94a-f048b80a3f00/public" alt="Setting the Content-Type value in Postman" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 9. Select **Accept** and ensure the value is `application/json`. 10. In the **Authorization** section, select **Get New Access Token**. You should see a confirmation message. 11. Select **Proceed**. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b736bc91-3f30-4d48-62c6-37f131e88300/public" alt="Access Token in Postman" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 12. Select **Use Token**. You should now have the access token for making requests to the Kinde management API. See the [Kinde API documentation](/kinde-apis/management/) for all the available end points. ### Test the API endpoints You can test your API access in Postman by sending a `GET` request to any Kinde API endpoint. See the [Kinde Management API library](/kinde-apis/management/) for options. Here’s an example using the `Get users` endpoint. 1. Create a new `GET` request. 2. Enter a URL that contains the `/users` endpoint, e.g. `https://<your_subdomain>.kinde.com/api/v1/users` . <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/44dd0ac2-b96e-4a91-79dd-4a9f9dda2000/public" alt="Entering a Request URL in Postman" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 3. Send the request. It should return your users in the body section. If it does, the connection is successful. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/8f4aae17-6f38-43e4-9bf7-55ac0bf2d300/public" alt="Response body in Postman" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 4. Repeat from step 1 for any other [Kinde API endpoints](/kinde-apis/management/) you want to test.

# Developer tools - Kinde api - Call the Kinde API - NodeJS example

nodejs, management api, access token, m2m application, api example, fetch
developer-tools, kinde-api

If you don’t use Postman or other similar tools to test your connections, here’s an example of how to call the [Kinde Management API](/kinde-apis/management/) in NodeJS. 1. [Add a machine to machine application](/developer-tools/kinde-api/connect-to-kinde-api/) for API access, and copy the **App keys - Domain, Client ID** and **Client secret** from the application. 2. Call the Kinde token endpoint using the app key details you copied at step 1. Here’s a code sample in NodeJS. This should return an access token. ```jsx const getAccessToken = async () => { try { const searchParams = { grant_type: "client_credentials", client_id: "<your_client_id>", client_secret: "<your_secret_id>", audience: "https://<your_subdomain>.kinde.com/api" }; const res = await fetch("https://<your_subdomain>.kinde.com/oauth2/token", { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded" }, body: new URLSearchParams(searchParams) }); const token = await res.json(); console.log({token}); } catch (err) { console.error(err); } }; ``` 3. Use the access token to call the Kinde management API. Here’s an example of calling the `users` endpoint in NodeJS: ```jsx const getUsers = async () => { const accessToken = await getAccessToken(); const headers = { Accept: "application/json", Authorization: `Bearer ${accessToken}` }; try { const res = await fetch("https://<your_subdomain>.kinde.com/api/v1/users", { method: "GET", headers: headers }); const data = await res.json(); console.log({data}); } catch (err) { console.error(err); } }; ``` 4. Dive into our [API docs](/kinde-apis/management/) and starting connecting your product to ours.

# Developer tools - Kinde api - API rate limits

> Documentation on Kinde API rate limits, including rate and concurrency limiters, common causes, and graceful handling strategies

rate limits, api limits, 429 error, rate limiting, concurrency limiter, exponential backoff, token bucket
developer-tools, kinde-api

Kinde may rate limit incoming traffic to help maximise API stability and prevent bursts of requests from destabilizing API functions. If you send a lot of requests in quick succession, you might see error responses with **code `429`**. For advice on handling these errors, see [Handle limiting gracefully](#handle-limiting-gracefully), below. If you suddenly see a rising number of rate-limited requests, contact Kinde support. ## API limiters Kinde has several limiters in the API, including a rate limiter and a concurrency limiter. ### Rate limiter The basic rate limiter restricts the number of API requests per minute as follows: - maximum page size of 500 per request to API GET endpoints that use the `page_size` parameter, additional results can be requested using the `page_size` and `next_token` parameters (e.g. GET `/api/v1/subscribers`) - maximum 100 objects can be updated in a single request when sending `POST/PATCH` requests to bulk endpoints (e.g. PATCH `/api/v1/organizations/{org_code}/users`) If this affects your integrations and you require an extended period with a higher limit please get in touch. ## Common causes Rate limiting can occur under a variety of conditions, but it’s most common in these scenarios: - Running a large volume of closely-spaced requests can lead to rate limiting. Often this is part of an analytical or migration operation. When engaging in these activities, you should try to control the request rate on the client-side. - Issuing many long-lived requests can trigger limiting. Requests vary in the amount of Kinde’s server resources they use, and more resource-intensive requests tend to take longer and run the risk of causing new requests to be shed by the concurrency limiter. - Resource requirements vary, but list requests and requests that include expansions generally use more resources and take longer to run. We suggest profiling the duration of Kinde API requests, and watch for timeouts to try and spot those that are unexpectedly slow. - A sudden increase in volume like the bulk addition of new users can result in rate limiting. We try to set our rates high enough that legitimate user traffic never exceeds the limits, but if you suspect that an upcoming event might push you over the limits listed above, contact us to increase limits for you. ## Handle limiting gracefully Graceful handling involves monitoring for `429` status codes and triggering a retry method. The header `RateLimit-Reset` will return the number of seconds until the rate limit is reset. Your method should follow an exponential back-off schedule to reduce request volume as needed. We also recommend building randomness into the back-off schedule to avoid a ‘thundering herd’ effect. Another method is to manage traffic at a global level, and throttle it back if you detect substantial rate limiting. A common technique for controlling rate is to implement something like a token bucket rate limiting algorithm on the client-side. Ready-made and mature implementations for token bucket can be found in most programming languages.

# Developer tools - Kinde api - Set up Kinde Management API access

> Step-by-step guide to setting up M2M applications and authorizing them for Kinde Management API access with proper scopes

management api, m2m application, api access, scopes, authorization, access token, machine to machine
developer-tools, kinde-api

In order to call the Kinde Management API, you will need a Kinde management API access token. These tokens are generated by using an authorized M2M application to call the Kinde token endpoint. This guide shows you how to set up a new machine to machine (M2M) application, and authorize it for Kinde Management API access. ## Step 1: Add a machine to machine application 1. Go to **Settings > Applications**. 2. Select **Add Application**. The **Add application** dialog opens. 3. Give the application a name, and select **Machine to Machine** as the **Application type**. 4. Select **Save**. App keys - including Domain details, Client ID and Client Secret - are issued for the application. 5. Select **View details** on the new application and copy the app keys. You need these details to test or initiate access requests from your application or service to Kinde's API. See Step 4 below. ## Step 2: Authorize the M2M application Only authorized M2M applications are allowed to access the Kinde management API. Without this step you will receive an error when calling the Kinde management API. 1. Select **View details** on the M2M application you just created. 2. On the left, select **APIs**. 3. Select the three dots next to the Kinde Management API, then choose **Authorize application**. ## Step 3: Select scopes Each Kinde endpoint requires specific permissions to be present in the token, to grant access to it. These are known as scopes. If a scope is not in the access token, the API will return an error indicating which scope is required. 1. Select the three dots next to the relevant Kinde management API, then choose **Manage scopes**. 2. Select the scopes you want to include in the token. For maximum security only enable the minimum scopes you require. 3. Select **Save**. ## Step 4: Get an access token and call the Kinde Management API - Fast method: Generate a [test access token](/developer-tools/kinde-api/kinde-api-test-token/) in Kinde. - Other methods: Follow [this guide](/developer-tools/kinde-api/access-token-for-api/) that includes several different options for getting an access token, including via Postman. ## How M2M tokens are calculated in Kinde An M2M token is generated each time you call the `/oauth2/token` Kinde API endpoint to retrieve an M2M access token. Where an access token is re-used - say where the same token is used to make another API request, this does not count as a new token. Similarly, where a token is re-used to make calls to other Kinde-registered APIs, this is also not counted as another token. Kinde’s free and Pro plans have a generous amount of M2M tokens included, before we start charging for them. For details, see our [pricing page](https://kinde.com/pricing/). ## Video demo: Get a test token for accessing the Kinde Management API Watch a video about how easy it is to test the Kinde Management API on our YouTube channel [here](https://www.youtube.com/watch?v=iqO7CL3QyY8).

# Developer tools - Kinde api - Get token to test the Kinde Management API

> Guide to generating test tokens for the Kinde Management API using the Kinde admin interface for quick testing

test token, management api, m2m application, api testing, token generation
developer-tools, kinde-api

Kinde lets you quickly generate a test token for testing the Kinde Management API with your M2M application. This can save you time generating a token via Postman or other service. This process assumes you have [set up access to the Kinde Management API](/developer-tools/kinde-api/connect-to-kinde-api/). 1. In Kinde, go to **Settings > APIs**. 2. Select **View details** on the Kinde Management API. 3. Select **Test** in the menu. 4. Select the authorized M2M application, then select **Get token**. Token details are generated. ![shows the generated token for copying and using](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/321a49c0-f629-4c7a-9ef2-349ad0f31f00/public) 5. Copy the code and use it to test. 6. Or, select **Use test token.** The Kinde Management API docs opens with the test token pre-populated. ![Shows Kinde Management API page showing test token in use](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/72840d32-1f90-4fc3-30e9-40074f163f00/public) - Search for the endpoint you want to test. - Select **Test request** in the code snippet. ![Shows API code snippet and test request button](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/833a2c93-61ad-4fa7-8999-4b9ac4a44f00/public) - The test will complete using the test token you generated.

# Developer tools - Kinde api - Search users via the Kinde API

> Guide to searching and filtering users via the Kinde Management API using query parameters and property filters

search users, api search, user filtering, properties filter, wildcard search, management api
developer-tools, kinde-api

You can search users and filter results via the Kinde Management API. You might need to do this to isolate users with specific properties defined, for example, to find users in a particular city. ## Make an API search request Search with `GET` request: `/api/v1/search/users?query=searchterm` Add additional filters to the request: `&filterA=X&filterB=Y` Search and filter: GET `/api/v1/search/users?query=searchterm&filterA=X&filterB=Y` The query= part is for searching by user name or email, additional filters can be applied separately. For example, use /api/v1/search/users?query=*&properties[kp_user_city]=Sydney to find all users from Sydney based on the kp_user_city property. Here's some examples of search requests with different filter types. - Filter for users with multiple properties using AND(&) statements. ```/api/v1/search/users?query=properties[kp_usr_last_name]=Swan&properties[kp_usr_industry]=Construction``` - Filter for users with any property filter using OR(comma) statements. ```/api/v1/search/users?query=properties[kp_usr_last_name]=Hornet,Swan``` - Use a combination of filters. ```/api/v1/search/users?query=properties[kp_usr_last_name]=Hornet,Swan&properties[kp_usr_industry]=Construction&expand=identities,properties``` - Wildcards can also be used. ```/api/v1/search/users?query=*&properties[kp_usr_middle_name]=Hornet,Swan&properties[kp_usr_industry]=Construction&expand=identities,properties``` ## Example response ```jsx { "results": [ { "id": "kp_8ef060c544584c51b255e83416818c12", "email": "big.turtle42350@site.com", "phone": null, "picture": null, "username": null, "full_name": null, "last_name": null, "created_on": "2025-02-05T11:23:22.634233+00:00", "first_name": null, "identities": [ { "type": "email", "identity": "big.turtle42350@site.com" } ], "properties": { "kp_usr_industry": "Construction", "kp_usr_middle_name": "Hornet" }, "provided_id": null, "is_suspended": false, "organizations": [ "org_d36a3f3f3c7 ], "last_signed_in": null, "total_sign_ins": 0, "failed_sign_ins": 0 } ] "code": "OK", "message": "Success" ```

# Developer tools - Kinde api - Troubleshooting Kinde API access

> Troubleshooting guide for common Kinde API issues including null responses and scope errors

troubleshooting, api errors, null response, scope errors, token customization, custom claims
developer-tools, kinde-api

There's a lot of configurations and events that support API connections. Sometimes things go wrong. Here's a few common errors people come across. ## When a request returns `null` When you request to receive data back via the API and get an unexpected or `null` response, you may need to add custom claims to the token. 1. In Kinde, go to **Settings > Applications** and open the relevant application. 2. Select **Tokens** in the menu. 3. Scroll to the **Token customization** section. 4. Select **Customize** on the Access or ID token type and switch on / select any claims or properties you want to include in the token. 5. Select **Save**. For more detailed information, see [Token customization](/build/tokens/token-customization/) ## Kinde Management API scope errors Access to Kinde's Management API is limited by scopes. When you create or update a M2M application, you need to review and select scopes. If you find that some information is not included in a returned token, check the scopes. 1. In Kinde, go to **Settings > Applications** and select **View details** on the relevant M2M application. 2. Select **APIs** in the menu. 3. In the **Kinde Management API** entry, select the three dots menu and select **Manage scopes**. 4. Select and deselect scopes as required. 5. Select **Save**.

# Developer tools - Sdks - Node/Apollo GraphQL

> Guide to securing Node.js Apollo GraphQL endpoints with Kinde authentication, including backend and React client integration.

apollo graphql, nodejs, authentication, bearer token, authorization, react, context
developer-tools, sdks, apollo, graphql, backend

These instructions assume you already have a Kinde account. You can [register for free here](https://app.kinde.com/register) (no credit card required). This guide details how to protect your GraphQL endpoints, when running on Node.js. It assumes you already have a front end connected to Kinde which is sending a Kinde issued bearer token to your API for verification. If you don’t yet have a front end setup, please set this up first following the relevant guide: [React](/developer-tools/sdks/frontend/react-sdk/) [Next.js](/developer-tools/sdks/backend/nextjs-sdk/) [VanillaJS](/developer-tools/sdks/frontend/javascript-sdk/) ## **Apollo Server** You can use our Node.js SDK to secure your endpoints and check that the user is authorized to access them. ## **Configure Apollo** ### **Add Kinde Node as a dependency** <PackageManagers pkg="@kinde-oss/kinde-node" /> ### **Environments** If you would like to use our Environments feature as part of your development process. You will need to create them first within your Kinde account, see the guide here. In this case you would use the Environment subdomain in the code block above. ### **Integrate with your app** Import the library as you would any other Node package - we recommend you do this in you `app.js` or `index.js` file depending on your structure. ```jsx const kindeNode = require("kinde-node"); ``` ### **Initialize** In the same file after any other imports initialize the library by entering your Kinde domain. This grabs the verification keys for your app. ```jsx let authorize; (async () => { authorize = await kindeNode(YOUR_KINDE_DOMAIN); })(); ``` ### **Protect!** The Apollo docs provide a few ways [for securing your APIs](https://www.apollographql.com/docs/apollo-server/security/authentication/). We will use the approach of adding the user object to the context. ```jsx const server = new ApolloServer({ typeDefs, resolvers, context: ({req}) => { // auth check on every request const user = new Promise((resolve, reject) => { authorize(req, (err, user) => { if (err) { return reject(err); } resolve(user); }); }); return { user }; } }); ``` It’s pretty common that a Graph will have a mix of public and private fields. Because we’ve added the user to context we can access this in the individual field resolvers and decide what to return. As an example, this resolver is only accessible with a valid user: ```jsx users: (parent, args, context) => { // In this case, we'll pretend there is no data when // we're not logged in. Another option would be to // throw an error if (!context.user) return null; return ["bob", "jake"]; }; ``` If a user is not authorized you can make use of the built in Apollo helper `AuthenticationError` to return a suitable response. ### **Apollo client - with React** Once you have [integrated Kinde with your React application](/developer-tools/sdks/frontend/react-sdk/) using the Kinde React SDK you can enhance it to support the Apollo client. ### **Integrate with your app** We recommend creating a specific component in your app to handle the Apollo / Kinde integration: ```jsx import React from "react"; import {ApolloClient, InMemoryCache, ApolloProvider, createHttpLink} from "@apollo/client"; import {setContext} from "@apollo/client/link/context"; import {useKindeAuth} from "@kinde-oss/kinde-auth-react"; const KindeApolloProvider = ({children}) => { const {getToken} = useKindeAuth(); const httpLink = createHttpLink({ uri: [YOUR_GRAPHQL_URI_HERE] }); const authLink = setContext((_, {headers}) => { // get the authentication token from local storage if it exists const token = localStorage.getItem("kinde_token"); const parsedToken = token ? JSON.parse(token) : {}; // return the headers to the context so httpLink can read them return { headers: { ...headers, authorization: token ? `Bearer ${parsedToken.access_token}` : "" } }; }); const client = new ApolloClient({ link: authLink.concat(httpLink), cache: new InMemoryCache() }); return <ApolloProvider client={client}>{children}</ApolloProvider>; }; export default KindeApolloProvider; ``` Then you can use it in your app as follows. ```jsx import {KindeProvider} from "@kinde-oss/kinde-auth-react"; const App = () => ( <KindeProvider domain="[YOUR_KINDE_DOMAIN]" redirectUri={window.location.origin}> <KindeApolloProvider> <Routes /> </KindeApolloProvider> </KindeProvider> ); ``` This will ensure every API call to your Apollo server contains the Bearer token provided by Kinde. If you need any assistance with getting Kinde connected reach out to us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - .NET SDK

> Guide to using the Kinde .NET SDK for integrating with the Management API, including installation, configuration, and API calls for user and organization management.

dotnet sdk, csharp, nuget, management api, asp.net, openid connect, machine to machine, kinde client
developer-tools, sdks, backend

{/* @case-police-ignore Api */} {/* @case-police-ignore Mvc */} {/* @case-police-ignore Html */} Kinde auth can be integrated into your application without the need for an SDK. Follow the appropriate guide to secure your API or use OpenID Connect to secure your web application: - [Integrate with ASP.NET based APIs](/developer-tools/your-apis/dotnet-based-apis/) - [Integrate with ASP.NET using Open ID Connect](/developer-tools/guides/dotnet-open-id-connect/) The Kinde .NET SDK allows developers to quickly and securely call the Kinde Management API. The Kinde SDK is available from the Nuget package repository at [https://www.nuget.org/packages/Kinde.SDK](https://www.nuget.org/packages/Kinde.SDK) ## Before you begin - Kinde .NET SDK supports .NET 6.0+ - If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. - Create a [machine to machine application for Kinde Management API access](/developer-tools/kinde-api/connect-to-kinde-api/). ## Add packages to your application Use `Dotnet CLI` or `NuGet CLI` to add packages in your project. Dotnet CLI: ```bash dotnet add package Kinde.SDK ``` NuGet: ```bash NuGet\Install-Package Kinde.SDK ``` This command is intended to be used within the Package Manager Console in Visual Studio, as it uses the NuGet module's version of Install-Package. ## Configure API client Create and authorize a new client: ```csharp var client = new KindeClient(new ApplicationConfiguration("<your-kinde-domain>", "", ""), new KindeHttpClient()); await client.Authorize(new ClientCredentialsConfiguration("<your-client-id>", "", "<your-client-secret>", "https://<your-kinde-domain>/api")); ``` Replacing `<your-kinde-domain>` with your Kinde domain, `<your-client-id>` and `<your-client-secret>` with your machine to machine app keys. ## Call management API The client can be used to call the management API. For example, listing users: ```csharp var usersApi = new UsersApi(client); var users = await usersApi.GetUsersAsync(); foreach (var user in users.Users) { Console.WriteLine($"Id: {user.Id}, Email: {user.Email}, Name: {user.FirstName} {user.LastName}."); } ``` Note this requires the `read:users` scope to be added to the API in the machine to machine application in Kinde. An example of creating an organization then renaming it: ```csharp var orgApi = new OrganizationsApi(client); var newOrg = await orgApi.CreateOrganizationAsync(new CreateOrganizationRequest("My new organization")); var response = await orgApi.UpdateOrganizationAsync(newOrg.Organization.Code, new UpdateOrganizationRequest() { Name = "A different name }); ``` Note this requires the `create:organizations` and `update:organizations` scopes to be added to the API in the machine to machine application in Kinde. For full details of the available management API functions, see the [Kinde Management API specification](/kinde-apis/management/). If you need help getting Kinde connected, contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Elixir SDK

> Complete guide for Elixir SDK including OAuth flows, Phoenix integration, token management, and user authentication for Elixir applications.

Elixir SDK, OAuth flows, client credentials, authorization code, PKCE, Phoenix, environment variables
developer-tools, sdks, elixir, backend

The Kinde Elixir SDK allows developers to connect their Elixir app to Kinde. This document is relevant for up to Elixir v1.2.0. You can also view the [Elixir docs](https://github.com/kinde-oss/kinde-elixir-sdk) and [Elixir starter kit](https://github.com/kinde-starter-kits/elixir-starter-kit) in GitHub. ## Register for Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. ## Install Install erlang and elixir. Update the deps, update path to the SDK in `mix.exs`. ```elixir {:kinde_sdk, "~> 1.2.0"} ``` Add to your extra applications in `mix.exs`. ```elixir def application do [ extra_applications: [:logger, :kinde_sdk] ] end ``` ## Set callback URLs 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example, `http://localhost:4000/callback` - Allowed logout redirect URLs - for example, `http://localhost:4000` 3. Select **Save**. **Note:** The `http://localhost:4000` is an example of a commonly used local development URL. It should be replaced with the URL where your app is running. ## Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Note that each environment needs to be set up independently, so you need to use the Environment subdomain in the code block above for those new environments. ## Configure your app **API Keys** Follow these steps to set up the project: 1. Create a .env file at the root directory. 2. Add the following, but change the `“values”` to match your own information. ```elixir export KINDE_BACKEND_CLIENT_ID="test_x1y2z3a1 export KINDE_FRONTEND_CLIENT_ID="test_a1b2c3d4 export KINDE_CLIENT_SECRET="test_112233 export KINDE_REDIRECT_URL="http://text.com/callback export KINDE_DOMAIN="https://test.kinde.com export KINDE_LOGOUT_REDIRECT_URL="http://text.com/logout export KINDE_PKCE_LOGOUT_URL="http://test.com/logout export KINDE_PKCE_REDIRECT_URL="http://test.com/pkce-callback export KINDE_BASE_URL="https://app.kinde.com ``` 1. If required, set the scopes. You can include scopes such as `openid` `profile` `offline`, in addition to `email`. ```elixir config :kinde_sdk, scope: "email" ``` 1. Open the console and write `source .env` before any mix command. **Environment variables** You can also set these variables in .env file within your project directory. The following variables need to be replaced in the code snippets. - `KINDE_HOST` - your Kinde domain - e.g. `https://yourkindedomain.kinde.com` - `KINDE_REDIRECT_URL` - your callback url, make sure this URL is under your allowed callback redirect URLs. - e.g. `http://localhost:4000/callback` - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out, make sure this URL is under your allowed logout redirect URLs. - e.g. `http://localhost:4000` - `KINDE_CLIENT_ID` - you can find this on the **Application details** page - `KINDE_CLIENT_SECRET` - you can find this on the **Application details** page ## Usage Execute following in your terminal to run: ```elixir mix deps.get mix phx.server ``` ## **OAuth Flows (Grant Types)** The KindeClientSDK struct implements three OAuth flows: - Client Credentials flow - Authorization Code flow - Authorization Code with PKCE flow Each flow can be used with their corresponding grant type when initializing a client. | **OAuth Flow** | **Grant Type** | **Type** | | ---------------------------- | ----------------------------- | -------- | | Client Credentials | :client_credentials | atom | | Authorization Code | :authorization_code | atom | | Authorization Code with PKCE | :authorization_code_flow_pkce | atom | ## Integrate with your app Create a new instance of the Kinde Auth client object before you initialize your app: ```elixir {conn, client} = KindeClientSDK.init( conn, Application.get_env(:kinde_sdk, :domain), Application.get_env(:kinde_sdk, :redirect_url), Application.get_env(:kinde_sdk, :backend_client_id), Application.get_env(:kinde_sdk, :client_secret), :client_credentials, Application.get_env(:kinde_sdk, :logout_redirect_url) ) ``` ## Log in and registration The Kinde client provides methods for easy log in and registration. You can add buttons in your HTML as follows: ```html <div class="navigation"> <a href="/login" type="button">Login</a> <a href="/register" type="button">Register</a> </div> ``` You will also need to route `/login` and `/register` to the SDK methods: ```elixir conn = KindeClientSDK.login(conn, client) conn = KindeClientSDK.register(conn, client) ``` ## **Test sign up** Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page of the relevant organization (or default organization) in Kinde. ## Manage redirects When the user is redirected back to your site from Kinde, this will call your callback URL defined in the `KINDE_REDIRECT_URL` variable. You will need to route `/callback` to call a function to handle this. ```elixir def callback(conn, _params) do {conn, client} = KindeClientSDK.get_token(conn) data = KindeClientSDK.get_all_data(conn) end ``` ## **Tokens** We use the Kinde helper function to get the tokens generated by `login` and `get_token`. ```elixir data = KindeClientSDK.get_all_data(conn) IO.inspect(data.login_time_stamp, label: "Login Time Stamp") ``` Or first calling the `get_token` function: ```elixir {conn, client} = KindeClientSDK.get_token(conn) ``` Example of a returned token: ```elixir %{ "access_token" => "eyJhbGciOiJSUzI1...", "expires_in" => 89274, "scope" => "openid profile email offline", "token_type" => "bearer } ``` ## **User details** This function returns the user object including Kinde ID. This function reads the information from the `id_token` that is returned after successful authentication. Include the required scopes if not added already (`openid profile email offline`). ```elixir KindeClientSDK.get_user_detail(conn) ``` **Note:** You need to have already authenticated before you call the API, otherwise an error will occur. ## **View users in Kinde** Go to the **Users** page in Kinde to see who has registered. ## O**rganizations** **Create an organization** There is an additional `create_org` method which allows an organization to be created. This method calls the current sign-up logic by setting the `is_create_org` parameter to true. Use this helper function to create an organization. ```elixir conn = KindeClientSDK.create_org(conn, client) conn = KindeClientSDK.create_org(conn, client) ``` **Sign up and sign in to organizations** Kinde has a unique code for every organization. You’ll have to pass this code when creating a client or registering a new user: `additional_parameters_org_code`. If you want a user to sign in to a particular organization, pass this code along with the sign in method. For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## **Logout** The Kinde SDK client comes with a logout method. ```elixir conn = KindeClientSDK.logout(conn) ``` ## **Authenticated** Returns whether if a user is signed in by verifying that the access token is still valid. ```elixir KindeClientSDK.authenticated?(conn) ``` ## **Claims** We have provided a helper to grab any claim from your ID or access tokens, which accepts a key for a token and returns the claim value. There is also an optional argument to define which token to check. The helper defaults to access tokens. ```elixir KindeClientSDK.get_claims(conn) KindeClientSDK.get_claim(conn, "jti", :id_token) ``` This function will returns claims as follows. ```elixir %{ "aud" => [], "azp" => "", "exp" => 1649314, "gty" => ["client_credentials"], "iat" => 1662914, "iss" => "https://smith.com", "jti" => "7fa15b8-086-495-bba-b191b2aa2f", "scp" => ["openid", "profile", "email", "offline"] } ``` For example, when a key is accepted for a token as `KindeClientSDK.get_claim(conn, "jti", :id_token)` the return claim value would be as follows. ```elixir "57012a4-82ca-41f-8f19-0a5c3cc653 ``` ## **Permissions** When a user signs in to an organization the access token your product/application contains a custom claim with an array of permissions for that user. You can set permissions in your Kinde account. Here’s an example. ```json "permissions":[ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ] ``` For more details See [Define user permissions](/manage-users/roles-and-permissions/user-permissions/). We provide helper functions to more easily access permissions. ```elixir KindeClientSDK.get_permissions(conn) KindeClientSDK.get_permission(conn, "create:todos") ``` `get_permission` checks the permission value and returns if it is granted or not (i.e. checks if permission key exists in the `permissions` claim array) and checks the relevant org code by checking against claim `org_code`. ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. ```elixir additional_params = %{ audience: "api.yourapp.com" } KindeClientSDK.init( conn, Application.get_env(:kinde_sdk, :domain), Application.get_env(:kinde_sdk, :redirect_url), Application.get_env(:kinde_sdk, :backend_client_id), Application.get_env(:kinde_sdk, :client_secret), :authorization_code_flow_pkce, Application.get_env(:kinde_sdk, :logout_redirect_url), "openid profile email offline", additional_params ) ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## **Overriding scope** By default the KindeSDK requests the following scopes: - profile - email - offline - openid You can override this by passing scope into the KindeSDK. ## **Persisting authentication state on page refresh or new tab** When a user refreshes the page or opens a new tab, the authentication state can be lost. To work around this issue, there are two possible solutions: - Use cookies to store the authentication token. This can be done by setting an `httpOnly` cookie with the authentication token, which will be sent to the server with every request, allowing the server to maintain the authentication state. - Use a session store to store the authentication token. Elixir has several session store options available, including using a database, in-memory cache, or distributed cache. Once one of these solutions is implemented, there is no need for additional action to persist the authentication state. ## **Token storage** Once the user has successfully authenticated, you’ll have a JWT and possibly a refresh token that should be stored securely. ## API reference - C**reate Kinde Client** ### `domain` Either your Kinde URL or your custom domain. e.g `https://yourapp.kinde.com` Type: `string` Required: Yes ### `redirect_url` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `backend_client_id` The unique ID of your backend application in Kinde. Type: `string` Required: Yes ### `frontend_client_id` The unique ID of your frontend application in Kinde. Type: `string` Required: Yes ### `client_secret` The unique client secret associated with your application in Kinde. Type: `string` Required: No ### `logout_redirect_url` Where your user will be redirected upon logout. Type: `string` Required: No, except for PKCE flow ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No Default: `openid profile email offline` ### `additional_parameters` Additional parameters that will be passed in the authorization request. Type: `map` Required: No Default: `%{}` ### `additional_parameters_audience` The audience claim for the JWT. Type: `string` Required: No ### `additional_parameters_org_name` The org claim for the JWT. Type: `string` Required: No ### `additional_parameters_org_code` The org claim for the JWT. Type: `string` Required: No ## API reference - Kinde Client **Functions** ### `login` Constructs a redirect URL and sends the user to Kinde to sign in. Arguments: `conn, client` Usage: ```elixir KindeClientSDK.login(conn, client) ``` Sample output: `redirect` ### `register` Constructs a redirect URL and sends the user to Kinde to sign up. Arguments: `conn, client` Usage: ```elixir KindeClientSDK.register(conn, client) ``` Sample: `redirect` ### `logout` Logs the user out of Kinde. Arguments: `conn` Usage: ```elixir KindeClientSDK.logout(conn) ``` Sample: `redirect` ### `get_token` Returns the raw access token from URL after logged in from Kinde. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_token(conn) ``` Sample: ```elixir eyJhbGciOiJIUzI1... ``` ### `create_org` Constructs the redirect URL to sign up and create a new organization in your business. Arguments: `conn`, `atom` Usage: ```elixir KindeClientSDK.create_org(conn, client) ``` Sample: `redirect` ### `get_claim` Gets a claim from an access or ID token. Arguments: `conn, string, atom` Usage: ```elixir KindeClientSDK.get_claim(conn, "jti") or KindeClientSDK.get_claim(conn, "jti", :id_token) ``` Sample: ```elixir %{name: "iss", value: "https://elixirsdk2.kinde.com"} ``` ### `get_claims` Gets all claims from an access or ID token. Arguments: `conn, atom` Usage: ```elixir KindeClientSDK.get_claims(conn) or KindeClientSDK.get_claims(conn, :id_token) ``` Sample: ```elixir %{"aud" => [], "azp" => "", ...} ``` ### `get_permission` Returns the state of a given permission. Arguments: `conn, string` Usage: ```elixir KindeClientSDK.get_permission(conn, "create:users") ``` Sample: ```elixir %{org_code: 'org_1234', is_granted: true} ``` ### `get_permissions` Returns all permissions for the current user for the organization they are signed into. Arguments: `conn, atom` Usage: ```elixir KindeClientSDK.get_permissions(conn, :id_token) ``` Sample: ```elixir %{org_code: 'org_1234', permissions: ['create:todos', 'update:todos', 'read:todos']} ``` ### `get_organization` Get details for the organization your user is signed into. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_user_organization(conn) ``` Sample: ```elixir %{org_code: "org_9d78"} ``` ### `get_organizations` Gets an array of all organizations the user has access to. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_user_organizations(conn) ``` Sample: ```elixir %{org_codes: ["org_9d78", "org_aca6c", "org_27e56"]} ``` ### `get_user_details` Returns the profile for the current user. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_user_detail(conn) ``` Sample: ```elixir %{ email: "dev@smit.com", family_name: "Smith", given_name: "Dave", id: "kp:abcdef" } ``` ### `get_cache_pid` Returns the Kinde cache PID from the `conn`. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_cache_pid(conn) ``` Sample: ```elixir #PID ``` ### `save_kinde_client` Saves the Kinde client created into the `conn`. Arguments: `conn` Usage: ```elixir KindeClientSDK.save_kinde_client(conn) ``` Sample: ```elixir :ok ``` ### `get_kinde_client` Returns the Kinde client created from the `conn`. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_kinde_client(conn) ``` Sample: ```elixir %KindeClientSDK{ cache_pid: #PID<0.123.0>, domain: "abcd.com", redirect_uri: "…/callback", logout_redirect_uri: … } ``` ### `get_all_data` Returns all the Kinde data (tokens) returned. Arguments: `conn` Usage: ```elixir KindeClientSDK.get_all_data(conn) ``` Sample: ```elixir %{ access_token: "eyJhbGciOiJSU…”," expires_in: 1234, id_token: “abcdedhjshfsjg”,… } ``` ## **Feature flag helper functions** ### `get_flag/2` Details of a feature-flag. Arguments: `conn, code` Usage: ```elixir KindeClientSDK.get_flag(conn, code) ``` Sample output: ```elixir flag: %{ "code" => "theme", "is_default" => false, "type" => "string", "value" => "grayscale } ``` ### `get_flag/3` The default value of a feature flag. Arguments: `conn, code`, `default value` Usage: ```elixir KindeClientSDK.get_flag(conn, code, default_value) ``` Sample output: ```elixir flag: %{ "code" => "create_competition", "is_default" => true, "value" => false } ``` ### `get_flag/4` The type and default value of a feature flag. Arguments: `conn, code, default value, flag_type` Usage: ```elixir KindeClientSDK.get_flag(conn, code, default_value, flag_type) ``` Sample output: ```elixir flag: %{ "code" => "theme", "is_default" => true, "value" => "black } ``` ### `get_boolean_flag/2` Returns the boolean flag. Arguments: `conn, code` Usage: ```elixir KindeClientSDK.get_boolean_flag(conn, code) ``` Sample output: ```elixir **true** | **false** | flag: "Error e.g flag does not exist and no default provided”" ``` ### `get_boolean_flag/3` Returns the boolean flag value. Arguments: `conn, code, default value` Usage: ```elixir KindeClientSDK.get_boolean_flag(conn, code, default_value) ``` Sample output: ```elixir flag: false ``` ### `get_string_flag/2` Returns the string flag value. Arguments: `conn, code` Usage: ```elixir KindeClientSDK.get_string_flag(conn, code) ``` Sample output: corresponding values from object or error-messages ### `get_string_flag/3` Returns the string flag value. Arguments: `conn, code, default value` Usage: ```elixir KindeClientSDK.get_string_flag(conn, code, default_value) ``` Sample output: ```elixir flag: "black”" ``` ### `get_integer_flag/2` Returns the integer flag value. Arguments: `conn, code` Usage: ```elixir KindeClientSDK.get_integer_flag(conn, code) ``` Sample output: corresponding values from object or error-messages ### `get_integer_flag/3` Returns the integer flag value. Arguments: `conn, code, default value` Usage: ```elixir KindeClientSDK.get_integer_flag(conn, code, default_value) ``` Sample output: ```elixir flag: 46 ``` If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Express.js SDK

express.js, nodejs, authentication, jwt verification, route protection, middleware, session management
developer-tools, sdks, express, backend

If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. This topic assumes you are building with ExpressJS and have the relevant `express` packages already installed. You can view Kinde’s [Express JS docs](https://github.com/kinde-oss/kinde-node-express) and [Express JS starter kit](https://github.com/kinde-starter-kits/expressjs-starter-kit) in GitHub. ## Set up your app ### Add Kinde ExpressJS SDK as a dependency Node version 18.x.x or newer. <PackageManagers pkg="@kinde-oss/kinde-node-express" /> ### Integrate with your app You’ll need to import our Kinde helpers into your project. We recommend you do this in the entry point of your application, typically `index.js` or `app.js` ```jsx const express = require("express"); const {setupKinde, protectRoute, getUser, GrantType} = require("@kinde-oss/kinde-node-express"); const app = express(); const config = { clientId: "<YOUR_CLIENT_ID>", issuerBaseUrl: "https://<YOUR_SUBDOMAIN>.kinde.com", siteUrl: "http://localhost:3000", secret: "<YOUR_CLIENT_SECRET>", redirectUrl: "http://localhost:3000", scope: "openid profile email", grantType: GrantType.AUTHORIZATION_CODE, //or CLIENT_CREDENTIALS or PKCE unAuthorisedUrl: "http://localhost:3000/unauthorised", postLogoutRedirectUrl: "http://localhost:3000" }; setupKinde(config, app); ``` 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Replace the placeholders in the code block above with the the values from the **App Keys** section. 3. Replace `http://localhost:3000` with the url of wherever your app is running. ### Environments As part of your development process, we highly recommend you create a development environment within your Kinde account. In this case, you'd use the Environment subdomain and app key values in the code block above. ## Set your callback and logout URLs Kinde will redirect your user to authenticate. They'll be redirected back to your Express app after signing in or signing up. To authenticate your app, you need to specify which URL Kinde should redirect your user. 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Set the **Allowed callback URLs** (redirect URIs) to the URL of your app. This is where your application is served. For local development this could be `http://localhost:3000`. This is required for your users to sign in to your app successfully. This should match the `redirectUrl` you set in the config in the previous step. 3. Set the URLs they'll be redirected to after signing out, by adding **Allowed logout redirect URLs** to your JavaScript applications logout page. For local development this could be `http://localhost:3000`. This should match the `siteUrl` you set in the config in the previous step. 4. Select **Save**. **Note**: `http://localhost:3000` is an example of a commonly used local development URL. It should be replaced with the URL where your app is running. ## Sign in / register Kinde provides sign in / register methods that are easy to implement. Here’s an example of adding buttons to your HTML: ```html <div id="logged_out_view"> <a href="/login">Sign in</a> <a href="/register">Register</a> </div> ``` Clicking either of these buttons redirects your user to Kinde, where they authenticate before being redirected back to your site. ## Handle redirect Once your user is redirected back to your site from Kinde, you can set a callback to take place. The callback automatically passes in the user object and any application state you set prior to the redirect. ```jsx app.get("/", (req, res) => { if (req.session && req.session.access_token) { res.send("You are authenticated!"); } else { res.send("You are not"); } }); ``` ## Protecting routes The `protectRoute` middleware included in the SDK allows you to tell Express which routes are for authorized users only. ```jsx app.get("/admin", protectRoute, (req, res) => { res.send("Welcome to the admin area"); }); ``` You can pass an `unAuthorisedUrl` into the `setupKinde` configuration object which will to tell Kinde where you would like the user to be redirected in the case of `protectRoute` identifying the user is not yet authenticated. ## Access the user object The `getUser` middleware included in the SDK allows you to add the user object to the request. ```jsx app.get("/admin", protectRoute, getUser, (req, res) => { console.log(req.user); res.send(`Hello, ${req.user.given_name}`); }); ``` ## Sign out This is implemented in much the same way as signing in or registering. The Kinde SDK already comes with a `/logout` method. ```html <a href="/logout">Sign out</a> ``` ## Test sign up Register your first user by signing up yourself. You'll see your newly registered user on the **Users** page of the relevant organization in Kinde. ## Verify JWT This SDK also contains a library for verifying JWTs signed by Kinde. used as a layer of protect API endpoints. Initialize the library as follows: ```jsx const {jwtVerify} = require("@kinde-oss/kinde-node-express"); const verifier = jwtVerify("https://<your_kinde_subdomain>.kinde.com"); ``` Replace `<your_kinde_subdomain>` above with the subdomain you registered on Kinde. The step above caches your JWKS for Kinde in your Express application. ### Protect endpoints If you add the verifier middleware to an endpoint it will validate the token. If valid the users Kinde id is added to the request, otherwise a 403 error is thrown. ```jsx app.get("/some-route", verifier, (req, res) => { console.log(req.user); // {id: kp:the-users-kinde-id} }); ``` ## Kinde Management API To use the Kinde management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) ## SDK API Reference - setupKinde ### `clientId` The unique ID of your application in Kinde. Type: `string` Required: Yes ### `issuerBaseUrl` Either your Kinde URL or your custom domain. e.g `https://yourapp.kinde.com` Type: `string` Required: Yes ### `redirectUrl` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `secret` The unique **Client secret** of your application in Kinde Type: `string` Required: Yes ### `siteUrl` Where your user will be redirected when they sign out. Type: `string` Required: Yes ### `unAuthorisedUrl` The URL the user will be redirected to if `protectRoute` finds the user is not authenticated. Type: `string` Required: No Reach out to [support@kinde.com](mailto:support@kinde.com) if you need help getting Kinde connected.

# Developer tools - Sdks - Java SDK v1

> Legacy guide for Java SDK v1 including Maven/Gradle installation, OAuth flows, authentication setup, and user management for Java applications.

java sdk v1, maven, gradle, oauth flows, authentication, callback urls, user details
developer-tools, sdks, java, backend

The Kinde Java SDK allows developers to connect their Java app to Kinde. You can also find our [Java docs](https://github.com/kinde-oss/kinde-java-sdk) and [Java starter kit](https://github.com/kinde-starter-kits/kinde-java-starter-kit) in GitHub. ## Supported versions The SDK is officially only supported for version 8 or later of Java. ## Register with Kinde If you haven’t already created a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registration gives you a Kinde domain, which you will need to get started. e.g. `yourapp.kinde.com`. ## Install Create a JAR file of your SDK project using the below command: ```bash mvn clean install ``` To deploy it to a remote Maven repository instead, configure the settings of the repository and execute: ```bash mvn clean deploy ``` Refer to the [OSSRH Guide](http://central.sonatype.org/pages/ossrh-guide.html) for more information. ### Maven users Kinde’s SDK is available through [Maven](https://search.maven.org/). To install it, simply add the following line to your `pom.xml` ```java <dependency> <groupId>com.kinde</groupId> <artifactId>java-sdk</artifactId> <version>1.0.0</version> </dependency> ``` ### Gradle users Add this dependency to your project’s build file: ```bash repositories { mavenCentral() // Needed if the ‘kinde’ jar has been published to maven central. mavenLocal() // Needed if the ‘kinda’ jar has been published to the local maven repo. } dependencies { implementation "com.kinde:java-sdk:1.0.0” } ``` ### Others Generate the JAR by executing the following code: ```bash mvn clean package ``` Then manually install the following JARs: - target/java-sdk-1.0.0.jar - target/lib/\*.jar ## Integrate with your app Create KindeClientSDK object to use the SDK methods. ```java @PostConstruct public void updateKindeClientSDK(){ this.kindeClientSDK=new KindeClientSDK( domain, redirectUri, clientId, clientSecret, grantType, logoutRedirectUri ); } ``` Add `@ComponentScan` annotation in your main application. It should include the packages where your controllers from both the main application and the dependency project are located. ```java @ComponentScan(basePackages = {"com.example.demo.controller", "org.openapitools.api", "org.openapitools.model", "org.openapitools.configuration"}) ``` ## Set callback URLs For your app to work with Kinde, you need to set callback and logout redirect URLs. 1. In Kinde, go to **Settings > Applications.** 2. Select **View details** on your app. 3. Scroll down to the **Callback URLs** section. 4. Add in the callback URLs for your app, which might look something like this: - Allowed callback URLs (also known as Redirect URIs)- `http://localhost:8080/api/auth/kinde_callback` - Allowed logout redirect URLs - `http://localhost:8080` 5. Select **Save**. **Tip**: Make sure there are no hidden spaces in URLs and remove the ‘/’ backslash at the end. ## Environments If you would like to use different Environments as part of your development process, you will need to [add them within your Kinde business](/build/environments/environments/) first. You will also need to add the Environment subdomain to the code block above. ## Configure your app Add following properties in the `application.properties` file: The following variables need to be replaced in the code snippets below. - kinde.host - your Kinde domain. E.g. `https://your_kinde_domain.kinde.com` - kinde.redirect.url - your callback URL, make sure this URL is under your allowed callback redirect URLs. E.g. `http://localhost:8080/api/auth/kinde_callback` - kinde_post.logout.redirect.url - where you want users to be redirected to after signing out, make sure this URL is under your allowed logout redirect URLs. E.g. `http://localhost:8080` - kinde.client.id - you can find this on the **Application details** page - kinde.client.secret - you can find this on the **Application details** page - kinde.grant.type - The `KindeClientSDK` struct implements three OAuth flows: `client_credentials`, `authorization_code`, `authorization_code_flow_pkce` ## Sign in and **sign up** Kinde supports an easy to implement login / register flow. ### Client-side redirection To redirect users to the `/login` and `/register` pages on the client side when a link is clicked, you can use HTML anchor tags. Here's an example: ```html <a href="/login">Sign in</a> <a href="/register">Sign up</a> ``` ### Server-side authentication handling After the user is redirected to the `/login` or `/register` page, your server will need to handle the authentication process. The SDK provides `login` and `register` methods that you can use to handle these requests on the server side. Use these methods in your server-side code: ```java Object resp=kindeClientSDK.login(response); Object resp=kindeClientSDK.register(response); ``` ## R**edirect after authentication** When the user is redirected back to your site from Kinde, this will call your callback URL defined in the `kinde.redirect.url` variable. You will need to route `/api/auth/kinde_callback` to call a function to handle this. ```java @GetMapping("/api/auth/kinde_callback") public RedirectView callback(@RequestParam("code") String code, @RequestParam("state") String state, HttpServletResponse response, HttpServletRequest request) throws Exception { RedirectView redirectView=new CallbackController(this.kindeClientSDK).callback(code,state,response,request); return redirectView; } ``` ## Signing out The Kinde SPA client comes with a logout method. ```java RedirectView redirectView=this.kindeClientSDK.logout(response); ``` ## Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ## Get user information ### User profile To access the user information, use the `getUserDetails` helper function: ```java Object userDetails = this.kindeClientSDK.getUserDetails(request); // returns [ 'given_name' => 'Dave', 'id' => 'abcdef', 'family_name' => 'Smith', 'email' => 'dave@smith.com', 'picture' => 'https://link_to_avatar_url.kinde.com', ] ``` ### User permissions After a user signs in and they are verified, the token return includes permissions for that user. [User permissions are set in Kinde](/manage-users/roles-and-permissions/user-permissions/), but you must also configure your application to unlock these functions. Example of a permissions array. ```java String[] permissions = { "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", }; ``` Helper functions for permission access. ```java Object permission=this.kindeClientSDK.getPermission(request,"create:todos"); // ["orgCode" => "org_1234", "isGranted" => true] ``` Example in your code. ```java Object permissions=this.kindeClientSDK.getPermissions(request); // ["orgCode" => "org_1234", "permissions" => ["create:todos", "update:todos", "read:todos"]] ``` ## Call your API Once the user has successfully authenticated, you’ll have a JWT and a refresh token and that has been stored securely. Use the `getToken` method to get the token: ```java Object token=this.kindeClientSDK.getToken(resp,request); ``` Use the `getAccessToken` method of the Storage class to get an access token. ```java ... import org.openapitools.sdk.storage.Storage; ... private Storage storage; this.storage = Storage.getInstance(); String accessToken=storage.getAccessToken(req); System.out.println(accessToken); ``` The token will be stored in the cookie. To specify the expiration time, use the `setTokenTimeToLive` method. ```java setTokenTimeToLive(System.currentTimeMillis() + 3600000) // Live in 1 hour ``` Get the current authentication status with `isAuthenticated`. ```java Boolean isAuthenticated = this.kindeClientSDK.isAuthenticated(request, resp); ``` ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be passed to the Kinde client to request an audience be added to the provided token. ```java @PostConstruct public void createKindeClientSDK(){ this.kindeClientSDK=new KindeClientSDK( domain, redirectUri, clientId, clientSecret, grantType, logoutRedirectUri, Collections.singletonMap("audience","api.yourapp.com")); } ``` ## Organizations ### Create an organization To create a new organization within your application, run a similar function to below: ```java this.kindeClientSDK.createOrg(resp); ``` You can also pass org_name as your organization ```java Map<String,Object> additonalParameters = new HashMap<>(); additonalParameters.put("org_name","Your Organization"); Object result = kindeClientSDK.createOrg(response,additonalParameters); ``` ### Sign users up or in to an organization When a user signs up or in to an organization, the `org_code` needs to be passed with the request. The `org_code` refers to the one created automatically in Kinde when the organization was created, for example `org_0e9f496742ae`. Here’s an helper function for registering in below: ```java Map<String,Object> additonalParameters = new HashMap<>(); additonalParameters.put("org_code","your_org_code"); Object result = kindeClientSDK.register(response,additonalParameters); ``` If you want a user to sign in to a particular organization, pass this code along with the sign in method. ```java Map<String,Object> additonalParameters=new HashMap<>(); additonalParameters.put("org_code","your_org_code"); Object result = kindeClientSDK.login(response,additonalParameters); ``` Because a user can belong to multiple organizations, and because they may have different permissions for the different organizations, with pass both the `org_code` and `permissions` in the token. Here’s an example: ```json [ "aud" => [], "exp" => 1658475930, "iat" => 1658472329, "iss" => "https://your_subdomain.kinde.com", "jti" => "123457890", "org_code" => "org_1234", "permissions" => ["read:todos", "create:todos"], "scp" => [ "openid", "profile", "email", "offline ], "sub" => "kp:123457890 ]; ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```json [ ... "org_codes" => ["org_1234", "org_4567"], ... ]; ``` There are two helper functions you can use to extract information: ```java this.kindeClientSDK.getOrganization(request); // ["orgCode" => "org_1234"] this.kindeClientSDK.getUserOrganizations(request); // ["orgCodes" => ["org_1234", "org_abcd"]] ``` ## Scopes ### Default scopes By default, Kinde requests the following scopes: - profile - email - offline - openid ### Overriding scopes You can also pass override scopes to the Kinde SDK as per this example: ```java @PostConstruct public void createKindeClientSDK(){ this.kindeClientSDK=new KindeClientSDK( domain, redirectUri, clientId, clientSecret, grantType, logoutRedirectUri, "profile email offline openid"); } ``` ### Getting claims Kinde provides a helper to grab any claim from your ID or access tokens. The helper defaults to access tokens: ```java Object claim=this.kindeClientSDK.getClaim(request,"aud"); // ["name" => "aud", "value" => ["api.yourapp.com"]] Object claim=this.kindeClientSDK.getClaim(request,"given_name","id_token"); // ["name" => "aud", "value" => "David"] ``` ## Feature flags When a user signs in, the access token your product or application receives contains a custom claim called `feature_flags`. Feature flags define what features a user can access after they sign in. You can set feature flags in Kinde through code (see below), or through the Kinde application. ```java <u>**Create feature flag**</u> _**POST**_ /api/v1/feature_flags **Content-Type:** application/json **Accept:** application/json **Authorization:** Bearer {access-token} <u>**Example:**</u> _**POST**_ https://{businessName}.kinde.com/api/v1/feature_flags <u>**Request Body**</u> { "name": "string", "description": "string", "key": "string", "type": "str", "allow_override_level": "env", "default_value": "string" } ``` To minimize the token payload we use single letter keys / values to represent the following: - `t = type` - `v = value` - `s = string` - `b = boolean` - `i = integer` We also provide helper functions to more easily access feature flags: ```java this.kindeClientSDK.getFlag(request,"theme"); ``` A practical example in code would look something like: ```java this.kindeClientSDK.getFlag(request,"theme"); // returns [ "code" => "theme", "type" => "string", "value" => "pink", "is_default" => false // whether the fallback value had to be used ] // Another usage case this.kindeClientSDK.getFlag(request,"is_dark_mode"); // returns [ "code": "is_dark_mode", "type": "boolean", "value": true, "is_default": false ] // This flag does not exist - default value provided Map<String,Object> options=new HashMap<>(); options.put("defaultValue",false); this.kindeClientSDK.getFlag(request,"create_competition",options); // returns [ "code": "create_competition", "type" => "boolean", "value": false, "is_default": true // because fallback value had to be used ] // The flag type was provided as string, but it is an integer Map<String,Object> options=new HashMap<>(); options.put("defaultValue",3); this.kindeClientSDK.getFlag(request,"competitions_limit",options,"s"); // should error out - Flag "competitions_limit" is type integer - requested type string // This flag does not exist, and no default value provided this.kindeClientSDK.getFlag(request,"new_feature"); // should error out - This flag was not found, and no default value has been provided ``` ### Wrapper functions We also require wrapper functions to be separated by type as part of the `getFlag` function. Boolean wrapper: ```java this.kindeClientSDK.getBooleanFlag(request,"is_dark_mode"); ``` String wrapper: ```java this.kindeClientSDK.getStringFlag(request,"theme"); ``` Integer wrapper: ```java this.kindeClientSDK.getIntegerFlag(request,"competitions_limit"); ``` Example of wrapper function: ```java // [--- Boolean ---] this.kindeClientSDK.getBooleanFlag(request,"is_dark_mode"); // with default value this.kindeClientSDK.getBooleanFlag(request,"is_dark_mode", false); // [--- Boolean ---] // [--- String ---] this.kindeClientSDK.getStringFlag(request,"theme"); // with default value this.kindeClientSDK.getStringFlag(request,"theme","blue"); // [--- String ---] // [--- Integer ---] this.kindeClientSDK.getIntegerFlag(request,"competitions_limit"); // with default value this.kindeClientSDK.getIntegerFlag(request,"competitions_limit", 1); // [--- Integer ---] ``` ## Token storage in the authentication state This applies to frontend SDKs only. By default the JWTs provided by Kinde are stored in memory. This protects you from both [CSRF](https://owasp.org/www-community/attacks/csrf) attacks (possible if stored as a client side cookie) and [XSS](https://owasp.org/www-community/attacks/xss/) attacks (possible if persisted in local storage). The trade off with this approach is that if a page is refreshed or a new tab is opened, then the token is wiped from memory, and the sign in button would need to be clicked to re-authenticate. There are two ways to prevent this behavior: 1. (Recommended) Use the [Kinde custom domain](/build/domains/pointing-your-domain/) feature. We can then set a secure, httpOnly cookie against your domain containing only the refresh token which is not vulnerable to CSRF attacks. 2. (Non-production solution only) Use an escape hatch for local development: `isDangerouslyUseLocalStorage`. This SHOULD NOT be used in production. This will store only the refresh token in local storage to silently re-authenticate. **Storing Tokens** The **`setToken`** method is used to store the token in a secure manner. It encodes the token (which can be a string or a map) and sets it as a cookie in the HTTP response. The token is stored with specific attributes such as **`MaxAge`**, **`Path`**, **`Domain`**, **`Secure`**, and **`HttpOnly`** to enhance security. ```java public static void setToken(HttpServletResponse response, Object token) { // Encode the token (either as a string or a map) String tok = (token instanceof String) ? (String) token : encodeTokenAsURL(token); // Set the token as a cookie with defined attributes setItem(response, StorageEnums.TOKEN.getValue(), tok, getTokenTimeToLive().intValue()); } ``` The **`setItem`** method is a utility function for setting a cookie with the provided attributes. ```java public static void setItem(HttpServletResponse response, String key, String value, int expiresOrOptions, String path, String domain, boolean secure, boolean httpOnly) { String newKey = getKey(key); Cookie cookie = new Cookie(newKey, value); cookie.setMaxAge(expiresOrOptions); cookie.setPath(path); cookie.setDomain(domain); cookie.setSecure(secure); cookie.setHttpOnly(httpOnly); response.addCookie(cookie); } ``` **Retrieving Tokens** ```java Object token=this.kindeClientSDK.getToken(response,request); ``` The **`getToken`** method is used to retrieve the token from the HTTP request. It decodes and reads the stored token from the cookie. ```java public static Map<String, Object> getToken(HttpServletRequest request) { try { // Get the token as a string String token = getItem(request, StorageEnums.TOKEN.getValue()); // Decode the token and convert it to a Map String decodedToken = java.net.URLDecoder.decode(token, "UTF-8"); return new ObjectMapper().readValue(decodedToken, new TypeReference<Map<String, Object>>() {}); } catch (Exception e) { return null; } } ``` The **`getItem`** method is a utility function for retrieving a specific cookie from the HTTP request. ```java public static String getItem(HttpServletRequest request, String key) { String cookieName = getKey(key); Cookie[] cookies = request.getCookies(); if (cookies != null) { for (Cookie cookie : cookies) { if (cookie.getName().equals(cookieName)) { return cookie.getValue(); } } } return ""; } ``` ## API reference - Types ### `host` Either your Kinde instance URL or your custom domain. e.g. `https://yourapp.kinde.com/` Type: string Required: yes ### `redirectUri` The URL that the user will be returned to after authentication. Type: string Required: yes ### `clientId` The unique ID of your application. Get this from the Application details section in Kinde. Type: string Required: yes ### `clientSecret` The unique client secret of your Kinde application. Get this from the Application details section in Kinde. Type: string Required: Not required if you use OAuth PKCE ### `grantType` The grantType for Kinde Authorization varies for each OAuth 2 flow. You can use: - Authorization code: GrantType._AUTHORIZATION_CODE_.getValue(): Intended for confidential clients, e.g. web-servers. - Authorization code with PKCE: GrantType._PKCE_.getValue(): Extension for public clients, e.g. single page web applications and mobile applications, and confidential clients, e.g. web-servers. Note that the `code_challenge` and `code_challenge_method` parameters are also required for this grant type. - Client credentials flow: GrantType._CLIENT_CREDENTIALS_.getValue(): Intended for confidential clients where machine-to-machine communication is required. Type: string Required: yes ### `logoutRedirectUri` Where your user will be redirected when they sign out. Type: string Required: yes ### `scope` The scopes to be requested from Kinde. Type: string Required: No Default: openid profile email offline ### `additionalParameters` Additional parameters that will be passed in the authorization request. Type: Map\<String, Object> Required: No Default: new Hashmap\<>() ### `additionalParameters - audience` The audience claim for the JWT. Type: string Required: No ## API reference - Kinde methods ### `login` Constructs redirect URL and sends user to Kinde to sign in. Arguments: ```java response?: HttpServletResponse additionalParameters?: Map<String, Object> //org_code -> String ``` Usage: ```java kindeClientSDK.login(response); ``` ### `register` Constructs redirect url and sends user to Kinde to sign up. Arguments: ```java response?: HttpServletResponse additionalParameters?: Map<String, Object> //org_code -> String ``` Usage: ```java kindeClientSDK.register(response); ``` ### `logout` Logs the user out of Kinde. Arguments: ```java response?: HttpServletResponse ``` Usage: ```java this.kindeClientSDK.logout(response); ``` ### `getToken` Returns the raw access token from URL after logged from Kinde. Arguments: ```java response?: HttpServletResponse request?: HttpServletRequest ``` Usage: ```java kindeClientSDK.getToken(response,request); ``` Sample output: ```java [ "access_token" => "eyJhbGciOiJSUzI...", "expires_in" => 86400, "id_token" => "eyJhbGciOiJSU...", "refresh_token" => "yXI1bFQKbXKLD7AIU...", "scope" => "openid profile email offline", "token_type" => "bearer ]; ``` ### `createOrg` Constructs redirect url and sends user to Kinde to sign up and create a new org for your business. Arguments: ```java response?: HttpServletResponse additionalParameters?: Map<String, Object> //org_name -> String ``` Usage: ```java kindeClientSDK.createOrg(response); or Map<String,Object> additionalParameters=new HashMap<>(); additionalParameters.put("org_name","your organization name"); kindeClientSDK.createOrg(response,additionalParameters); ``` Sample output: ```java RedirectView //Will return RedirectView if Grant type is either authorization_code or authorization_code_flow_pkce LinkedHashMap //Will return LinkedHashMap if Grant type is client_credentials ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```java request?: HttpServletRequest, claim: string, tokenKey?: string ``` Usage: ```java kindeClientSDK.getClaim(request,"given_name", "id_token"); ``` Sample output: ```java David ``` ### `getPermission` Returns the state of a given permission. Arguments: ```java request?: HttpServletRequest, key: string ``` Usage: ```java this.kindeClientSDK.getPermission(request,"read:todos"); ``` Sample output: ```java [ "orgCode" => "org_1234", "isGranted" => true ]; ``` ### `getPermissions` Returns all permissions for the current user for the organization they are logged into. Arguments: ```java request?: HttpServletRequest ``` Usage: ```java this.kindeClientSDK.getPermissions(request); ``` Sample output: ```java [ "orgCode" => "org_1234", "permissions" => ["create:todos", "update:todos", "read:todos"] ]; ``` ### `getOrganization` Get details for the organization your user is logged into. Arguments: ```java request?: HttpServletRequest ``` Usage: ```java this.kindeClientSDK.getOrganization(request); ``` Sample output: ```java [ "orgCode" => "org_1234 ]; ``` ### `getUserDetails` Returns the profile for the current user. Arguments: ```java request?: HttpServletRequest ``` Usage: ```java this.kindeClientSDK.getUserDetails(request); ``` Sample output: ```java [ "given_name" => "Dave", "id" => "abcdef", "family_name" => "Smith", "email" => "mailto:dave@smith.com ]; ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Arguments: ```java request?: HttpServletRequest ``` Usage: ```java this.kindeClientSDK.getUserOrganizations(request); ``` Sample output: ```java [ "orgCodes" => ["org_8de8711f46a", "org_820c0f318de"] ]; ``` ### `getFlag` Gets a feature flag from an access token. Arguments: ```java request?: HttpServletRequest, flagName: string, options?: Map<String, Object> //"defaultValue" => any ``` Usage: ```java this.kindeClientSDK.getFlag(request,"is_dark_mode"); ``` Sample output: ```java [ "code": "is_dark_mode", "type": "boolean", "value": true, "is_default": false ]; ``` ### `getBooleanFlag` Gets a boolean feature flag from an access token. Arguments: ```java request?: HttpServletRequest, flagName: string, defaultValue?: boolean ``` Usage: ```java kindeClientSDK.getBooleanFlag(request,"is_dark_mode", false); ``` Sample output: ```java [ "code": "is_dark_mode", "type": "boolean", "value": false, "is_default": true ]; ``` ### `getStringFlag` Gets a string feature flag from an access token. Arguments: ```java request?: HttpServletRequest, flagName: string, defaultValue?: string ``` Usage: ```java kindeClientSDK.getStringFlag(request,"theme"); ``` Sample output: ```java [ "code": "theme", "type": "string", "value": "black", "is_default": false ]; ``` ### `getIntegerFlag` Gets a integer feature flag from an access token. Arguments: ```java request?: HttpServletRequest, flagName: string, defaultValue?: integer ``` Usage: ```java kindeClientSDK.getIntegerFlag(request,"competitions_limit"); ``` Sample output: ```java [ "code": "competitions_limit", "type": "integer", "value": 1, "is_default": false ]; ``` ### `isAuthenticated` To check user authenticated or not. Arguments: ```java response?: HttpServletResponse request?: HttpServletRequest ``` Usage: ```java this.kindeClientSDK.isAuthenticated(request, response); ``` Sample output: ```java true or false ``` If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Java SDK

> Complete guide for Java SDK including Maven/Gradle installation, M2M token retrieval, PKCE authentication, and environment configuration for Java 17+ applications.

Java SDK, Maven, Gradle, M2M, PKCE, environment variables, client credentials
developer-tools, sdks, java, backend

The Kinde Java SDK allows developers to connect their Java app to Kinde. You can find our [Java SDK](https://github.com/kinde-oss/kinde-java-sdk) and [Java starter kit](https://github.com/kinde-starter-kits/kinde-java-starter-kit) in GitHub. The SDK is officially only supported for Java version 17 or later. ## Register with Kinde If you haven’t already created a Kinde account, [register for free here](https://app.kinde.com/register). Registration gives you a Kinde domain, which you will need to get started. e.g. `yourapp.kinde.com`. <Aside> If you’re using version 1, see [Java SDK v1](/developer-tools/sdks/backend/java-sdk-v1/) </Aside> ## Kinde Java core The Kinde Java core provides the core of the Kinde SDK for the Java platform. This is necessary to install for connecting to Kinde. ## Install ### Install from source Clone the SDK repository. ```shell git clone https://github.com/kinde-oss/kinde-java-sdk.git ``` Create a JAR file of your SDK project using the below command: ```bash cd kinde-java-sdk mvn clean install ``` #### Maven users Kinde’s SDK is available through [Maven](https://search.maven.org/). To install it, add the following line to your `pom.xml`. ```java <dependency> <groupId>com.kinde</groupId> <artifactId>java-sdk</artifactId> <version>[2.0.1,)</version> </dependency> ``` ### Gradle users Add this dependency to your project’s build file: ```bash repositories { mavenCentral() // Needed if the ‘kinde’ jar has been published to maven central. mavenLocal() // Needed if the ‘kinda’ jar has been published to the local maven repo. } dependencies { implementation "com.kinde:java-sdk:+” } ``` ## Connect to Kinde ### Set up environment variables The following environment variables are required for connecting to Kinde. This will enable the development of a M2M client service. ```shell export KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you setup at kinde export KINDE_CLIENT_ID=<replace> # the id for the client connecting to Kinde export KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde ``` Provide a redirect URI, so a user's login can be validated against Kinde. ```shell export KINDE_REDIRECT_URI=http://localhost:8080/kinde-j2ee-app/login ``` The redirect URI/URL is used post successful login. It is the URL that the PKCE client CODE will be set to. A query parameter of ?code='value' must be processed. ### Set up .env files The Kinde library supports .env files. The must be located in the directory from which the application is executed. ```shell KINDE_DOMAIN=https://<replace>.kinde.com KINDE_CLIENT_ID=<replace> KINDE_CLIENT_SECRET=<replace> KINDE_REDIRECT_URI=http://localhost:8080/kinde-j2ee-app/login ``` #### Core server example To make a M2M server token request onto Kinde, set up the environment variables. #### By shell export Run these exports before running your service. ```shell export KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you setup at kinde export KINDE_CLIENT_ID=<replace> # the id for the client connecting to Kinde export KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde ``` #### By .env file config Place this .env file in the directory from which you run your service. ```shell KINDE_DOMAIN=https://<replace>.kinde.com KINDE_CLIENT_ID=<replace> KINDE_CLIENT_SECRET=<replace> ``` #### Programmatic configuration If you want to pass in configuration programmatically, use the `KindeClientBuilder`. ```java KindeClient kindeClient = KindeClientBuilder .builder() .domain("<replace>") .clientId("<replace>") .clientSecret("<replace>") .build(); ``` ## Retrieve a M2M token The example below details how to implement a server-level token request. This is needed for M2M communication and authorization. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.clientSession(); KindeTokens tokens = kindeClientSession.retrieveTokens(); ``` ### User Code Authorization Example (PKCE) To authenticate a user on the client-side, configure as follows. #### By shell export Run these exports before running your service. ```shell export KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you setup at kinde export KINDE_CLIENT_ID=<replace> # the id for the client connecting to Kinde export KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde export KINDE_REDIRECT_URI=openid # the open id ``` #### By .env file config Place this .env file in the directory from which you run your service. ```shell KINDE_DOMAIN=https://<replace>.kinde.com KINDE_CLIENT_ID=<replace> KINDE_CLIENT_SECRET=<replace> KINDE_REDIRECT_URI=<replace> KINDE_SCOPES=openid ``` #### Programmatic configuration If you want to pass in configuration programmatically, use the `KindeClientBuilder`. ```java KindeClient kindeClient = KindeClientBuilder .builder() .domain("<replace>") .clientId("<replace>") .clientSecret("<replace>") .redirectUri("replace") .addScope("openid") .build(); ``` ## Generate the redirect URL Before the PKCE code can be processed, a user must be directed to Kinde to sign in. The client library can generate this URL as follows. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.clientSession(); AuthorizationUrl authorizationURL = kindeClientSession.authorizationUrl(); ``` The AuthorizationUrl contains the url and CodeVerify information. If using a code grant the code verify needs to be stored for the redirect call. This can be done using the J2EE session. Here is an example ```java req.getSession().setAttribute("AuthorizationUrl",authorizationUrl); resp.sendRedirect(authorizationUrl.getUrl().toString()); ``` ## Request tokens upon redirect If it is a code auth, then the `AuthorizationUrl` needs to be retrieved. ```java AuthorizationUrl authorizationUrl = (AuthorizationUrl)req.getSession().getAttribute("AuthorizationUrl"); ``` The token request looks like the following. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); ``` ## Get user information It is possible to retrieve user information using an AccessToken. In the example below, an access token is passed in a client session. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.getKindeClient().initClientSession(accessToken); UserInfo userInfo = kindeClientSession.retrieveUserInfo(); ``` Retrieve the user details for the code that has been authenticated. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.getKindeClient().initClientSession(code,authorizationUrl); UserInfo userInfo = kindeClientSession.retrieveUserInfo(); ``` ### User profile The UserInfo object retrieved above contains the following member variables. | Variables | Description | | ---------- | ------------------------------------------- | | userInfo | The nimbus user object for more information | | subject | The subject of the user object | | id | The id of the user on Kinde | | givenName | The given or first name of the user | | familyName | The family or surname of the user on Kinde | | email | The email address of the user on Kinde | | picture | The picture of the user on Kinde | ## API reference - for the Kinde core #### `login` The login process generates an authorization url. This can be used by the browser to initiate the login on Kinde, and once completed the user will be re-directed back. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.getKindeClient().clientSession(); AuthorizationUrl authorizationURL = kindeClientSession.login(); ``` Send the redirect response using: ```java resp.sendRedirect(authorizationUrl.getUrl().toString()); ``` #### `register` authenticate flow The register process generates an authorization URL. This URL can be used to redirect the user to Kinde to register, and then redirect them back to complete the PKCE login. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.getKindeClient().clientSession(); AuthorizationUrl authorizationURL = kindeClientSession.register(); ``` Send the redirect response using: ```java resp.sendRedirect(authorizationUrl.getUrl().toString()); ``` #### `logout` The register process generates an authorization URL. This can be used by the browser to initiate the login. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.getKindeClient().clientSession(); AuthorizationUrl authorizationURL = kindeClientSession.logout(); ``` Send the redirect response using: ```java resp.sendRedirect(authorizationUrl.getUrl().toString()); ``` #### `getToken` To complete authentication of a user and retrieve their tokens, do the following. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); ``` Retrieve a client session for the application and then retrieve the tokens for that client. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().clientSession().retrieveTokens(); ``` #### `createOrg` authentication flow The register process generates an authorization URL. This URL can be used to redirect the user to Kinde to register, and then redirect them back to complete the PKCE login. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeClientSession kindeClientSession = kindeClient.getKindeClient().clientSession(); AuthorizationUrl authorizationURL = kindeClientSession.createOrg("Org Value"); ``` Send the redirect response using: ```java resp.sendRedirect(authorizationUrl.getUrl().toString()); ``` #### `getClaim` Claims are available from the tokens. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); tokens.getAccessToken().getClaim("key"); ``` The API on the token provides the `getClaim` method, which uses a key name to identify the claim in the token, and return the json object it refers to. #### `getPermission` The permissions are available from the token. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); List<String> permissions = new ArrayList<String>(); permissions.addAll(tokens.getAccessToken().getPermissions()); ``` #### `getOrganization` The organization can be retrieved from the access token. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); List<String> organizations = new ArrayList<String>(); permissions.addAll(tokens.getAccessToken().getOrganizations()); ``` #### `getUserDetails` The user details are available either via the AccessToken or via the OAuth2 user info endpoint. Using the Token API: ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); tokens.getAccessToken()... // retrieve user information // username // permissions // claims // feature flags ``` ### User profile If this is not sufficient, the OAuth2 user info endpoint can be invoked. This can be done using an access token, or just after code auth. The following scopes ware required, `openid, profile, email`. Using the code-created client: ```java KindeClientSession kindeClientSession = kindeClient.initClientSession(code, authorizationUrl); UserInfo userInfo = kindeClientSession.retrieveUserInfo(); assertNotNull(userInfo); assertNotNull(userInfo.getEmail()); assertNotNull(userInfo.getSubject()); assertNotNull(userInfo.getId()); assertNotNull(userInfo.getPicture()); assertNotNull(userInfo.getGivenName()); assertNotNull(userInfo.getFamilyName()); ``` Using a token-created client: ```java KindeClientSession kindeClientSession = kindeClient2.initClientSession(accessToken); UserInfo userInfo = kindeClientSession.retrieveUserInfo(); assertNotNull(userInfo); assertNotNull(userInfo.getEmail()); assertNotNull(userInfo.getSubject()); assertNotNull(userInfo.getId()); assertNotNull(userInfo.getPicture()); assertNotNull(userInfo.getGivenName()); assertNotNull(userInfo.getFamilyName()); ``` #### `getUserOrganizations` The organization can be retrieved from the access token. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); List<String> organizations = new ArrayList<String>(); organizations.addAll(tokens.getAccessToken.getOrganizations()); ``` ### `getFlags` The flags can be retrieved from the token. Once you have referenced the access token, the `getFlag` method can be called. This method returns a `Map<String,Object>` ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); tokens.getAccessToken().getFlags(); ``` #### `getBooleanFlag` This method returns a boolean value of the internal flag value. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); tokens.getAccessToken().getBooleanFlag(key); ``` #### `getStringFlag` This method returns a string value. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); tokens.getAccessToken().getStringFlag(key); ``` #### `getIntegerFlag` The method returns the value for the key in type integer. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); tokens.getAccessToken().getIntegerFlag(key); ``` ## Kinde-J2EE API This is the Kinde J2EE Library, and contains the core components needed to manage a client connection to the Kinde from a J2EE servlet container. ### Project dependencies #### Maven In order to use this SDK include following POM dependency. ```xml <dependency> <groupId>com.kinde</groupId> <artifactId>kinde-j2ee</artifactId> <version>[2.0.1,)</version> </dependency> ``` #### Gradle In order to use the SDK with a Gradle build process please use the following dependency. ```groovy configuration('com.kinde:kinde-j2ee:+') ``` ### Project configuration Configure the web.xml file to use these servlets. ```xml <?xml version="1.0" encoding="UTF-8"?> <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd version="3.1"> <servlet> <servlet-name>KindeLoginServlet</servlet-name> <servlet-class>com.kinde.servlet.KindeLoginServlet</servlet-class> </servlet> <servlet> <servlet-name>KindeLogoutServlet</servlet-name> <servlet-class>com.kinde.servlet.KindeLogoutServlet</servlet-class> </servlet> <servlet> <servlet-name>KindeRegisterServlet</servlet-name> <servlet-class>com.kinde.servlet.KindeRegistrationServlet</servlet-class> </servlet> <filter> <filter-name>KindeLoginFilter</filter-name> <filter-class>com.kinde.filter.KindeLoginFilter</filter-class> </filter> <servlet-mapping> <servlet-name>KindeLoginServlet</servlet-name> <url-pattern>/login</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>KindeRegisterServlet</servlet-name> <url-pattern>/register</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>KindeLogoutServlet</servlet-name> <url-pattern>/logout</url-pattern> </servlet-mapping> <filter-mapping> <filter-name>KindeLoginFilter</filter-name> <url-pattern>/private/*</url-pattern> <!-- Apply to all URLs or specify specific patterns --> </filter-mapping> </web-app> ``` ### J2EE servlets and filters The above project configuration sets up an example web.xml using the Kinde-J2EE servlets and filters. These are all you need to secure a J2EE project and can be used with Spring Boot or Quarkus: 1. KindeLoginServlet: The servlet responsible for managing a login. It manages the re-direct to the Kinde Domain and and in the example above is setup to run from /login with the J2EE context. 2. KindeRegisterServlet: This servlet is responsible for triggering the registration flow. It redirects to the configured Kinde domain and provides Kinde with the flags to indicate this is a user registration flow. 3. KindeLogoutServlet: This servlet is responsible for triggering the logout flow, and for removing from the application any active session for the user. 4. KindeLoginFilter: This is a J2EE filter and acts as a gateway to the private section of your site. It will deny users access to anything its scope covers, unless they have successfully authenticated. It also sets up roles or permissions for the logged in user. ### Environment configuration Configuration can either be performed by exports or through an .env file. #### Shell ```shell export KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you set up at kinde export KINDE_CLIENT_ID=<replace> # the ID for the client connecting to Kinde export KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde export KINDE_REDIRECT_URI=http://localhost:8080/kinde-j2ee-app/login ``` #### .env The Kinde library supports .env files. The files must be located in the directory from which the application is executed. ```shell KINDE_DOMAIN=https://<replace>.kinde.com KINDE_CLIENT_ID=<replace> KINDE_CLIENT_SECRET=<replace> KINDE_REDIRECT_URI=http://localhost:8080/kinde-j2ee-app/login ``` ## Kinde Spring Boot starter The Spring Boot starter manages all the dependencies required by a spring boot application connecting to Kinde. ### Project Dependencies #### Maven To use configure Spring Boot to use Kinde for authentication, include the following dependency. ```xml <dependency> <groupId>com.kinde.spring</groupId> <artifactId>kinde-springboot-starter</artifactId> <version>[2.0.1,)</version> </dependency> ``` #### Gradle To use the SDK with a Gradle build process, use the following dependency. ```groovy configuration('com.kinde.spring:kinde-springboot-starter:+') ``` ### Usage This library can be configured in different ways, via environment variables, via .env file and via the Spring Boot application.yaml file. #### Environment configuration ```shell export KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you setup at kinde export KINDE_CLIENT_ID=<replace> # the id for the client connecting to Kinde export KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde export KINDE_REDIRECT_URI=http://localhost:< replace with port of application server >/kinde-j2ee-app/login export KINDE_GRANT_TYPE=CODE export KINDE_SCOPES=profile,email,openid ``` #### `.env` ```shell KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you setup at kinde KINDE_CLIENT_ID=<replace> # the id for the client connecting to Kinde KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde KINDE_REDIRECT_URI=http://localhost:< replace with port of application server >/kinde-j2ee-app/login KINDE_GRANT_TYPE=CODE KINDE_SCOPES=profile,email,openid ``` #### `application.yaml` ```yaml kinde: oauth2: domain: https://< replace >.kinde.com client-id: < replace > client-secret: < replace > scopes: openid,email,profile ``` ## Kinde Management API You can access Kinde's API endpoints through the Kinde Management API. This lets developers work programmatically, rather than through the main Kinde interface. ### Development The Kinde Management Library contains the components needed to access the Kinde Management API. It includes an OpenAPI-generated stub and a `KindeAdminSession` tool that instantiates the `ApiClient` using OIDC details. ### Project Dependencies #### Maven To use this SDK, include the following dependency in your `pom.xml`: ```xml <dependency> <groupId>com.kinde</groupId> <artifactId>kinde-management</artifactId> <version>[2.0.1,)</version> </dependency> ``` #### Gradle For Gradle, add the following dependency to your build file: ```groovy implementation('com.kinde:kinde-management:+') ``` ### Building the SDK from Source 1. Clone the repository to your machine: ```bash git clone https://github.com/kinde-oss/kinde-java-sdk ``` 2. Go into the project: ```bash cd kinde-java-sdk ``` 3. Install the dependencies: ```bash mvn clean install ``` ### Documentation Maven automatically downloads the dependency from your local repository and makes it available in your project. ### Library usage #### Set up environment variables The following basic environment variables are required at a mimimum for connecting to the Kinde Management API. ```shell export KINDE_DOMAIN=https://<replace>.kinde.com # This is the domain you setup at kinde export KINDE_CLIENT_ID=<replace> # the id for the client connecting to Kinde export KINDE_CLIENT_SECRET=<replace> # the secret used to authenticate the client against Kinde export KINDE_SCOPES=openid # the scope as we are using an OpenID connection export KINDE_AUDIENCE=https://<replace>.kinde.com/api # the audience we need access to ``` #### Set up .env files The Kinde library supports .env files. The must be located in the directory from which the application is executed. ```shell KINDE_DOMAIN=https://burntjam.kinde.com KINDE_CLIENT_ID=<replace> KINDE_CLIENT_SECRET=<replace> KINDE_SCOPES=openid KINDE_AUDIENCE=https://<replace>.kinde.com/api ``` #### Programmatic configuration If you want to pass in configuration programmatically, the `KindeClientBuilder` supports the following approach. ```java KindeClient kindeClient = KindeClientBuilder .builder() .domain("<replace>") .clientId("<replace>") .clientSecret("<replace>") .addScope("<replace>") .addAudience("https://<replace>.kinde.com/api") .build(); ``` ##### Get an `ApiClient` This example gets an `ApiClient` instance and then creates an `ApplicationApi` instance using the `ApiClient`. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeAdminSession kindeAdminSession = KindeAdminSessionBuilder.builder().client(kindeClient).build(); ApiClient apiClient = kindeAdminSession.initClient(); ApplicationsApi applicationsApi = new ApplicationsApi(apiClient); ``` ### Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ### User Permissions The user permissions are available in two ways. One is from the ID token as a claim, the other is via the Kinde Management API. #### Permissions in token ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeTokens tokens = kindeClient.getKindeClient().initClientSession(code,authorizationUrl).retrieveTokens(); List<String> permissions = new ArrayList<String>(); permissions.addAll(tokens.getAccessToken().getPermissions()); ``` #### Permissions via the Management API The permissions are up to you to define. The code below provides an example on how to retrieve the permissions from the portal using the Kinde Management API. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeAdminSession kindeAdminSession = KindeAdminSessionBuilder.builder().client(kindeClient).build(); ApiClient apiClient = kindeAdminSession.initClient(); OrganizationApi organizationApi = new OrganizationApi(apiClient); // org code is the org that the user is associated with // user id is the user // expanded organizationApi.getOrganizationUserPermissions(orgCode, userId, expand) ``` ### Create an organization Use the `OrganizationApi` to create a new organization. ```java KindeClient kindeClient = KindeClientBuilder .builder() .build(); KindeAdminSession kindeAdminSession = KindeAdminSessionBuilder.builder().client(kindeClient).build(); ApiClient apiClient = kindeAdminSession.initClient(); OrganizationApi organizationApi = new OrganizationApi(apiClient); // org code is the org that the user is associated with // user id is the user // expanded organizationApi.createOrganization(new CreateOrganizationRequest().name("test")); ``` If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Next.js Pages Router SDK

> Legacy guide for Next.js Pages Router SDK including authentication setup, route handlers, and migration from previous versions.

next.js pages router, server side components, authentication, kinde provider, route handlers, migration guide
developer-tools, sdks, nextjs, backend

This SDK is for Next.js version 13 and later and uses Server Side Components and Pages Router. ## Next.js 13 and later App Router support We highly recommend using our dedicated [Next.js SDK](/developer-tools/sdks/backend/nextjs-sdk/) with App Router instead of this one. Whilst technically this SDK is compatible with Next.js 13, it isn’t optimal. It leverages the `use client;` escape hatch, which we don’t love. It also requires a single API file to be stored in the legacy `pages` directory. ## Other document versions - If you have not already installed the Next.js SDK, we recommend you use [Next.js App Router v2](/developer-tools/sdks/backend/nextjs-sdk/). - If you are already using the Next.js Pages Router, refer to the earlier version [Next.js Pages Router v1](/developer-tools/sdks/backend/nextjs-prev-sdkv1/). ## Register for Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). This will give you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. ## Get started with a new project The easiest way to get started is to use the [Next.js starter kit](https://github.com/kinde-starter-kits/kinde-nextjs-app-router-starter-kit). You can try out a live demo at ## **Install for existing project** <PackageManagers pkg="@kinde-oss/kinde-auth-nextjs" /> ## **Set callback URLs** 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example `http://localhost:3000/api/auth/kinde_callback` - Allowed logout redirect URLs - for example `http://localhost:3000` 3. Select **Save**. ## **Configure environment variables** Put these variables in a `.env.local` file in the root of your Next.js app. You can find these variables on your Kinde **Settings > Applications > [Your app] > View details** page. - `KINDE_CLIENT_ID` - Your business’s unique ID on Kinde - `KINDE_CLIENT_SECRET` - Your business’s secret key (do not share) - `KINDE_ISSUER_URL` - your kinde domain - `KINDE_SITE_URL` - where your app is running - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out. Make sure this URL is under your allowed logout redirect URLs. - `KINDE_POST_LOGIN_REDIRECT_URL` - where you want users to be redirected to after authenticating. Replace the information in the example below with your own information. You might also set different URLs depending where your project is running. They need to be the same as the callback URLs you entered in Kinde, above. ```shell KINDE_CLIENT_ID=<your_kinde_client_id> KINDE_CLIENT_SECRET=<your_kinde_client_secret> KINDE_ISSUER_URL=https://<your_kinde_subdomain>.kinde.com KINDE_SITE_URL=http://localhost:3000 KINDE_POST_LOGOUT_REDIRECT_URL=http://localhost:3000 KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:3000/dashboard ``` ## Set up KindeProvider Kinde uses a React Context Provider to maintain its internal state in your application. Import the `KindeProvider` component and wrap your application in it. ```jsx // app/layout.tsx "use client"; import { KindeProvider } from "@kinde-oss/kinde-auth-nextjs"; import Auth from "./auth"; export default function RootLayout({ children, }: { children: React.ReactNode; }) { return ( <KindeProvider> <html lang="en"> <body> <Auth>{children}</Auth> </body> </html> </KindeProvider> ); } ``` ## **Set up Kinde Auth Route Handlers** Create the following file `/pages/api/auth/[...kindeAuth].js` inside your Next.js project. Inside the file `[...kindeAuth].js` put this code: ```jsx import {handleAuth} from "@kinde-oss/kinde-auth-nextjs/server"; export default handleAuth(); ``` This will handle Kinde Auth endpoints in your Next.js app. **Important:** Our SDK relies on this file existing in this location specified above. ## Migration guide Updates since last version. **`handleAuth`** - is now imported from `“@kinde-oss/kinde-auth-nextjs/server”` ```jsx import { handleAuth } from "@kinde-oss/kinde-auth-nextjs/ ``` **`getKindeServerSession`** - functions returned from `getKindeServerSession` now return promises ```jsx const {getUser} = getKindeServerSession(); const user = await getUser(); ``` ## Authentication ### Sign up and sign in The SDK ships with `<LoginLink>` and `<RegisterLink>` components which can be used to start the auth flow. ```jsx import {RegisterLink, LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; ... <LoginLink>Sign in</LoginLink> <RegisterLink>Sign up</RegisterLink> ``` ### Redirecting after authentication **Static redirect** If you want to redirect users to a certain page after signing in, you can set the `KINDE_POST_LOGIN_REDIRECT_URL` environment variable in your `.env.local` file. **Dynamic redirect** You can also set a `postLoginRedirectURL` parameter to tell us where to redirect after authenticating. ```jsx import {RegisterLink, LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; ... <LoginLink postLoginRedirectURL="/dashboard">Sign in</LoginLink> <RegisterLink postLoginRedirectURL="/welcome">Sign up</RegisterLink> ``` This appends `post_login_redirect_url` to the search params when redirecting to Kinde Auth. That means you can achieve the same result as above, like this: ```jsx import { redirect } from "next/navigation"; ... redirect('/api/auth/login?post_login_redirect_url=/dashboard') ... ``` ### Logout This is implemented in much the same way as signing up or signing in. A component is provided for you. ```jsx import {LogoutLink} from "@kinde-oss/kinde-auth-nextjs/components"; ... <LogoutLink>Log out</LogoutLink> ``` ## Kinde Auth data ### getServerSideProps - `getKindeServerSession` You can get an authorized user’s Kinde Auth data from `getServerSideProps` using the `getKindeServerSession` helper. Example: ```jsx import { getKindeServerSession, } from "@kinde-oss/kinde-auth-nextjs/server"; export async function getServerSideProps({ req, res, }: { req: Request; res: Response; }) { const { getUser, getPermissions, getOrganization, } = getKindeServerSession(req, res); const organization = await getOrganization(); const permissions = await getPermissions(); const user = await getUser(); return { props: { user, permissions, organization, }, }; } export default function Server({ user, permissions, organization, }: any) { console.log("user", user); console.log("permissions", permissions); console.log("organization", organization); ... } ``` Reference: ```typescript { getAccessToken: () => Promise<string>; getBooleanFlag: (code: string, defaultValue: boolean) => Promise<boolean>; getFlag: (code: string, defaultValue: any, flagType: any) => Promise< | import("@kinde-oss/kinde-typescript-sdk").GetFlagType | { value: any; } >; getIntegerFlag: (code: string, defaultValue: number) => Promise<number>; getOrganization: () => Promise<{ orgCode: string; }>; getPermission: (name: any) => Promise<{ orgCode: string; isGranted: boolean; }>; getPermissions: () => Promise<{ permissions: string[]; orgCode: string; }>; getStringFlag: (code: string, defaultValue: string) => Promise<string>; getUser: () => Promise<any>; getUserOrganizations: () => Promise<{ orgCodes: string[]; }>; isAuthenticated: () => Promise<boolean>; } ``` ### Components - `useKindeAuth` You can get an authorized user’s Kinde Auth data from any component using the `useKindeAuth` helper. Example: ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-nextjs"; export default function ClientPage() { const { isLoading, user, permissions, organization, userOrganizations, accessToken, getBooleanFlag, getClaim, getFlag, getIntegerFlag, getPermission, getStringFlag, isAuthenticated, error } = useKindeAuth(); if (isLoading) return <div>Loading...</div>; return ( <div className="pt-20"> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">User</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(user, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Permissions</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(permissions, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Organization</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(organization, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">User organizations</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(userOrganizations, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Access Token</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(accessToken, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Is Authenticated</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(isAuthenticated, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">error</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(error, null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Get boolean flag</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(getBooleanFlag("bodsa", true), null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Get claim</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(getClaim("bodsa"), null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Get integer flag</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(getIntegerFlag("bodsa", 1), null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Get string flag</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(getStringFlag("bodsa", "dsad"), null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Get permission</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(getPermission("bodsa"), null, 2)} </pre> </div> <div className="mb-8"> <h4 className="text-2xl font-bold dark:text-white mb-2">Get flag</h4> <pre className="p-4 rounded bg-slate-950 text-green-300"> {JSON.stringify(getFlag("bodsa", "dsad", "s"), null, 2)} </pre> </div> </div> ); } ``` Reference: ```typescript export type State = { /** * - Kinde access token */ accessToken: string | null; error?: string | null; isAuthenticated: boolean | null; isLoading: boolean | null; /** * - The organization that the current user is logged in to */ organization: string | null; /** * - The current user's permissions */ permissions: string[] | null; /** * - Kinde user */ user: KindeUser | null; /** * - Organizations that the current user belongs to */ userOrganizations: string[] | null; getBooleanFlag: getBooleanFlag; getClaim: getClaim; getFlag: getFlag; getIntegerFlag: getIntegerFlag; getPermission: getPermission; getStringFlag: getStringFlag; }; ``` <Aside> Use `isLoading` to ensure the data is up to date. You can return a Loading spinner or something similar while it isLoading </Aside> ## Protecting routes It’s likely that your application will have both pages that are publicly available and private ones which should only be available to logged in users. There are multiple ways you can protect pages with Kinde Auth. ## Protect routes using Kinde Auth data On the page you want to protect, you can check if the user is authenticated and then handle it right then and there by grabbing the Kinde Auth data. Get Kinde Auth data: - server side in `getServerSideProps` with the `getKindeServerSession` help - client side using the `useKindeAuth` helper ```jsx // pages/protected.tsx - using getKindeServerSession import { LoginLink } from "@kinde-oss/kinde-auth-nextjs/dist/components"; import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server"; export async function getServerSideProps({ req, res, }: { req: Request; res: Response; }) { const { isAuthenticated } = getKindeServerSession(req, res); const isAuthed = await isAuthenticated(); return { props: { isAuthed }, }; } export default async function Protected({isAuthed}) { return (isAuthed ? ( <div> This page is protected - but you can view it because you are authenticated </div> ) : ( <div> This page is protected, please <LoginLink>Login</LoginLink> to view it </div> ); } // pages/protected/page.tsx - using useKindeAuth import { useKindeAuth } from "@kinde-oss/kinde-auth-nextjs"; import { LoginLink } from "@kinde-oss/kinde-auth-nextjs/dist/components"; export default function Admin() { const { isAuthenticated, isLoading } = useKindeAuth(); if (isLoading) return <div>Loading...</div>; return isAuthenticated ? ( <div>Admin content</div> ) : ( <div> You have to <LoginLink>Login</LoginLink> to see this page </div> ); } ``` In the example above we show different content based on whether or not the user is authenticated. If you want to automatically send the user to the sign in screen, you can do something like the following: ```jsx // pages/protected.tsx import {useKindeAuth} from "@kinde-oss/kinde-auth-nextjs"; import {useRouter} from "next/router"; import {useEffect} from "react"; export default async function Protected() { const router = useRouter(); const {isAuthenticated} = useKindeAuth(); useEffect(() => { if (!isLoading && !isAuthenticated) { router.push("/api/auth/login"); } }, [isLoading, isAuthenticated, router]); return <div>Protected content</div>; } ``` If you want the user to be redirected back to that route after login, you can set `post_login_redirect_url` in the search params of the redirect. ```jsx router.push("/api/auth/login?post_login_redirect_url=/protected"); ``` ## Protect routes using middleware You can also protect routes with Next.js middleware. **Default page protection** We provide a `withAuth` helper that will protect routes covered by the matcher. If the user is not authenticated then they are redirected to login and once they have logged in they will be redirected back to the protected page which they should now have access to. ```jsx import {withAuth} from "@kinde-oss/kinde-auth-nextjs/middleware"; export default function middleware(req) { return withAuth(req, { isReturnToCurrentPage: true }); } export const config = { matcher: ["/admin"] }; ``` **Page protection with callback function after authorization** You can use the `withAuth` helper as shown below with a `middleware` callback function which has access to the `req.kindeAuth` object that exposes the token and user data. ```typescript import {withAuth} from "@kinde-oss/kinde-auth-nextjs/middleware"; export default withAuth(async function middleware(req) { console.log("look at me", req.kindeAuth); }); export const config = { matcher: ["/admin"] }; ``` **Middleware options** There are options that can be passed into the middleware function to configure its functionality. - `isReturnToCurrentPage` - redirect the user back to the page they were trying to access - `loginPage` - define the path of the login page (where the users are redirected to when not authenticated) - `publicPaths` - define the public paths - `isAuthorized` - define the criteria for authorization ```typescript import {withAuth} from "@kinde-oss/kinde-auth-nextjs/middleware"; export default withAuth( async function middleware(req) { console.log("look at me", req.kindeAuth); }, { isReturnToCurrentPage: true, loginPage: "/login", isAuthorized: ({token}) => { // The user will be considered authorized if they have the permission 'eat:chips' return token.permissions.includes("eat:chips"); } } ); export const config = { matcher: ["/admin"] }; ``` ## Kinde Management API To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) `getServerSideProps` example: ```typescript import { Users } from "@kinde/management-api-js"; export async function getServerSideProps({ req, res, }: { req: Request; res: Response; }) { const { users } = await Users.getUsers(); return { props: { users, }, }; } export default function Server({ users }: any) { console.log(users) ... } ``` API route example: ```typescript import {Users} from "@kinde/management-api-js"; import type {NextApiRequest, NextApiResponse} from "next"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const users = await await Users.getUsers(); if (users.code === "OK") { return res.status(200).json({users}); } else { return res.status(400); } } ``` ## Organizations ### Create organizations To create an organization from your app, you can use the `CreateOrgLink` component. ```jsx import {CreateOrgLink} from "@kinde-oss/kinde-auth-nextjs/components"; <CreateOrgLink orgName="Hurlstone">Create org</CreateOrgLink>; ``` ### Signing into organizations You can have your users sign in to a specific organization by setting the `orgCode` param in the `LoginLink` and `RegisterLink` components. ```jsx import {LoginLink, RegisterLink} from "@kinde-oss/kinde-auth-nextjs/components"; <LoginLink orgCode="org_7392cf35a1e">Login</LoginLink> <RegisterLink orgCode="org_7392cf35a1e">Register</RegisterLink> ``` If the `orgCode` is not specified and the user belongs to multiple organizations, they will be prompted to choose which organization to log into during the login or register flow. ## Internationalization You can set the language you wish your users to see when they hit the login flow by including the `lang` attribute as a part of the `authUrlParams` when using the `LoginLink` and `RegisterLink` components. ```jsx import {LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; <LoginLink authUrlParams={{ lang: "en-AU" }} > Login </LoginLink>; ``` ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```jsx // .env ... KINDE_AUDIENCE=<your-api> ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## Working with subdomains In the case you have a [custom domain](/build/domains/pointing-your-domain/) and you would like to start the authentication flow from a URL like **`auth`**`.mysite.com` and you want to redirect to a URL like **`app`**`.mysite.com` , all you have to do is set the `KINDE_COOKIE_DOMAIN` to match the domain. ```jsx // .env ... KINDE_COOKIE_DOMAIN=.mysite.com ``` If the URL you want to start the authentication flow from and the URL you want to redirect to don’t share the same domain, then this will not work. ## Debug mode In debug mode you will see more logs in your console that may help with debugging. ```jsx // .env KINDE_DEBUG_MODE = true; ```

# Developer tools - Sdks - Next.js Pages Router SDK v1

> Legacy guide for Next.js Pages Router SDK v1 including authentication setup, API endpoints, and provider configuration for older Next.js versions.

next.js pages router v1, legacy sdk, authentication, kinde provider, api endpoints, migration
developer-tools, sdks, nextjs, backend

This SDK is for developers already using the Next.js Pages Router SDK. This document is out of date for new users, use this document instead: [Next.js Pages Router](/developer-tools/sdks/backend/nextjs-prev-sdk/). ## Next.js 13 and App Router support We highly recommend using our dedicated [Next.js App Router SDK](/developer-tools/sdks/backend/nextjs-sdk/) with App Router instead of this one. Whilst technically this SDK is compatible with Next.js 13, it isn’t optimal. It leverages the `use client;` escape hatch, which we don’t love. It also requires a single API file to be stored in the legacy `pages` directory. ## **Installation** <PackageManagers pkg="@kinde-oss/kinde-auth-nextjs@1" /> ## **Set callback URLs** 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example [`http://localhost:3000/api/auth/kinde_callback`](http://localhost:3000/api/auth/kinde_callback) - Allowed logout redirect URLs - for example `http://localhost:3000` 3. Select **Save**. ## **Environments** If you would like to use our Environments feature as part of your development process. You will need to create them first [within your Kinde account](/build/environments/environments/). In this case you would use the Environment subdomain in the code block above. ## **Configuring your app** ### **Environment variables** Put these variables in your .env file. You can find these variables on your Kinde Settings -> App keys page. - `KINDE_SITE_URL` - where your app is running - `KINDE_ISSUER_URL` - your kinde domain - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out. Make sure this URL is under your allowed logout redirect URLs. - `KINDE_POST_LOGIN_REDIRECT_URL` - where you want users to be redirected to after authenticating. - `KINDE_CLIENT_ID` - you can find this on the Application details page - `KINDE_CLIENT_SECRET` - you can find this on the Application details page ```jsx KINDE_SITE_URL=http://localhost:3000 KINDE_ISSUER_URL=https://your_kinde_domain.kinde.com KINDE_POST_LOGOUT_REDIRECT_URL=http://localhost:3000 KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:3000/dashboard KINDE_CLIENT_ID=your_kinde_client_id KINDE_CLIENT_SECRET=your_kinde_client_secret ``` ### **API endpoints** Create the following file `/pages/api/auth/[...kindeAuth].js` inside your Next.js project. Inside the file `[...kindeAuth].js` put this code: ```jsx import {handleAuth} from "@kinde-oss/kinde-auth-nextjs"; export default handleAuth(); ``` This will handle Kinde Auth endpoints in your Next.js app. - `/api/auth/me` - this endpoint will get user information - `/api/auth/login` - will redirect you to login at the KindeAuth server - `/api/auth/logout` - will log you out of the app - `/api/auth/register` - will redirect you to register at the KindeAuth server. Our SDK relies on this file existing in this location specified above. This includes Next.js 13 projects. ## **Integrate with your app** ### **Kinde Provider** Kinde uses a React Context Provider to maintain its internal state in your application. Import the `KindeProvider` component and wrap your application in it. **Next.js 13:** we suggest you include this in `app/layout.tsx` ```jsx // Next.js 13 "use client"; import { KindeProvider } from "@kinde-oss/kinde-auth-nextjs"; import Auth from "./auth"; export default function RootLayout({ children, }: { children: React.ReactNode; }) { return ( <KindeProvider> <html lang="en"> <body> <Auth>{children}</Auth> </body> </html> </KindeProvider> ); } ``` In the example above, there is a custom Auth component which handles routing depending on if the user is authenticated. Here is an example [Auth component](https://github.com/kinde-starter-kits/nextjs-starter-kit/blob/0ce95ff775677697b5eafd096469cc6007f2334c/src/app/auth.tsx) from our Starter Kit. **Next.js 12 and below:** we suggest you include this in the root file of your application in `_app.js` ```jsx // Next.js 12 and below import {KindeProvider} from "@kinde-oss/kinde-auth-nextjs"; function MyApp({Component, pageProps}) { return ( <KindeProvider> <Component {...pageProps} /> </KindeProvider> ); } export default MyApp; ``` ## Sign up and sign in The SDK ships with predefined API routes to generate the auth urls for sign up and sign in. **Next.js 13** Link prefetching causes issues with preflight options, so we need to use standard `<a>` tags for our links. So the build doesn’t break you’ll want to disable the linting that comes with Next as per the sample below: ```jsx // Next.js 13 "use client"; export default function MainNav() { return ( <ul> <li> {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href="/api/auth/login">Sign in</a> </li> <li> {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href="/api/auth/register">Sign up</a> </li> </ul> ); } ``` **Next.js 12 and below** You can use the `<Link>` component that ships with earlier versions of Next. ```jsx // Next.js 12 and below import Link from "next/link"; export default function MainNav() { return ( <ul> <li> <Link href="/api/auth/login"> <a>Sign in</a> </Link> </li> <li> <Link href="/api/auth/register"> <a>Sign up</a> </Link> </li> </ul> ); } ``` ## Log out This is implemented in much the same way as signing up or signing in. An API route is provided for you ```jsx // Next.js 13 {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href="/api/auth/logout"> Sign out </a> // Next.js 12 or below <Link href="/api/auth/logout"> <a>Sign out</a> </Link> ``` ### Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ## **View user profile** You can get an authorized user’s profile from any component using the Kinde Next.js hoo ```jsx import {useKindeAuth} from "@kinde-oss/kinde-auth-nextjs"; const SayHello = () => { const {user} = useKindeAuth(); return <p>Hi {user.given_name}!</p>; }; ``` To be on the safe side we have also provided `isAuthenticated` and `isLoading` state to prevent rendering errors. ```jsx "use client"; import { useKindeAuth } from "@kinde-oss/kinde-auth-nextjs"; const UserProfile = () => { const { user, isAuthenticated, isLoading } = useKindeAuth(); if (isLoading) { return <p>Loading</p>; } return ( { isAuthenticated ? <div> <h2>{user.given_name}</h2> <p>{user.email}</p> </div> : <p>Please sign in or register!</p> } ); }; ``` ## Call your API The `getToken` method lets you to securely call your API and pass the bearer token to validate that your user is authenticated. ```jsx const {getToken} = useKindeAuth(); const fetchData = async () => { try { const accessToken = await getToken(); const res = await fetch(`<your-api>`, { headers: { Authorization: `Bearer ${accessToken}` } }); const {data} = await res.json(); console.log({data}); } catch (err) { console.log(err); } }; ``` We recommend using JWT verification middleware on your back end to verify the token and protect your endpoints. ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be set against `KINDE_AUDIENCE` in your environment variables. The audience of a token is the intended recipient of the token. ```jsx // .env file KINDE_AUDIENCE = your_audience; ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## **User Permissions** Once a user has been verified as login in, your product/application will be returned the JWT token with an array of permissions for that user. You will need to configure your product/application to read permissions and unlock the respective functions. You set Permissions in your Kinde account (see help article), the below is an example set of permissions. ```json "permissions":[ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks ] ``` We provide helper functions to more easily access permissions: ```jsx const {getPermission, getPermissions} = useKindeAuth(); getPermission("create:todos"); // {orgCode: "org_1234", isGranted: true} getPermissions(); // {orgCode: "org_1234", permissions: ["create:todos", "update:todos", "read:todos"]} ``` A practical example in code might look something like: ```jsx { getPermission("create:todos").isGranted ? <button>Create todo</button> : null; } ``` ## **Feature flags** When a user signs in the Access token your product/application receives contains a custom claim called `feature_flags` which is an object detailing the feature flags for that user. You can set feature flags in your Kinde account. Here’s an example. ```jsx feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ``` In order to minimize the payload in the token we have used single letter keys / values where possible. The single letters represent the following: `t` = `type` `v` = `value` `s` = `string` `b` = `boolean` `i` = `integer` We provide helper functions to more easily access feature flags: ```jsx /** * Get a flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {obj} [defaultValue] - A fallback value if the flag isn't found. * @param {'s'|'b'|'i'|undefined} [flagType] - The data type of the flag (integer / boolean / string). * @return {object} Flag details. */ const { getFlag } = useKindeAuth(); /* Example usage */ getFlag('theme'); /*{ // "code": "theme", // "type": "string", // "value": "pink", // "is_default": false // whether the fallback value had to be used */} getFlag('create_competition', {defaultValue: false}); /*{ "code": "create_competition", "value": false, "is_default": true // because fallback value had to be used }*/ ``` A practical example in code might look something like: ```jsx const {getFlag} = useKindeAuth(); { getFlag("create_competition").value ? <button>Create competition</button> : null; } ``` We also require wrapper functions by type which should leverage `getFlag` above. Booleans: ```jsx /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {bool} [defaultValue] - A fallback value if the flag isn't found. * @return {bool} */ const {getBooleanFlag} = useKindeAuth(); /* Example usage */ getBooleanFlag("is_dark_mode"); // true getBooleanFlag("is_dark_mode", false); // true getBooleanFlag("new_feature", false); // false (flag does not exist so falls back to default) ``` Strings and integers work in the same way as booleans above: ```jsx /** * Get a string flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {string} [defaultValue] - A fallback value if the flag isn't found. * @return {string} */ const {getStringFlag} = useKindeAuth(); /** * Get an integer flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {int} [defaultValue] - A fallback value if the flag isn't found. * @return {int} */ const {getIntegerFlag} = useKindeAuth(); ``` A practical example in code might look something like: ```jsx const {getBooleanFlag, getStringFlag} = useKindeAuth(); { getBooleanFlag("create_competition") ? ( <button className={`theme-${getStringFlag("theme")}`}>Create competition</button> ) : null; } ``` ## **Organizations** ### **Creating an organization** To have a new organization created within your application, you will need to run a similar function to below: **Next.js 13** ```jsx // Next.js 13 {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href={`/api/auth/create_org?org_name=${<org_name>}`}> Create org </a> ``` **Next.js 12 and below** ```jsx // Next.js 12 and below <Link href={{ pathname: "/api/auth/create_org", query: { org_name: "Organization name" } }} > Create org </Link> ``` ### Register and log in users to organizations Every organization in Kinde has a unique code. To sign up a new user into a particular organization you will need to pass through this code in the `register` method. (See where to find it). **Next.js 13** ```jsx // Next.js 13 {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href={`/api/auth/register?org_code=${<org_code>}`}> Create org </a> ``` **Next.js 12 and below** ```jsx // Next.js 12 and below <Link href={{ pathname: "/api/auth/register", query: { org_code: "org_af9078366f4" } }} > Register org </Link> ``` This code should also be passed along with the `login` method if you wish for a user to be logged into a specific organization. **Next.js 13** ```jsx // Next.js 13 {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href={`/api/auth/login?org_code=${<org_code>}`}> Sign in </a> ``` **Next.js 12 and below** ```jsx // Next.js 12 and below <Link href={{ pathname: "/api/auth/login", query: { org_code: "org_af9078366f4" } }} > Sign in to Org </Link> ``` For general information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## Customising the API path If your Next.js application uses a custom base path for your API. The default path is `/api/auth` but to override this setting you can change this in your .`env` file as follows: ```bash KINDE_AUTH_API_PATH="/my/custom/path ``` ## Kinde Management API You need to enable the application’s access to the Kinde Management API. You can do this in Kinde by going to **Settings > APIs > Kinde Management API** and then toggling on your Next.js application under the **Applications** tab. To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) ### Troubleshooting **`undefined`** **cannot be serialized as JSON** This happens when the API returns an object with a property that is undefined and we try to return that object from `getServerSideProps`. You can use this workaround to avoid this error: ```jsx ... const users = await client.usersApi.getUsers(); return { props: { users: JSON.parse(JSON.stringify(users)) } } ... ``` ## Persisting app state If you want your project to remember which url your user was intending to visit before they were asked to authenticate, you can pass an additional parameter in the `/login` and `/register` links. After the user has completed authentication at your defined callback url they will be redirected to the path you define here. This value does not need to be added to your allowed callback urls in Kinde. **Next.js 13** ```jsx // Next.js 13 { /* eslint-disable-next-line @next/next/no-html-link-for-pages */ } <a href="api/auth/login?post_login_redirect_url=/dashboard">Sign in</a>; ``` **Next.js 12 and below** ```jsx // Next.js 12 and below <Link href={{ pathname: "/api/auth/login", query: { post_login_redirect_url: "/dashboard" } }} > Sign in </Link> ``` Note: the value of `post_login_redirect_url` should either be a url on the same origin or a relative path. If you need any assistance with getting Kinde connected reach out to us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Next.js App Router SDK

> Complete guide for Next.js App Router SDK including installation, configuration, middleware setup, route protection, and authentication integration for Next.js 13+ applications.

Next.js SDK, App Router, Server Side Components, middleware, authentication, route protection, environment variables
developer-tools, sdks, nextjs, backend

This SDK is for Next.js version 13+ and uses Server Side Components and App Router. New to Kinde? [Get started here](/get-started/guides/first-things-first/) <Aside> If you’re using version 1 see [Next.js App Router V1](/developer-tools/sdks/backend/nextjs-sdkv1/) If you’re using the pages router see [Next.js Pages Router](/developer-tools/sdks/backend/nextjs-prev-sdk/) </Aside> ## Install for a new project The easiest way to get started is to use the [Next.js starter kit](https://github.com/kinde-starter-kits/kinde-nextjs-app-router-starter-kit), and [watch a demo video](https://www.youtube.com/watch?v=oq3o00E6Xys). ## **Install for an existing project** <PackageManagers pkg="@kinde-oss/kinde-auth-nextjs" /> ## **Set callback URLs** 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example `http://localhost:3000/api/auth/kinde_callback` - Allowed logout redirect URLs - for example `http://localhost:3000` 3. Select **Save**. ## **Configure environment variables** Put these variables in a `.env.local` file in the root of your Next.js app. You can find these variables on your Kinde **Settings > Applications > [Your app] > View details** page. - `KINDE_CLIENT_ID` - Your business’s unique ID on Kinde - `KINDE_CLIENT_SECRET` - Your business’s secret key (do not share) - `KINDE_ISSUER_URL` - your kinde domain - `KINDE_SITE_URL` - where your app is running - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out. Make sure this URL is under your allowed logout redirect URLs. - `KINDE_POST_LOGIN_REDIRECT_URL` - where you want users to be redirected to after authenticating. - `KINDE_AUDIENCE` - optional - a whitespace separated list of audiences to populate the `aud` claim in the token. Replace the information in the example with your own information. You might also set different URLs depending where your project is running. They need to match the callback URLs you entered in Kinde, above. ```shell KINDE_CLIENT_ID=<your_kinde_client_id> KINDE_CLIENT_SECRET=<your_kinde_client_secret> KINDE_ISSUER_URL=https://<your_kinde_subdomain>.kinde.com KINDE_SITE_URL=http://localhost:3000 KINDE_POST_LOGOUT_REDIRECT_URL=http://localhost:3000 KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:3000/dashboard ``` ## **Set up Kinde Auth Route Handlers** Create the following file `app/api/auth/[kindeAuth]/route.js` inside your Next.js project. Inside the file `route.js` put this code: ```jsx import {handleAuth} from "@kinde-oss/kinde-auth-nextjs/server"; export const GET = handleAuth(); ``` This will handle Kinde Auth endpoints in your Next.js app. **Important!** Our SDK relies on this file existing in this location specified above. ## **Customising Kinde Auth API paths** The default path for the Kinde Auth API is `/api/auth`. If your Next.js application uses a custom base path for your API, you can override this setting by setting the following variable in your `.env` file: ```bash KINDE_AUTH_API_PATH="/my/custom/path ``` You can also customise the Kinde Auth API sub-paths by setting the following variables in your `.env` file: - `KINDE_AUTH_LOGIN_ROUTE` - defaults to `login` - `KINDE_AUTH_LOGOUT_ROUTE` - defaults to `logout` - `KINDE_AUTH_REGISTER_ROUTE` - defaults to `register` - `KINDE_AUTH_CREATEORG_ROUTE` - defaults to `create_org` - `KINDE_AUTH_HEALTH_ROUTE` - defaults to `health` - `KINDE_AUTH_SETUP_ROUTE` - defaults to `setup` #### **Example** Given the following `.env` file: ```bash KINDE_AUTH_API_PATH="/my/custom/path KINDE_AUTH_LOGIN_ROUTE="app_login ``` The Kinde login route for your application will be `/my/custom/path/app_login`. ## **Set up middleware** Middleware is used to protect routes in your Next.js app, and is a requirement for a seamless authentication experience. We provide a `withAuth` helper that will protect routes covered by the matcher. If the user is not authenticated then they are redirected to login and once they have logged in they will be redirected back to the protected page which they should now have access to. We require this middleware to run on all routes beside Next.js internals and static files. The provided matcher will do this for you. This means that by default, all routes will be protected. You must opt-out public routes - see [opting routes out of middleware protection](#opting-routes-out-of-middleware-protection) for more information. <Aside> Want to learn more about middleware? Check out the [Next.js middleware docs](https://nextjs.org/docs/app/building-your-application/routing/middleware). </Aside> #### **Middleware configuration** Create a `middleware.ts` file in your project's root directory and add the following code: ```ts import { withAuth } from "@kinde-oss/kinde-auth-nextjs/middleware"; export default function middleware(req) { return withAuth(req); } export const config = { matcher: [ // Run on everything but Next internals and static files '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)', ] }; ``` #### **Route protection with callback function after authorization** You can use the `withAuth` helper as shown below with a `middleware` callback function which has access to the `req.kindeAuth` object that exposes the token and user data. ```ts import {withAuth} from "@kinde-oss/kinde-auth-nextjs/middleware"; export default withAuth(async function middleware(req) { console.log("look at me", req.kindeAuth); }); export const config = { matcher: [ '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)', ] }; ``` #### **Opting routes out of middleware protection** As the middleware matcher is set to protect all routes, you can opt routes out of middleware protection by adding them to the `publicPaths` array. ```ts import { withAuth } from "@kinde-oss/kinde-auth-nextjs/middleware"; export default withAuth( async function middleware(req) { }, { // Middleware still runs on all routes, but doesn't protect the blog route publicPaths: ["/blog"], } ); export const config = { matcher: [ '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)', ], } ``` #### **Additional middleware options** There are options that can be passed into the middleware function to configure its functionality. - `isReturnToCurrentPage` - redirect the user back to the page they were trying to access - `loginPage` - define the path of the login page (where the users are redirected to when not authenticated) - `publicPaths` - define the public paths - `isAuthorized` - define the criteria for authorization ```ts import { withAuth } from "@kinde-oss/kinde-auth-nextjs/middleware"; export default withAuth( async function middleware(req) { console.log("look at me", req.kindeAuth); }, { isReturnToCurrentPage: true, loginPage: "/login", publicPaths: ["/public", '/more'], isAuthorized: ({token}) => { // The user will be considered authorized if they have the permission 'eat:chips' return token.permissions.includes("eat:chips"); } } ); export const config = { matcher: [ '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)', ], } ``` ## **Set up the Kinde Auth Provider** Wrap your app in the Kinde Auth Provider. This will give you access to the Kinde Auth data in your app and will ensure that the tokens are refreshed when needed. Create a file `AuthProvider.tsx` in your app directory. ```jsx // AuthProvider.tsx "use client"; import {KindeProvider} from "@kinde-oss/kinde-auth-nextjs"; export const AuthProvider = ({children}) => { return <KindeProvider>{children}</KindeProvider>; }; ``` Then wrap your app in the `AuthProvider` component. ```jsx // layout.tsx ... import {AuthProvider} from './AuthProvider'; export const metadata = { title: 'Kinde Auth', description: 'Kinde with Next.js App Router' }; export default async function RootLayout({ children }: { children: React.ReactNode; }) { return ( <AuthProvider> <html lang="en"> // Your app code here </html> </AuthProvider> ); } ``` ## Authentication ### Sign up and sign in The SDK ships with `<LoginLink>` and `<RegisterLink>` components which can be used to start the auth flow. ```jsx import {RegisterLink, LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; ... <LoginLink>Sign in</LoginLink> <RegisterLink>Sign up</RegisterLink> ``` ### Redirecting after authentication **Static redirect** If you want to redirect users to a certain page after logging in, you can set the `KINDE_POST_LOGIN_REDIRECT_URL` environment variable in your `.env.local` file. **Dynamic redirect** You can also set a `postLoginRedirectURL` parameter to tell us where to redirect after authenticating. ```jsx import {RegisterLink, LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; ... <LoginLink postLoginRedirectURL="/dashboard">Sign in</LoginLink> <RegisterLink postLoginRedirectURL="/welcome">Sign up</RegisterLink> ``` This appends `post_login_redirect_url` to the search params when redirecting to Kinde Auth. You can achieve the same result as above, like this: ```jsx import { redirect } from "next/navigation"; ... redirect('/api/auth/login?post_login_redirect_url=/dashboard') ... ``` ### Logout This is implemented in much the same way as signing up or signing in. A component is provided for you. ```jsx import {LogoutLink} from "@kinde-oss/kinde-auth-nextjs/components"; ... <LogoutLink>Log out</LogoutLink> ``` ## Kinde Auth data - Server You can get an authorized user’s Kinde Auth data from any server component using the `getKindeServerSession` helper. | Method | Description | | ----------------------------------------------- | ----------------------------------------------------- | | [`isAuthenticated`](#isauthenticated) | Check if the user is authenticated | | [`getUser`](#getuser) | Get the current user's details | | [`getOrganization`](#getorganization) | Get the current user's organization | | [`getUserOrganizations`](#getuserorganizations) | Get all the organizations the current user belongs to | | [`getPermission`](#getpermission) | Check if the current user has a permission | | [`getPermissions`](#getpermissions) | Get the current user's permissions | | [`getFlag`](#getflag) | Get a feature flag | | [`getBooleanFlag`](#getbooleanflag) | Get a boolean feature flag | | [`getIntegerFlag`](#getintegerflag) | Get an integer feature flag | | [`getStringFlag`](#getstringflag) | Get a string feature flag | | [`getAccessToken`](#getaccesstoken) | Get the decoded access token | | [`getAccessTokenRaw`](#getaccesstokenraw) | Get the access token | | [`getIdToken`](#getidtoken) | Get the decoded ID token | | [`getIdTokenRaw`](#getidtokenraw) | Get the ID token | | [`getClaim`](#getclaim) | Get a claim from either token | ### `isAuthenticated` Check if the user is authenticated. #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {isAuthenticated} = getKindeServerSession(); const isUserAuthenticated = await isAuthenticated(); ``` #### Returns ```typescript true; ``` ### `getUser` Get the logged in user's details. #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getUser} = getKindeServerSession(); const user = await getUser(); console.log(user); ``` #### Returns ```json { "id": "kp_123", "email": "example@email.com", "family_name": "Example", "given_name": "User", "picture": null, "username": "ExampleUsername", "phone_number": "1234567890", "properties": { "usr_city": "", "usr_industry": "", "usr_job_title": "", "usr_middle_name": "", "usr_postcode": "", "usr_salutation": "", "usr_state_region": "", "usr_street_address": "", "usr_street_address_2": "" } } ``` ### `getOrganization` Get the current user’s organization #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getOrganization} = getKindeServerSession(); const org = await getOrganization(); console.log(org); ``` #### Returns ```json { "orgCode": "org_123", "orgName": "Deafault Org", "properties": { "org_city": "", "org_country": "", "org_industry": "", "org_postcode": "", "org_state_region": "", "org_street_address": "", "org_street_address_2": "" } } ``` ### `getUserOrganizations` Get all the organizations the current user belongs to #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getUserOrganizations} = getKindeServerSession(); const userOrgs = await getUserOrganizations(); console.log(userOrgs); ``` #### Returns ```json { "orgCodes": ["org_123", "org_456"], "orgs": [ { "code": "org_123", "name": "Deafault Org" }, { "code": "org_456", "name": "Another Org" } ] } ``` ### `getPermission` Check if the current user has a permission. | Parameter | Type | Description | | --------- | -------- | ---------------------------- | | code | `string` | The permission code to check | #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getPermission} = getKindeServerSession(); const canEatTacos = await getPermission("eat:tacos"); console.log(canEatTacos); ``` #### Returns ```json { "isGranted": true, "orgCode": "org_123" } ``` ### `getPermissions` Get the current user’s permissions. #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getPermissions} = getKindeServerSession(); const permissions = await getPermissions(); console.log(permissions); ``` #### Returns ```json { "permissions": ["eat:tacos", "read:books"], "orgCode": "org_123" } ``` ### `getFlag` Get a feature flag | Parameter | Type | Description | | ------------ | --------------------------------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `boolean` \| `string` \| `number` | The default value to return if the flag is not set | | type | `enum` (`b` \| `s` \| `i`) | The type of the flag | #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getFlag} = getKindeServerSession(); const billingFlag = await getFlag("billing", false, "b"); console.log(billingFlag); ``` #### Returns ```json { "code": "billing", "type": "boolean", "value": true, "defaultValue": false, "is_default": false } ``` ### `getBooleanFlag` Get a boolean feature flag | Parameter | Type | Description | | ------------ | --------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `boolean` | The default value to return if the flag is not set | #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getBooleanFlag} = getKindeServerSession(); const billingFlag = await getBooleanFlag("billing", false); console.log(billingFlag); ``` #### Returns ```json true; ``` ### `getIntegerFlag` Get a boolean feature flag | Parameter | Type | Description | | ------------ | --------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `boolean` | The default value to return if the flag is not set | #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getIntegerFlag} = getKindeServerSession(); const billingVersion = await getIntegerFlag("billingVersion", 0); console.log(billingVersion); ``` #### Returns ```json 2 ``` ### `getStringFlag` Get a string feature flag | Parameter | Type | Description | | ------------ | -------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `string` | The default value to return if the flag is not set | #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getStringFlag} = getKindeServerSession(); const theme = await getStringFlag("theme", "system"); console.log(theme); ``` #### Returns ```json "light ``` ### `refreshTokens` Refresh tokens to get up-to-date Kinde data #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; import {someUpdateFunction} from "@/app/actions"; const {refreshTokens} = getKindeServerSession(); await someUpdateFunction({ param_1: "value_1", param_2: "value_2" }); await refreshTokens(); ``` ### `getAccessToken` Get the decoded access token #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getAccessToken} = getKindeServerSession(); const accessToken = await getAccessToken(); console.log(accessToken); ``` #### Returns ```json { "aud": ["your-api"], "azp": 1234567890, "email": "example@email.com", "exp": 1234567890, "feature_flags": { "isonboardingcomplete": { "t": "b", "v": false } }, "iat": 1234567890, "iss": "https://your-kinde-subdomain.kinde.com", "jti": "7802e2d2-asdf-431e-bc72-5ed95asdf475d", "org_code": "org_123", "org_name": "Default Org", "organization_properties": { "kp_org_city": {} }, "permissions": ["create:template"], "roles": [ { "id": "018ee9aa-f92b-83fc-1d40-1234567890", "key": "admin", "name": "Admin" } ], "scp": ["openid", "profile", "email", "offline"], "sub": "kp_6123456789009876", "user_properties": { "kp_usr_city": {} } } ``` ### `getAccessTokenRaw` Get the access token #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getAccessTokenRaw} = getKindeServerSession(); const accessToken = await getAccessTokenRaw(); console.log(accessToken); ``` #### Returns ```json eyJhxxx.eyJhdxxx.A4djjxxx ``` ### `getIdToken` Get the decoded ID token #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getIdToken} = getKindeServerSession(); const idToken = await getIdToken(); console.log(idToken); ``` #### Returns ```json { "at_hash": "ZY6jx1SGjzgkHGJ_2Jabcd", "aud": ["feb8e697b967466eacb96d26c5ca0e12"], "auth_time": 1234567890, "azp": "feb8e099xxx", "email": "example@email.com", "email_verified": true, "exp": 123456789, "ext_provider": { "claims": { "connection_id": "bcc486xxx", "email": "example@email.com", "family_name": "User", "given_name": "Example", "is_confirmed": true, "picture": "https://lh3.googleusercontent.com/a/ACgxxx", "profile": { "email": "example@email.com", "family_name": "User", "given_name": "Example", "id": "1234567890", "name": "Example user", "picture": "https://lh3.googleusercontent.com/a/ACgxxx", "verified_email": true } }, "connection_id": "bccxxx", "name": "Google" }, "family_name": "User", "given_name": "Example", "iat": 1234567890, "iss": "https://your-kinde-subdomain.kinde.com", "jti": "e7e18303-0ea5-402d-932c-xxx", "name": "Example user", "org_codes": ["org_123"], "organizations": [ { "id": "org_123", "name": "Default Organization" } ], "picture": "https://lh3.googleusercontent.com/a/ACgxxx", "rat": 1234567890, "sub": "kp_1234567890", "updated_at": 1234567890, "user_properties": { "kp_usr_city": {} } } ``` ### `getIdTokenRaw` Get the ID token #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getIdTokenRaw} = getKindeServerSession(); const idToken = await getIdTokenRaw(); console.log(idToken); ``` #### Returns ```json eyJhxxx.eyJhdxxx.A4djjxxx ``` ### `getClaim` Get a claim from either token | Parameter | Type | Description | | --------- | ------------------------------------- | ------------------------------- | | claim | `string` | The claim key | | type | `enum` (`access_token` \| `id_token`) | The token to get the claim from | #### Example ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const {getClaim} = getKindeServerSession(); const username = await getClaim("preferred_username", "id_token"); console.log(idToken); ``` #### Returns ```json "exampleUsername ``` ## Kinde Auth data - Client You can get an authorized user’s Kinde Auth data from any client component using the `useKindeBrowser` helper. | Variable / Method | Description | | ------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------- | | [`isAuthenticated`](#isauthenticated-1) | Get a feature flag | | [`user`](#user--getuser) / [`getUser`](#user--getuser) | The current in user's details | | [`organization`](#organization--getorganization) / [`getOrganization`](#organization--getorganization) | The current user’s organization | | [`userOrganizations`](#userorganizations--getuserorganizations) / [`getUserOrganizations`](#userorganizations--getuserorganizations) | All the organizations the current user belongs to | | [`getPermission`](#getpermission-1) | Check if the current user has a permission | | [`permissions`](#permissions--getpermissions) / [`getPermissions`](#permissions--getpermissions) | The current user’s permissions | | [`getFlag`](#getflag-1) | Get the access token | | [`getBooleanFlag`](#getbooleanflag-1) | Get the access token | | [`getIntegerFlag`](#getintegerflag-1) | Get the access token | | [`getStringFlag`](#getstringflag-1) | Get the access token | | [`refreshData`](#refreshdata) | Refresh tokens to get up-to-date Kinde data | | [`accessToken`](#accesstoken--getaccesstoken) / [`getAccessToken`](#accesstoken--getaccesstoken) | Check if the user is authenticated | | [`accessTokenRaw`](#accesstokenraw--getaccesstokenraw) / [`getAccessTokenRaw`](#accesstokenraw--getaccesstokenraw) | Get the current user's details | | [`idToken`](#idtoken--getidtoken) / [`getIdToken`](#idtoken--getidtoken) | Get all the organizations the current user belongs to | | [`idTokenRaw`](#idtokenraw--getidtokenraw) / [`getIdTokenRaw`](#idtokenraw--getidtokenraw) | Check if the current user has a permission | | [`isLoading`](#isloading) | Is Kinde data loading | | [`error`](#error) | Error message if there is an error | **Tip**: Use `isLoading` to ensure the data is up to date. You can return a loading spinner or something similar if you want. ### `isAuthenticated` Check if the user is authenticated. #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {isAuthenticated} = useKindeBrowserClient(); console.log(isAuthenticated); ``` #### Returns ```typescript true; ``` ### `user` / `getUser` Get the logged in user's details. #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {user, getUser} = useKindeBrowserClient(); const alsoUser = getUser(); console.log(user); ``` #### Returns ```json { "id": "kp_123", "email": "example@email.com", "family_name": "Example", "given_name": "User", "picture": null, "username": "ExampleUsername", "phone_number": "1234567890", "properties": { "usr_city": "", "usr_industry": "", "usr_job_title": "", "usr_middle_name": "", "usr_postcode": "", "usr_salutation": "", "usr_state_region": "", "usr_street_address": "", "usr_street_address_2": "" } } ``` ### `organization` / `getOrganization` Get the current user’s organization #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {organization, getOrganization} = useKindeBrowserClient(); const org = getOrganization(); console.log(organization, org); ``` #### Returns ```json { "orgCode": "org_123", "orgName": "Deafault Org", "properties": { "org_city": "", "org_country": "", "org_industry": "", "org_postcode": "", "org_state_region": "", "org_street_address": "", "org_street_address_2": "" } } ``` ### `userOrganizations` / `getUserOrganizations` Get all the organizations the current user belongs to #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {userOrganizations, getUserOrganizations} = useKindeBrowserClient(); const userOrgs = getUserOrganizations(); console.log(userOrganizations, userOrgs); ``` #### Returns ```json { "orgCodes": ["org_123", "org_456"], "orgs": [ { "code": "org_123", "name": "Deafault Org" }, { "code": "org_456", "name": "Another Org" } ] } ``` ### `getPermission` Check if the current user has a permission. | Parameter | Type | Description | | --------- | -------- | ---------------------------- | | code | `string` | The permission code to check | #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {getPermission} = useKindeBrowserClient(); const canEatTacos = getPermission("eat:tacos"); console.log(canEatTacos); ``` #### Returns ```json { "isGranted": true, "orgCode": "org_123" } ``` ### `permissions` / `getPermissions` Get the current user’s permissions. #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {permissions, getPermissions} = useKindeBrowserClient(); const perms = getPermissions(); console.log(permissions, permis); ``` #### Returns ```json { "permissions": ["eat:tacos", "read:books"], "orgCode": "org_123" } ``` ### `getFlag` Get a feature flag | Parameter | Type | Description | | ------------ | --------------------------------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `boolean` \| `string` \| `number` | The default value to return if the flag is not set | | type | `enum` (`b` \| `s` \| `i`) | The type of the flag | #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {getFlag} = useKindeBrowserClient(); const billingFlag = getFlag("billing", false, "b"); console.log(billingFlag); ``` #### Returns ```json { "code": "billing", "type": "boolean", "value": true, "defaultValue": false, "is_default": false } ``` ### `getBooleanFlag` Get a boolean feature flag | Parameter | Type | Description | | ------------ | --------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `boolean` | The default value to return if the flag is not set | #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {getBooleanFlag} = useKindeBrowserClient(); const billingFlag = getBooleanFlag("billing", false); console.log(billingFlag); ``` #### Returns ```json true; ``` ### `getIntegerFlag` Get a boolean feature flag | Parameter | Type | Description | | ------------ | --------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `boolean` | The default value to return if the flag is not set | #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {getIntegerFlag} = useKindeBrowserClient(); const billingVersion = getIntegerFlag("billingVersion", 0); console.log(billingVersion); ``` #### Returns ```json 2 ``` ### `getStringFlag` Get a string feature flag | Parameter | Type | Description | | ------------ | -------- | -------------------------------------------------- | | code | `string` | The flag code to check | | defaultValue | `string` | The default value to return if the flag is not set | #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {getStringFlag} = useKindeBrowserClient(); const theme = getStringFlag("theme", "system"); console.log(theme); ``` #### Returns ```json "light ``` ### `refreshData` Refresh tokens to get up-to-date Kinde data #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; import {someUpdateFunction} from "@/app/actions"; const {refreshData} = useKindeBrowserClient(); await someUpdateFunction({ param_1: "value_1", param_2: "value_2" }); await refreshData(); ``` ### `accessToken` / `getAccessToken` Get the decoded access token #### Example ```jsx "use client"; import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {accessToken, getAccessToken} = useKindeBrowserClient(); const aTok = getAccessToken(); console.log(accessToken, aTok); ``` #### Returns ```json { "aud": ["your-api"], "azp": 1234567890, "email": "example@email.com", "exp": 1234567890, "feature_flags": { "isonboardingcomplete": { "t": "b", "v": false } }, "iat": 1234567890, "iss": "https://your-kinde-subdomain.kinde.com", "jti": "7802e2d2-asdf-431e-bc72-5ed95asdf475d", "org_code": "org_123", "org_name": "Default Org", "organization_properties": { "kp_org_city": {} }, "permissions": ["create:template"], "roles": [ { "id": "018ee9aa-f92b-83fc-1d40-1234567890", "key": "admin", "name": "Admin" } ], "scp": ["openid", "profile", "email", "offline"], "sub": "kp_6123456789009876", "user_properties": { "kp_usr_city": {} } } ``` ### `accessTokenRaw` / `getAccessTokenRaw` Get the access token #### Example ```jsx import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {accessTokenRaw, getAccessTokenRaw} = useKindeBrowserClient(); const aTokRaw = getAccessTokenRaw(); console.log(accessTokenRaw, aTokRaw); ``` #### Returns ```json eyJhxxx.eyJhdxxx.A4djjxxx ``` ### `idToken` / `getIdToken` Get the decoded ID token #### Example ```jsx import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {idToken, getIdToken} = useKindeBrowserClient(); const idTok = getIdToken(); console.log(idToken, idTok); ``` #### Returns ```json { "at_hash": "ZY6jx1SGjzgkHGJ_2Jabcd", "aud": ["feb8e697b967466eacb96d26c5ca0e12"], "auth_time": 1234567890, "azp": "feb8e099xxx", "email": "example@email.com", "email_verified": true, "exp": 123456789, "ext_provider": { "claims": { "connection_id": "bcc486xxx", "email": "example@email.com", "family_name": "User", "given_name": "Example", "is_confirmed": true, "picture": "https://lh3.googleusercontent.com/a/ACgxxx", "profile": { "email": "example@email.com", "family_name": "User", "given_name": "Example", "id": "1234567890", "name": "Example user", "picture": "https://lh3.googleusercontent.com/a/ACgxxx", "verified_email": true } }, "connection_id": "bccxxx", "name": "Google" }, "family_name": "User", "given_name": "Example", "iat": 1234567890, "iss": "https://your-kinde-subdomain.kinde.com", "jti": "e7e18303-0ea5-402d-932c-xxx", "name": "Example user", "org_codes": ["org_123"], "organizations": [ { "id": "org_123", "name": "Default Organization" } ], "picture": "https://lh3.googleusercontent.com/a/ACgxxx", "rat": 1234567890, "sub": "kp_1234567890", "updated_at": 1234567890, "user_properties": { "kp_usr_city": {} } } ``` ### `idTokenRaw` / `getIdTokenRaw` Get the ID token #### Example ```jsx import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {idTokenRaw, getIdTokenRaw} = useKindeBrowserClient(); const idTokRaw = getIdTokenRaw(); console.log(idTokenRaw, idTokRaw); ``` #### Returns ```json eyJhxxx.eyJhdxxx.A4djjxxx ``` ### `isLoading` Is Kinde data loading #### Example ```jsx import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {user, isLoading} = useKindeBrowserClient(); if (isLoading) return <div>Loading...</div>; return <div>Hello {user.given_name}</div>; ``` #### Returns ```json true ``` ### `error` Error message if there is an error #### Example ```jsx import {useKindeBrowserClient} from "@kinde-oss/kinde-auth-nextjs"; const {user, isLoading, error} = useKindeBrowserClient(); if (isLoading) return <div>Loading...</div>; if (error) return <div>There was an error</div>; return <div>Hello {user.given_name}</div>; ``` #### Returns ```json true ``` ## Protecting routes It’s likely that your application will have both pages that are publicly available and private ones which should only be available to logged in users. There are multiple ways you can protect pages with Kinde Auth. ### Protect routes with Kinde Auth data On the page you want to protect, you can check if the user is authenticated and then handle it right then and there by grabbing the Kinde Auth data. - In **Server Components** you can get the Kinde Auth data by using the `getKindeServerSession` helper - In **Client Components** you can get the Kinde Auth Data using the `useKindeBrowserClient` helper ```jsx // app/protected/page.tsx - Server Component import { LoginLink } from "@kinde-oss/kinde-auth-nextjs/components"; import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server"; export default async function Protected() { const { isAuthenticated } = getKindeServerSession(); return (await isAuthenticated()) ? ( <div> This page is protected - but you can view it because you are authenticated </div> ) : ( <div> This page is protected, please <LoginLink>Login</LoginLink> to view it </div> ); } // app/protected/page.tsx - Client component "use client"; import { useKindeBrowserClient } from "@kinde-oss/kinde-auth-nextjs"; import { LoginLink } from "@kinde-oss/kinde-auth-nextjs/components"; export default function Admin() { const { isAuthenticated, isLoading } = useKindeBrowserClient(); if (isLoading) return <div>Loading...</div>; return isAuthenticated ? ( <div>Admin content</div> ) : ( <div> You have to <LoginLink>Login</LoginLink> to see this page </div> ); } ``` In the example above, we show different content based on whether or not the user is authenticated. If you want to automatically send the user to the sign in screen, you can do something like the following: ```jsx // app/protected/page.tsx - Server Component import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; import {redirect} from "next/navigation"; export default async function Protected() { const {isAuthenticated} = getKindeServerSession(); if (!(await isAuthenticated())) { redirect("/api/auth/login"); } return <div>Protected content</div>; } // app/protected/page.tsx - Client Component // As of right now, this can't be done in Client Components because of how Next.js handles // navigation in client components with prefetching and caching. // But you can still achieve an automatic redirect with middleware ``` If you want the user to be redirected back to that route after signing in, you can set `post_login_redirect_url` in the search params of the redirect. ```jsx if (!(await isAuthenticated())) { redirect("/api/auth/login?post_login_redirect_url=/protected"); } ``` ## Refreshing Kinde data Our middleware will automatically refresh the tokens in your session in the background. Sometimes, you may want to refresh these tokens on demand. An example of this is when you update Kinde data via the UI or with the Management API. To immediately get the most up-to-date Kinde data in your session, use the `refreshData` function provided by `useKindeBrowserClient`. <Aside title="Warning" type="warning"> This utility only works in Next.js 14 and above. Attempting to use it in an older version will result in a warning. Due to limitations in Next.js, refreshing data on demand can only occur from a client component. For more information, see the [Next.js docs](https://nextjs.org/docs/app/api-reference/functions/cookies#understanding-cookie-behavior-in-server-components). </Aside> <Aside title="Important"> The `refreshData` function is an asynchronous server action, and it's important to await it so that you receive immediate access to the latest data. </Aside> ```tsx "use client"; import { useKindeBrowserClient } from "@kinde-oss/kinde-auth-nextjs"; export const UpdatePermissionsButton = () => { const { refreshData, getPermissions } = useKindeBrowserClient(); const handleUpdatePermissions = async () => { // For example purposes, lets say you have an API route that updates the permissions for a user await fetch("/api/user/permissions"); // Then you can refresh the data and have the changes reflected immediately await refreshData(); const newPermissions = getPermissions(); // Do something with the new permissions // ... } return ( <button type="button onClick={handleUpdatePermissions} > Update Permissions </button> ); }; ``` ## Kinde Management API To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) Server Component example: ```typescript import { Roles, Users } from "@kinde/management-api-js"; export default async function Dashboard() { const { roles } = await Roles.getRoles(); const { users } = await Users.getUsers(); return ( <div className="container"> <div className="card start-hero"> <p className="text-body-2 start-hero-intro">Woohoo!</p> <p className="text-display-2"> Your authentication is all sorted. <br /> Build the important stuff. </p> </div> <section className="next-steps-section"> <h2 className="text-heading-1">Next steps for you</h2> </section> <pre>{JSON.stringify(users, null, 2)}</pre> </div> ); } ``` Route Handler example: ```typescript import {NextResponse} from "next/server"; import {Users} from "@kinde/management-api-js"; export async function GET() { const {users} = await Users.getUsers(); return NextResponse.json({users}); } ``` ## Organizations ### Create organizations To create an organization from your app, you can use the `CreateOrgLink` component. ```jsx import {CreateOrgLink} from "@kinde-oss/kinde-auth-nextjs/components"; <CreateOrgLink orgName="Hurlstone">Create org</CreateOrgLink>; ``` ### Sign in to organizations You can have your users sign in to a specific organization by setting the `orgCode` param in the `LoginLink` and `RegisterLink` components. ```jsx import {LoginLink, RegisterLink} from "@kinde-oss/kinde-auth-nextjs/components"; <LoginLink orgCode="org_7392cf35a1e">Login</LoginLink> <RegisterLink orgCode="org_7392cf35a1e">Register</RegisterLink> ``` If the `orgCode` is not specified and the user belongs to multiple organizations, they will be prompted to choose which organization to sign in to during the login or register flow. ## Self Serve Portal To allow your users to be sent to the self-serve portal, you can use the `PortalLink` component. Check here for information on enabling [self-serve portal for Organizations](https://docs.kinde.com/build/self-service-portal/self-serve-portal-for-orgs/). Check here for information on enabling [self-serve portal for users](https://docs.kinde.com/build/self-service-portal/self-serve-portal-for-users/). To use our self-serve portal API please see [Get self-serve portal link](https://docs.kinde.com/kinde-apis/frontend/). ```jsx import {PortalLink} from "@kinde-oss/kinde-auth-nextjs/components"; <PortalLink>Portal Link Name</PortalLink> ``` ### subNav The `subNav=""` property allows you to set the area of the portal you want the user to land on. By default, it will send users to their profile. ```jsx import {PortalLink} from "@kinde-oss/kinde-auth-nextjs/components"; import { PortalPage } from "@kinde/js-utils"; <PortalLink subNav={PortalPage.organizationPaymentDetails}></PortalLink> ``` ### returnUrl The `returnUrl` property is the URL to redirect the user to after they have completed their actions in the portal. The url must be an absolute url to work correctly. ```jsx import {PortalLink} from "@kinde-oss/kinde-auth-nextjs/components"; <PortalLink returnUrl="http://yourdomain.example"></PortalLink> ``` ## Analytics ### UTM tags UTM tags can be used with the `LoginLink` and `RegisterLink` components to track auth traffic from its origin. You can then track the tags on the Analytics dashboard from within the Kinde app. ```jsx import {LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; <LoginLink authUrlParams={{ utm_source: "reddit", utm_medium: "social", utm_campaign: "redjune23", utm_term: "save90", utm_content: "desktop" }} > Login </LoginLink>; ``` ## Internationalization You can set the language you wish your users to see when they hit the login flow by including the `lang` attribute as a part of the `authUrlParams` when using the `LoginLink` and `RegisterLink` components. ```jsx import {LoginLink} from "@kinde-oss/kinde-auth-nextjs/components"; <LoginLink authUrlParams={{ lang: "en-AU" }} > Login </LoginLink>; ``` ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be passed to the Kinde client to request an audience be added to the provided token. ```jsx // .env.local ... KINDE_AUDIENCE=<your-api> ``` You can request multiple audiences by providing a white space separated list ```jsx // .env.local ... KINDE_AUDIENCE=<your-api-1> <your-api-2> ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## Working with subdomains In the case you have a [custom domain](/build/domains/pointing-your-domain/) and you would like to start the authentication flow from a URL like **`auth`**`.mysite.com` and you want to redirect to a URL like **`app`**`.mysite.com` , all you have to do is set the `KINDE_COOKIE_DOMAIN` to match the domain. ```jsx // .env ... KINDE_COOKIE_DOMAIN=.mysite.com ``` If the URL you want to start the authentication flow from and the URL you want to redirect to don’t share the same domain, then this will not work. ## Working with preview URLs Our Kinde Next.js SDK currently requires that these environment variables `KINDE_SITE_URL`, `KINDE_POST_LOGOUT_REDIRECT_URL`, and `KINDE_POST_LOGIN_REDIRECT_URL` are defined, and that the **callback URLs** and **logout redirect URLs** are added to your app in Kinde. To add Vercel’s dynamically generated URLs you can either securely use our API to add them on the fly or you can use [wildcard URLs](/get-started/connect/callback-urls/#wildcards-in-callback-urls). It should be noted that whilst wildcards are more convenient it is not as secure as explicitly adding the url to the allowlist via API as we outline below. Add the following to your `next.config.js`. ```jsx /** @type {import('next').NextConfig} */ const nextConfig = { env: { KINDE_SITE_URL: process.env.KINDE_SITE_URL ?? `https://${process.env.VERCEL_URL}`, KINDE_POST_LOGOUT_REDIRECT_URL: process.env.KINDE_POST_LOGOUT_REDIRECT_URL ?? `https://${process.env.VERCEL_URL}`, KINDE_POST_LOGIN_REDIRECT_URL: process.env.KINDE_POST_LOGIN_REDIRECT_URL ?? `https://${process.env.VERCEL_URL}/dashboard` } }; module.exports = nextConfig; ``` This ensures Vercel uses its generated preview URLs to populate the three Kinde variables. - Make sure the above values match your application (e.g. “/dashboard” for `KINDE_POST_LOGIN_REDIRECT_URL`) - Also make sure variables are not set for the preview environment in your Vercel project. If they are, they will be overridden by the new variables in the `next.config.js` file. ### Add callback URLs and logout redirect URLs to Kinde dynamically Create a script that will run each time a new preview is deployed by Vercel, which will add the newly generated URL to Kinde. You need to create a [machine to machine (M2M)](/developer-tools/kinde-api/connect-to-kinde-api/) application to connect to the [Kinde Management API](/kinde-apis/management/). 1. Create a **Machine to machine (M2M)** app. 1. In Kinde, go to **Settings > Applications** and click on **Add application**. 2. Give your application a name and select **Machine to machine (M2M)**. 3. Select **Save**. 4. On the next screen, take note of the **Client ID** and **Client secret** values and add them to your `.env.local` file as `KINDE_M2M_CLIENT_ID` and `KINDE_M2M_CLIENT_SECRET`. 5. On the same screen, click on **APIs** on the left menu. 6. Authorize your M2M application to access the Kinde Management API by selecting the three dots (`...`) and clicking **Authorize application**. 7. Once the application is authorized, select the three dots (`...`) again and this time select **Manage scopes**. 8. Since we will be adding callback and redirect URLs dynamically via the Kinde Management API, you will need to toggle the switch for `create:application_redirect_uris` and `create:application_logout_uris`. 9. Select **Save**. 2. In your application source code, create a folder at the top level called `scripts`. 3. Within that folder, create a file called `add-urls-to-kinde.js` and add the following code: ```jsx async function getAuthToken() { try { const response = await fetch(`${process.env.KINDE_ISSUER_URL}/oauth2/token`, { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded", Accept: "application/json" }, body: new URLSearchParams({ client_id: process.env.KINDE_M2M_CLIENT_ID, client_secret: process.env.KINDE_M2M_CLIENT_SECRET, grant_type: "client_credentials", audience: `${process.env.KINDE_ISSUER_URL}/api` }) }); if (!response.ok) { throw new Error(`Failed to get auth token: ${response.statusText}`); } const data = await response.json(); return data.access_token; } catch (error) { console.error("Error getting auth token:", error); throw error; } } async function addLogoutUrlToKinde(token) { try { const response = await fetch( `${process.env.KINDE_ISSUER_URL}/api/v1/applications/${process.env.KINDE_CLIENT_ID}/auth_logout_urls`, { method: "POST", headers: { Authorization: `Bearer ${token}`, Accept: "application/json", "Content-Type": "application/json" }, body: JSON.stringify({ urls: [`https://${process.env.VERCEL_URL}`] }) } ); if (!response.ok) { throw new Error(`Failed to add logout URL to Kinde: ${response.statusText}`); } const responseData = await response.json(); console.log(`SUCCESS: Logout URL added to Kinde: ${process.env.VERCEL_URL}`, responseData); } catch (error) { console.error("Failed to add logout URL to Kinde", error); throw error; } } async function addCallbackUrlToKinde(token) { try { const response = await fetch( `${process.env.KINDE_ISSUER_URL}/api/v1/applications/${process.env.KINDE_CLIENT_ID}/auth_redirect_urls`, { method: "POST", headers: { Authorization: `Bearer ${token}`, Accept: "application/json", "Content-Type": "application/json" }, body: JSON.stringify({ urls: [`https://${process.env.VERCEL_URL}/api/auth/kinde_callback`] }) } ); if (!response.ok) { throw new Error(`Failed to add callback URL to Kinde: ${response.statusText}`); } const responseData = await response.json(); console.log( `SUCCESS: Callback URL added to Kinde: ${process.env.VERCEL_URL}/api/auth/kinde_callback`, responseData ); } catch (error) { console.error("Failed to add callback URL to Kinde", error); throw error; } } (async () => { if (process.env.VERCEL == 1) { try { const authToken = await getAuthToken(); await addCallbackUrlToKinde(authToken); await addLogoutUrlToKinde(authToken); } catch (error) { console.error("Script failed:", error); } } })(); ``` <Aside> You can adapt the script above to use our [Kinde Management API JS](https://github.com/kinde-oss/management-api-js) package. Please note that in this case you would have to add this package as a dependency in your project along with a few required environment variables. [See configuration details](https://github.com/kinde-oss/management-api-js?tab=readme-ov-file#installation). </Aside> 4. In your `package.json`, add a `postbuild` script that will run the `/scripts/add-urls-to-kinde.js` file after Vercel builds your app. ```json "scripts": { "dev": "next dev", "build": "next build", "start": "next start", "lint": "next lint", "postbuild": "node ./scripts/add-urls-to-kinde.js" } ``` 5. Commit these changes. The next deploy will add the newly created preview URLs to your Kinde application. ## Health check To check your configuration, the SDK exposes an endpoint with your settings. **Note**: The client secret will indicate only if the secret is set or not set correctly. `/api/auth/health` ```jsx { "apiPath": "/api/auth", "redirectURL": "http://localhost:3000/api/auth/kinde_callback", "postLoginRedirectURL": "http://localhost:3000/dashboard", "issuerURL": "https://<your_kinde_subdomain>.kinde.com", "clientID": "<your_kinde_client_id>", "clientSecret": "Set correctly", "postLogoutRedirectURL": "http://localhost:3000", "logoutRedirectURL": "http://localhost:3000" } ``` ## State not found error ### Solution 1. Confirm that the domain you start the auth flow from is different from the domain you are redirected to after the auth flow is complete. If this is not the case, see the explanation. 2. Dynamically set the KINDE_SITE_URL and `KINDE_POST_LOGIN_REDIRECT_URL` when working with vercel preview domains. If you are using Vercel, you can set the `KINDE_SITE_URL` and `KINDE_POST_LOGIN_REDIRECT_URL` dynamically. ```jsx title="next.config.js const nextConfig = { env: { KINDE_SITE_URL: process.env.KINDE_SITE_URL ?? `https://${process.env.VERCEL_URL}`, KINDE_POST_LOGOUT_REDIRECT_URL: process.env.KINDE_POST_LOGOUT_REDIRECT_URL ?? `https://${process.env.VERCEL_URL}`, KINDE_POST_LOGIN_REDIRECT_URL: process.env.KINDE_POST_LOGIN_REDIRECT_URL ?? `https://${process.env.VERCEL_URL}/dashboard` } }; module.exports = nextConfig; ``` ### Explanation The `State not found error` in production is usually a result of a mismatch between a few variables. - `KINDE_SITE_URL` and/or `KINDE_POST_LOGIN_REDIRECT_URL` - The domain you are on e.g. `your-app-projects.vercel.app` - Callback URL set on the Kinde dashboard If you set `KINDE_SITE_URL=https:// your-app-projects.vercel.app` and `KINDE_POST_LOGIN_REDIRECT_URL=https:// your-app-projects.vercel.app/dashboard`. And you also set your Callback URL to be `your-app-\*.vercel.app/api/auth/kinde_callback`. You should be able to click login and complete the auth flow. However if you start the auth flow from a Vercel preview domain `your-app-PREVIEW-projects.vercel.app` and complete the auth flow, you will be redirected to `your-app-projects.vercel.app/api/auth/kinde_callback` which is **NOT** the same as the domain you started the auth flow on. The error happens because when you start the auth flow, a `state` cookie is set which needs to be checked against when you return back to your app. In this case, you are **NOT** being redirect to the app you started the flow on, but rather another domain where the app is running which does not have the `state` cookie. Since there is a `state` cookie mismatch, the auth flow is aborted for security reasons. The reason why you are redirected to the wrong domain because is likely because your `KINDE_POST_LOGIN_REDIRECT_URL` environment variable is static and is set for all your deployments/domains. You should set the `KINDE_POST_LOGIN_REDIRECT_URL` dynamically based on the domain you initiating the auth flow from. ## Debug mode In debug mode you will see more logs in your console that may help with debugging. ```jsx // .env KINDE_DEBUG_MODE = true; ``` ## Migration guide Changes when moving from the previous version. `handleAuth` - is now imported from `“@kinde-oss/kinde-auth-nextjs/server”` ```jsx import {handleAuth} from "@kinde-oss/kinde-auth-nextjs/server"; export const GET = handleAuth(); ``` `getKindeServerSession` - functions returned from `getKindeServerSession` now return promises ```jsx const {getUser} = getKindeServerSession(); const user = await getUser(); ```

# Developer tools - Sdks - Next.js App Router SDK v1

> Legacy guide for Next.js App Router SDK v1 including authentication setup, server-side components, and client component integration.

next.js app router v1, legacy sdk, server side components, authentication, client components, migration
developer-tools, sdks, nextjs, backend

This SDK is for developers already using the Next.js SDK v1.8.25 or earlier document. It is relevant for Next.js version 13+ and uses Server Side Components and App Router. ## Other document versions - If you have not already installed the Next.js SDK, we recommend you use the latest [Next.js App Router](/developer-tools/sdks/backend/nextjs-sdk/) document. - If you are using the Pages Router, refer to the latest [Next.js Pages Router](/developer-tools/sdks/backend/nextjs-prev-sdk/) document. The older version is still available at [Next.js Pages Router v1](/developer-tools/sdks/backend/nextjs-prev-sdkv1/) SDK. ## Register for a Kinde account If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. **yourapp.kinde.com**. You can also view the [Next.js docs](https://github.com/kinde-oss/kinde-auth-nextjs) and [Next.js starter kit](https://github.com/kinde-starter-kits/kinde-nextjs-app-router-starter-kit) in GitHub. ## **Installation** <PackageManagers pkg="@kinde-oss/kinde-auth-nextjs@1" /> ## **Set callback URLs** 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example [`http://localhost:3000/api/auth/kinde_callback`](http://localhost:3000/api/auth/kinde_callback) - Allowed logout redirect URLs - for example `http://localhost:3000` 3. Select **Save**. ## **Environments** If you would like to use our Environments feature as part of your development process. You will need to create them first [within your Kinde account](/build/environments/environments/). In this case you would use the Environment subdomain in the code block above. ## **Configuring your app** ### **Environment variables** Put these variables in your `.env.local` file. You can find these variables on your Kinde **Settings > Applications > [Your app] > View details** page. - KINDE_CLIENT_ID - Your business’s unique ID on Kinde - KINDE_CLIENT_SECRET - Your business’s secret key (do not share) - KINDE_ISSUER_URL - your kinde domain - KINDE_SITE_URL - where your app is running - KINDE_POST_LOGOUT_REDIRECT_URL - where you want users to be redirected to after logging out. Make sure this URL is under your allowed logout redirect URLs. - KINDE_POST_LOGIN_REDIRECT_URL - where you want users to be redirected to after authenticating. Replace the information in the \<angle brackets> with your own information. You might also set different URLs depending where your project is running. They need to be the same as the callback URLs you entered in Kinde, above. ```bash KINDE_CLIENT_ID=<your_kinde_client_id> KINDE_CLIENT_SECRET=<your_kinde_client_secret> KINDE_ISSUER_URL=https://<your_kinde_subdomain>.kinde.com KINDE_SITE_URL=http://localhost:3000 KINDE_POST_LOGOUT_REDIRECT_URL=http://localhost:3000 KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:3000/dashboard ``` ### **API endpoints** Create the following file `src/app/api/auth/[kindeAuth]/route.js` inside your Next.js project. Inside the file `route.js` put this code: ```jsx import {handleAuth} from "@kinde-oss/kinde-auth-nextjs/server"; export async function GET(request, {params}) { const endpoint = params.kindeAuth; return await handleAuth(request, endpoint); } ``` This will handle Kinde Auth endpoints in your Next.js app. **Important!** Our SDK relies on this file existing in this location specified above. ## **Integrate with your app** ### Sign up and sign in The SDK ships with `<LoginLink>` and `<RegisterLink>` components which can be used to start the auth flow. ```jsx import {RegisterLink, LoginLink} from "@kinde-oss/kinde-auth-nextjs/server"; ... <LoginLink>Sign in</LoginLink> <RegisterLink>Sign up</RegisterLink> ``` ### Log out This is implemented in much the same way as signing up or signing in. A component is provided for you. ```jsx import {LogoutLink} from "@kinde-oss/kinde-auth-nextjs/server"; ... <LogoutLink>Log out</LogoutLink> ``` ### Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ## **View user profile** You can get an authorized user’s profile from any component using the Kinde Next.js `getKindeServerSession` helper: ```jsx import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; const SayHello = async () => { const {getUser} = getKindeServerSession(); const user = await getUser(); return <p>Hi {user.given_name}!</p>; }; ``` To be on the safe side we also provide `isAuthenticated` flag in this helper: ```jsx import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server"; const UserProfile = async () => { const { getUser, isAuthenticated } = getKindeServerSession(); const user = await getUser(); return ( { (await isAuthenticated()) ? <div> <h2>{user.given_name}</h2> <p>{user.email}</p> </div> : <p>Please sign in or register!</p> } ); }; ``` ## Client Components In Next.js you can opt into using Client Components which give you interactivity benefits and access to the browser APIs. You can read more about them in the [Next.js docs](https://nextjs.org/docs/app/building-your-application/rendering/client-components). To get the Kinde session data in your Client Components follow these two steps: 1. Create an API route in your Next.js project that returns the data from `getKindeServerSession`. ```typescript // app/api/kindeSession/route.ts import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; import {NextResponse} from "next/server"; export async function GET() { const {getUser, isAuthenticated, getPermissions, getOrganization} = getKindeServerSession(); const user = await getUser(); const authenticated = await isAuthenticated(); const permissions = await getPermissions(); const organization = await getOrganization(); return NextResponse.json({user, authenticated, permissions, organization}); } ``` 2. Fetch the data from the API endpoint in your component inside a `useEffect` and then save the data to the component state. ```typescript // some client component "use client"; import { useEffect, useState } from "react"; export default function UploadProfilePic() { const [user, setUser] = useState<any>(); const [authStatus, setAuthStatus] = useState(null); console.log(user); useEffect(() => { const getKindeSession = async () => { const res = await fetch("/api/kindeSession"); const data = await res.json(); setUser(data.user); setAuthStatus(data.authenticated); }; getKindeSession(); }, []); ``` ## **Protecting pages** It’s likely that your application will have both pages that are publicly available and private ones which should only be available to logged in users. 1. Inside your `src` folder create a `middleware.js` file containing the following code: ```jsx import {authMiddleware} from "@kinde-oss/kinde-auth-nextjs/server"; export const config = { matcher: [ /* * Match all request paths except for the ones starting with: * - api (API routes) * - _next/static (static files) * - _next/image (image optimization files) * - favicon.ico (favicon file) */ "/((?!api|_next/static|_next/image|favicon.ico).*) ] }; export default authMiddleware; ``` 2. Create a page at `src/app/dashboard/page.js` ```jsx export default function Dashboard() { return ( <div> <p>Welcome to the dashboard!</p> </div> ); } ``` 3. Try to access this page when signed in and when signed out. Notice how you’ll be redirected to the home page when not authenticated. ### Protect your API The `getKindeServerSession` helper is also available in your API. Create an endpoint in the new App Router pattern at `app/api/protected/route.js` and include the following code block: ```jsx import {NextResponse} from "next/server"; import {getKindeServerSession} from "@kinde-oss/kinde-auth-nextjs/server"; export async function GET() { const {getUser, isAuthenticated} = getKindeServerSession(); if (await !isAuthenticated()) { return new Response("Unauthorized", {status: 401}); } const user = await getUser(); const data = {message: "Hello User", id: user.id}; return NextResponse.json({data}); } ``` This will check if the user is authenticated, and if not, will throw a 401 error. ## **User Permissions** Once a user has been verified as signed in, your product/application will receive the JWT token with an array of permissions for that user. You will need to configure your product/application to read permissions and unlock the respective functions. You set permissions in your Kinde account (see help article), the below is an example set of permissions. ```json "permissions":[ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks ] ``` We provide helper functions to more easily access permissions: ```jsx const {getPermission, getPermissions} = getKindeServerSession(); getPermission("create:todos"); // {orgCode: "org_1234", isGranted: true} getPermissions(); // {orgCode: "org_1234", permissions: ["create:todos", "update:todos", "read:todos"]} ``` A practical example in code might look something like: ```jsx { (await getPermission("create:todos").isGranted) ? <button>Create todo</button> : null; } ``` ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be set against `KINDE_AUDIENCE` in your environment variables. The audience of a token is the intended recipient of the token. ```jsx // .env file KINDE_AUDIENCE = your_audience; ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## **Feature flags** When a user signs in the Access token your product/application receives contains a custom claim called `feature_flags` which is an object detailing the feature flags for that user. You can set feature flags in your Kinde account. Here’s an example. ```jsx feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ``` In order to minimize the payload in the token we have used single letter keys / values where possible. The single letters represent the following: `t` = `type` `v` = `value` `s` = `string` `b` = `boolean` `i` = `integer` We provide helper functions to more easily access feature flags: ```jsx /** * Get a flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {obj} [defaultValue] - A fallback value if the flag isn't found. * @param {'s'|'b'|'i'|undefined} [flagType] - The data type of the flag (integer / boolean / string). * @return {object} Flag details. */ const { getFlag } = getKindeServerSession(); /* Example usage */ getFlag('theme'); /*{ // "code": "theme", // "type": "string", // "value": "pink", // "is_default": false // whether the fallback value had to be used */} getFlag('create_competition', {defaultValue: false}); /*{ "code": "create_competition", "value": false, "is_default": true // because fallback value had to be used }*/ ``` A practical example in code might look something like: ```jsx const {getFlag} = getKindeServerSession(); { (await getFlag("create_competition").value) ? <button>Create competition</button> : null; } ``` We also require wrapper functions by type which should leverage `getFlag` above. Booleans: ```jsx /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {bool} [defaultValue] - A fallback value if the flag isn't found. * @return {bool} */ const {getBooleanFlag} = getKindeServerSession(); /* Example usage */ getBooleanFlag("is_dark_mode"); // true getBooleanFlag("is_dark_mode", false); // true getBooleanFlag("new_feature", false); // false (flag does not exist so falls back to default) ``` Strings and integers work in the same way as booleans above: ```jsx /** * Get a string flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {string} [defaultValue] - A fallback value if the flag isn't found. * @return {string} */ const {getStringFlag} = getKindeServerSession(); /** * Get an integer flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {int} [defaultValue] - A fallback value if the flag isn't found. * @return {int} */ const {getIntegerFlag} = getKindeServerSession(); ``` A practical example in code might look something like: ```jsx const {getBooleanFlag, getStringFlag} = getKindeServerSession(); { (await getBooleanFlag("create_competition")) ? ( <button className={`theme-${getStringFlag("theme")}`}>Create competition</button> ) : null; } ``` ## **Organizations** ### **Creating an organization** To have a new organization created within your application, you can use the `<CreateOrgLink>` component that ships with the SDK. This will redirect the user to Kinde and create an organization with them as a member. ```jsx import {CreateOrgLink} from "@kinde-oss/kinde-auth-nextjs/server"; ... <CreateOrgLink orgName="My org">Create Org</CreateOrgLink> ``` ### Signing up/login users to organizations Every organization in Kinde has a unique code. To sign up a new user into a particular organization you will need to pass through this code in the `<RegisterLink />` component. ```jsx import {RegisterLink} from "@kinde-oss/kinde-auth-nextjs/server"; ... <RegisterLink orgCode="org_123456">Sign up to org</RegisterLink> ``` This code should also be passed along with the `<LoginLink>` component if you wish for a user to be logged into a specific organization. ```jsx <LoginLink orgCode="org_123456">Sign into org</LoginLink> ``` For more information about using organizations, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## Kinde Management API You need to enable the application’s access to the Kinde Management API. You can do this in Kinde by going to **Settings > APIs > Kinde Management API** and then toggling on your Next.js application under the **Applications** tab. To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) ## Persisting app state If you want your project to remember which url your user was intending to visit before they were asked to authenticate, you can pass an additional parameter in the `/login` and `/register` links. After the user has completed authentication at your defined callback url they will be redirected to the path you define here. This value does not need to be added to your allowed callback urls in Kinde. **Next.js 13** ```jsx // Next.js 13 {/* eslint-disable-next-line @next/next/no-html-link-for-pages */} <a href="api/auth/login?post_login_redirect_url=/dashboard"> Sign in </a> <LoginLink postLoginRedirectURL={'/dashboard'}>Login</LoginLink> <RegisterLink postLoginRedirectURL={'/dashboard'}>Register</RegisterLink> ``` Note: the value of `post_login_redirect_url` should either be a url on the same origin or a relative path. ## Working with preview URLs Our Kinde Next.js SDK currently requires that these environment variables `KINDE_SITE_URL`, `KINDE_POST_LOGOUT_REDIRECT_URL`, and `KINDE_POST_LOGIN_REDIRECT_URL` are defined, and that the **callback URLs** and **logout redirect URLs** are added to your app in Kinde. To add Vercel’s dynamically generated URLs you can either securely use our API to add them on the fly or you can use [wildcard URLs](/get-started/connect/callback-urls/#wildcards-in-callback-urls). It should be noted that whilst wildcards are more convenient it is not as secure as explicitly adding the url to the allowlist via API as we outline below. Add the following to your `next.config.js`. ```jsx /** @type {import('next').NextConfig} */ const nextConfig = { env: { KINDE_SITE_URL: process.env.KINDE_SITE_URL ?? `https://${process.env.VERCEL_URL}`, KINDE_POST_LOGOUT_REDIRECT_URL: process.env.KINDE_POST_LOGOUT_REDIRECT_URL ?? `https://${process.env.VERCEL_URL}`, KINDE_POST_LOGIN_REDIRECT_URL: process.env.KINDE_POST_LOGIN_REDIRECT_URL ?? `https://${process.env.VERCEL_URL}/dashboard` } }; module.exports = nextConfig; ``` This ensures Vercel uses its generated preview URLs to populate the three Kinde variables. - Make sure the above values match your application (e.g. “/dashboard” for `KINDE_POST_LOGIN_REDIRECT_URL`) - Also make sure variables are not set for the preview environment in your Vercel project. If they are, they will be overridden by the new variables in the `next.config.js` file. ### Add callback URLs and logout redirect URLs to Kinde dynamically Create a script that will run each time a new preview is deployed by Vercel, which will add the newly generated URL to Kinde. It is important to note that for this part you will need to create a [machine to machine (M2M)](http://localhost:4321/developer-tools/kinde-api/connect-to-kinde-api/) application in Kinde to interface with the [Kinde Management API](/kinde-apis/management/). 1. Create a **Machine to machine (M2M)** app. 1. In Kinde, go to **Settings > Applications** and click on **Add application**. 2. Give your application a name and select **Machine to machine (M2M)**. 3. Select **Save**. 4. On the next screen, take note of the **Client ID** and **Client secret** values and add them to your `.env.local` file as `KINDE_M2M_CLIENT_ID` and `KINDE_M2M_CLIENT_SECRET`. 5. On the same screen, click on **APIs** on the left menu. 6. Authorize your M2M application to access the Kinde Management API by selecting the three dots (`...`) and clicking **Authorize application**. 7. Once the application is authorized, select the three dots (`...`) again and this time select **Manage scopes**. 8. Since we will be adding callback and redirect URLs dynamically via the Kinde Management API, you will need to toggle the switch for `create:application_redirect_uris` and `create:application_logout_uris`. 9. Select **Save**. 2. In your application source code, create a folder at the top level called `scripts`. 3. Within that folder, create a file called `add-urls-to-kinde.js` and add the following code: ```jsx async function getAuthToken() { try { const response = await fetch(`${process.env.KINDE_ISSUER_URL}/oauth2/token`, { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded", Accept: "application/json" }, body: new URLSearchParams({ client_id: process.env.KINDE_M2M_CLIENT_ID, client_secret: process.env.KINDE_M2M_CLIENT_SECRET, grant_type: "client_credentials", audience: `${process.env.KINDE_ISSUER_URL}/api` }) }); if (!response.ok) { throw new Error(`Failed to get auth token: ${response.statusText}`); } const data = await response.json(); return data.access_token; } catch (error) { console.error("Error getting auth token:", error); throw error; } } async function addLogoutUrlToKinde(token) { try { const response = await fetch( `${process.env.KINDE_ISSUER_URL}/api/v1/applications/${process.env.KINDE_CLIENT_ID}/auth_logout_urls`, { method: "POST", headers: { Authorization: `Bearer ${token}`, Accept: "application/json", "Content-Type": "application/json" }, body: JSON.stringify({ urls: [`https://${process.env.VERCEL_URL}`] }) } ); if (!response.ok) { throw new Error(`Failed to add logout URL to Kinde: ${response.statusText}`); } const responseData = await response.json(); console.log(`SUCCESS: Logout URL added to Kinde: ${process.env.VERCEL_URL}`, responseData); } catch (error) { console.error("Failed to add logout URL to Kinde", error); throw error; } } async function addCallbackUrlToKinde(token) { try { const response = await fetch( `${process.env.KINDE_ISSUER_URL}/api/v1/applications/${process.env.KINDE_CLIENT_ID}/auth_redirect_urls`, { method: "POST", headers: { Authorization: `Bearer ${token}`, Accept: "application/json", "Content-Type": "application/json" }, body: JSON.stringify({ urls: [`https://${process.env.VERCEL_URL}/api/auth/kinde_callback`] }) } ); if (!response.ok) { throw new Error(`Failed to add callback URL to Kinde: ${response.statusText}`); } const responseData = await response.json(); console.log( `SUCCESS: Callback URL added to Kinde: ${process.env.VERCEL_URL}/api/auth/kinde_callback`, responseData ); } catch (error) { console.error("Failed to add callback URL to Kinde", error); throw error; } } (async () => { if (process.env.VERCEL == 1) { try { const authToken = await getAuthToken(); await addCallbackUrlToKinde(authToken); await addLogoutUrlToKinde(authToken); } catch (error) { console.error("Script failed:", error); } } })(); ``` 4. In your `package.json`, add a `postbuild` script that will run the `/scripts/add-urls-to-kinde.js` file after Vercel builds your app. ```json "scripts": { "dev": "next dev", "build": "next build", "start": "next start", "lint": "next lint", "postbuild": "node ./scripts/add-urls-to-kinde.js" } ``` 5. Commit these changes. The next deploy will add the newly created preview URLs to your Kinde application.

# Developer tools - Sdks - Node/Express GraphQL

> Guide to securing Node.js Express GraphQL endpoints with Kinde authentication using context and resolver protection.

node express graphql, authentication, bearer token, context, resolvers, authorization
developer-tools, sdks, node, express, graphql, backend

These instructions assume you already have a Kinde account. You can [register for free here](https://app.kinde.com/register) (no credit card required). This guide details how to protect your GraphQL endpoints, when running on ExpressJS. It assumes you already have a front end connected to Kinde which is sending a Kinde issued bearer token to your API for verification. If you don’t yet have a front end setup, please set this up first following the relevant guide: [React](/developer-tools/sdks/frontend/react-sdk/) [Next.js](/developer-tools/sdks/backend/nextjs-sdk/) [VanillaJS](/developer-tools/sdks/frontend/javascript-sdk/) ## **Configure Express** ### **Add Kinde Node as a dependency** <PackageManagers pkg="@kinde-oss/kinde-node" /> ### **Integrate with your app** Import as you would any other Node package - we recommend you do this in you `app.js` or `index.js` file depending on your structure. ```jsx const kindeNode = require("@kinde-oss/kinde-node"); ``` ### **Initialize** In the same file after any other imports initialize the library by entering your Kinde domain. This grabs the verification keys for your app. ```jsx let authenticate; (async () => { authenticate = await kindeNode(YOUR_KINDE_DOMAIN); })(); ``` ### **Protect!** We recommend you create a context for holding contextual data and use our `authenticate` function to verify if the Bearer token sent with the api call matches the keys on your domain and prevent access to unauthorized users. ```jsx const context = (req) => { const user = new Promise((resolve, reject) => { authenticate(req, (err, user) => { if (err) { return reject(err); } resolve(user); }); }); return { user }; }; ``` ### **Access** It’s pretty common that a Graph will have a mix of public and private fields. Because we’ve added the user to context we can access this in the individual field resolvers and decide what to return. As an example, this resolver is only accessible with a valid user: ```jsx users: (args, context) => { // In this case, we’ll pretend there is no data when // we’re not logged in. Another option would be to // throw an error if (!context.user) return null; return ["bob", "jake"]; }; ``` If you need any assistance with getting Kinde connected reach out to us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Node.js SDK

> Overview of Kinde SDKs for Node.js frameworks including Apollo Server, Express, Next.js, Nuxt, Remix, and SvelteKit.

node.js sdk, framework sdk, apollo server, express, next.js, nuxt, remix, sveltekit
developer-tools, sdks, nodejs, backend

Kinde has a number of SDKs tailored to frameworks run on Node.js. Refer to the SDK for your framework: - [Apollo Server](/developer-tools/sdks/backend/apollo-graphql/) - [Express](/developer-tools/sdks/backend/express-sdk/) - [Express + GraphQL](/developer-tools/sdks/backend/node-express-graphql/) - [Next.js App Router](/developer-tools/sdks/backend/nextjs-sdk/) - [Next.js Pages Router](/developer-tools/sdks/backend/nextjs-prev-sdk/) - [Nuxt](/developer-tools/sdks/backend/nuxt-module/) - [Remix](/developer-tools/sdks/backend/remix-sdk/) - [SvelteKit](/developer-tools/sdks/backend/sveltekit-sdk/) For all other frameworks, the [TypeScript SDK](/developer-tools/sdks/backend/typescript-sdk/) can be used to integrate with Kinde. If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Nuxt module

> Complete guide for Nuxt module including authentication setup, route protection, permissions management, and feature flags for Nuxt 3+ applications.

nuxt module, authentication, route protection, permissions, feature flags, middleware
developer-tools, sdks, nuxt, backend

The Nuxt Kinde module allows developers to integrate Kinde authentication into their existing Nuxt projects. For new projects, you can also find our [Starter Kit on GitHub](https://github.com/kinde-starter-kits/nuxt-starter-kit). ## Supported versions Nuxt 3+. ## Register with Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. **yourapp.kinde.com**. ## Install the module Install the `@nuxtjs/kinde` dependency using your package manager of choice. ```bash npx nuxi@latest module add kinde ``` ## Integrate with your app Add `@nuxtjs/kinde` to the modules section of your `nuxt.config.ts`. ```jsx export default defineNuxtConfig({ modules: ["@nuxtjs/kinde"] }); ``` Add the following values to your `.env` file. If you don't have one create a file in the root of your project. ```bash NUXT_KINDE_CLIENT_ID=<your_kinde_client_id> NUXT_KINDE_CLIENT_SECRET=<your_kinde_client_secret> NUXT_KINDE_AUTH_DOMAIN=https://<your_kinde subdomain>.kinde.com NUXT_KINDE_REDIRECT_URL=http://localhost:3000/api/callback NUXT_KINDE_LOGOUT_REDIRECT_URL=http://localhost:3000 NUXT_KINDE_PASSWORD=<a random password which will be used to encrypt the session cookie> NUXT_KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:3000/dashboard ``` Replace [`http://localhost:3000`](http://localhost:3000/) with the URL where your project is running. ## Set callback URLs For your app to work with Kinde, you need to set callback and logout redirect URLs. Replace the values you see in `<code brackets>` with your own values. 1. In Kinde, go to **Settings > Applications.** 2. Select **View details** on your app. 3. Scroll down to the **Callback URLs** section. 4. Add in the callback URLs for your project, which might look something like this: - Allowed callback URLs (also known as Redirect URIs)- `<http://localhost:3000>/api/callback>` - Allowed logout redirect URLs - `<http://localhost:3000>` 5. Select **Save**. **Tip**: Make sure there are no hidden spaces in URLs and remove the ‘/’ backslash at the end. ## Environments If you would like to use different Environments as part of your development process, you will need to [add them within your Kinde business](/build/environments/environments/) first. You will also need to add the Environment subdomain to the code block above. ## Login and register Kinde supports an easy to implement login / register flow. Use the button examples below to redirect your users to Kinde, where they authenticate before being redirected back to your site. ```jsx <LoginLink to="/api/login" external> Sign in </LoginLink> <RegisterLink to="/api/register" external> Sign up </RegisterLink> ``` ## R**edirect after authentication** After your user has authenticated they will be redirected to the URL set in your `.env` file ```bash NUXT_KINDE_POST_LOGIN_REDIRECT_URL=<where_your_project_is_running> ``` ## Protecting pages It’s likely that your project will have both pages that are publicly available and private ones which should only be available to logged in users. Route protection is set up in within the `routeRules` in `nuxt.config.ts` In the below example, - `/**` - This protected all routes redirecting the login route. - `/dashboard` - route is protected for users with `admin` permissions. - `/public` - this is flagged as a public route and will be open to all visitors. ```jsx routeRules: { '/**': { appMiddleware: ['auth-logged-in'], kinde: { redirectUrl: '/api/login', external: true, }, }, '/dashboard': { appMiddleware: ['auth-logged-in'], kinde: { // list of permissions that are required to access the route permissions: { admin: true, }, redirectUrl: '/api/login', external: true, }, }, '/public': { appMiddleware: ['auth-logged-in'], kinde: { public: true, }, }, }, ``` ## Getting all permissions for the current user Once a user has been verified, your project or app returns the JWT token with an array of permissions for that user. Configure your app to read permissions and unlock the respective functions. [Set permissions](/manage-users/roles-and-permissions/user-permissions/) in your Kinde account. Here’s an example set of permissions. ```jsx const permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks ]; ``` We provide helper functions to more easily access the permissions claim, example of usage: ```jsx const client = useKindeClient(); const {data: permissions} = await useAsyncData(async () => { const {permissions} = (await client?.getPermissions()) ?? {}; return permissions; }); // { orgCode: 'org_1234', permissions: ['create:todos', 'update:todos', 'read:todos'] } const {data: hasAccess} = await useAsyncData(async () => { return (await client?.getPermission("create:todos")) ?? {}; }); // { orgCode: 'org_1234', isGranted: true } ``` ## Feature flags When a user signs in, the access token your project/application receives contains a custom claim called `feature_flags` which is an object detailing the feature flags for that user. You can [set feature flags](/releases/feature-flags/add-feature-flag/) in your Kinde account. Here’s an example. ```jsx feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ``` We have provided a helper to grab any feature flag. For example: ```jsx const getFeatureFlag = async (feature: string) => { return await client?.getFlag(feature); } ``` You can find specific `string`, `boolean` and `integer` helpers in the [TypeScript SDK ](/developer-tools/sdks/backend/typescript-sdk/#feature-flags)docs. ## Check if the user is authenticated You can check if a user is logged in with the `$auth.loggedIn` context. ```jsx <p v-if="$auth.loggedIn"> I'm signed in! </p> <p v-else> I'm signed out :( </p> ``` ## Logout This is implemented in much the same way as signing up or signing in. ```jsx <NuxtLink to="/api/logout" external> Sign out </NuxtLink> ``` ## Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ## Get user information ### User profile User details can be found on the `$auth.user` object ```jsx {{ $auth.user }} // returns { id: "kp_12345556666", given_name: "Sally", family_name: "Smith", email: "sally.smith@example.com", picture: "https://lh3.googleusercontent.com/a/1234", updated_at: 1697769735 } ``` ## Organizations ### Create an organization To have a new organization created within your project, you can use the register api end point and pass `is_create_org="true"`. This will redirect the user to Kinde and create an organization with them as a member. ```jsx <NuxtLink to="/api/register?is_create_org=true" external> Register and create org </NuxtLink> ``` ### Sign users up or in to an organization When a user signs up or in to an organization, the `org_code` needs to be passed with the request. The `org_code` refers to the one created automatically in Kinde when the organization was created. Here’s an helper function for registering or signing in below using `org_0e9f496742ae` as an example: ```jsx <NuxtLink to="/api/login?org_code=org_0e9f496742ae" external> Sign in to org </NuxtLink> <NuxtLink to="/api/register?org_code=org_0e9f496742ae" external> Sign up to org </NuxtLink> ``` Because a user can belong to multiple organizations, and because they may have different permissions for the different organizations, we will pass you both the `org_code` and `permissions` back in the token when authentication is initiated like this. ## Health check To check your configuration, the SDK exposes an endpoint with your settings. `/api/health` **Note**: The client secret will indicate only if the secret is set or not set correctly. To enable set the debug property within the Kinde config. ```jsx export default defineNuxtConfig({ kinde: { debug: true } }); ``` ```jsx { "apiPath": "https://<your_kinde subdomain>.kinde.com", "redirectURL": "http://localhost:3000/api/callback", "postLoginRedirectURL": "http://localhost:3000/dashboard", "logoutRedirectURL": "http://localhost:3000", "clientID": "<your_kinde_client_id>", "clientSecret": "Set correctly" } ``` ## Kinde Management API To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) If you need help using Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com) or join the Kinde community on [Discord](https://discord.com/invite/tw5ng5tK6V) or [Slack](https://join.slack.com/t/thekindecommunity/shared_invite/zt-2k5i0aeet-d6Z_2qYphcNCpj0bFa4oCg).

# Developer tools - Sdks - PHP SDK

> Complete guide for PHP SDK including Composer installation, OAuth integration, authentication flow, user permissions, and cookie configuration for PHP applications.

PHP SDK, Composer, OAuth, authentication, user permissions, cookie settings, callback URLs
developer-tools, sdks, php, backend

{/* @case-police-ignore Sdk */} The Kinde PHP SDK allows developers to integrate with Composable Commerce APIs using PHP native interfaces, models and helpers instead of manually using the HTTP and JSON API. You can also view the [PHP docs](https://github.com/kinde-oss/kinde-php-sdk) and [PHP starter kit](https://github.com/kinde-starter-kits/php-starter-kit) in GitHub. ## Register for Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). This will give you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com` ## Install Install [Composer](https://getcomposer.org/) and then execute the following command: ```bash php composer.phar require kinde-oss/kinde-auth-php ``` Or add the following to your **composer.json** file: ```json "require": { "kinde-oss/kinde-auth-php": "*" } ``` ## Set callback URLs 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example, `http://localhost:8000/callback` - Allowed logout redirect URLs - for example, `http://localhost:8000` 3. Select **Save**. ## Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Note that each environment needs to be set up independently, so you need to use the Environment subdomain in the code block above for those new environments. ## Configure your app **Environment variables** The following variables need to be replaced in the code snippets below. - `KINDE_HOST` - your Kinde domain - e.g. `https://your_kinde_domain.kinde.com` - `KINDE_REDIRECT_URL` - your callback url, make sure this URL is under your allowed callback redirect URLs. - e.g. `http://localhost:8000/callback` - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out, make sure this URL is under your allowed logout redirect URLs. - e.g. `http://localhost:8000` - `KINDE_CLIENT_ID` - you can find this on the **Application details** page - `KINDE_CLIENT_SECRET` - you can find this on the **Application details** page ### Integrate with your app Add the composer autoloader to your app. ```php require_once(__DIR__ . "/vendor/autoload.php"); ``` Create a new instance of the Kinde Auth client object before you initialize your app. ```php ... use Kinde\KindeSDK\KindeClientSDK; use Kinde\KindeSDK\Configuration; use Kinde\KindeSDK\Sdk\Enums\GrantType; ... private $kindeClient; private $kindeConfig; public function __construct() { ... $this->kindeClient = new KindeClientSDK("KINDE_HOST", "KINDE_REDIRECT_URL", "KINDE_CLIENT_ID", "KINDE_CLIENT_SECRET", "KINDE_GRANT_TYPE"); $this->kindeConfig = new Configuration(); $this->kindeConfig->setHost("KINDE_HOST"); ... } ``` ## Sign in and registration The Kinde client provides methods for easy login and registration. You can add buttons in your HTML as follows: ```html <div class="navigation"> <a href="/login" type="button">Login</a> <a href="/register" type="button">Register</a> </div> ``` You will also need to route `/login` and `/register` to the SDK methods: ```php $this->kindeClient->login(); $this->kindeClient->register(); ``` ### Manage redirects When the user is redirected back to your site from Kinde, this will call your callback URL defined in the `KINDE_REDIRECT_URL` variable. You will need to route `/callback` to call a function to handle this. ```php public function callback() { // Need to implement, e.g: call an api,etc... In this case, we will get a token: $token = $this->kindeClient->getToken(); $this->kindeConfig->setAccessToken($token->access_token); print_r($token); } ``` You can also get the current authentication status with `isAuthenticated` ```php public function callback() { if (!$this->kindeClient->isAuthenticated) { // Need to implement, e.g: call an api,etc... In this case, we will get a token: $token = $this->kindeClient->getToken(); $this->kindeConfig->setAccessToken($token->access_token); print_r($token); } } ``` For more information, please check out `Kinde\KindeSDK\Sdk\Enums\AuthStatus` ## Cookie settings By default, your cookie will apply to the full domain and sub folder from which the code is called from. You can override both the path and domain using the following helper functions. ```php $storage = Storage::getInstance(); // Set the cookie path to root so it applies to the whole domain $storage->setCookiePath('/'); // Set the cookie domain without a prefix so it can be applied to all subdomains $storage->setCookieDomain('yourdomain.com'); ``` ## Logout The Kinde SPA client comes with a logout method. ```php $this->kindeClient->logout(); ``` ## Get user information To access the user information, use the `getUserDetails` helper function: ```php $this->kindeClient->getUserDetails(); // returns [ 'given_name' => 'Dave', 'id' => 'abcdef', 'family_name' => 'Smith', 'email' => 'dave@smith.com', 'picture' => 'https://link_to_avatar_url.kinde.com', ] ``` ### View users in Kinde Go to the **Users** page in Kinde to see who has registered. ## User permissions After a user signs in and they are verified, the token return includes permissions for that user. [User permissions are set in Kinde](/manage-users/roles-and-permissions/user-permissions/), but you must also configure your application to unlock these functions. ```php "permissions" => [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ]; ``` We provide helper functions to more easily access permissions: ```php $this->kindeClient->getPermission("create:todos"); // ["orgCode" => "org_1234", "isGranted" => true] $this->kindeClient->getPermissions(); // ["orgCode" => "org_1234", "permissions" => ["create:todos", "update:todos", "read:todos"]] ``` A practical example in code might look something like: ```php if ($this->kindeClient->getPermission("create:todos")["isGranted"]) { // create new a todo } ``` ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```php public function __construct() { ... $this->kindeClient = new KindeClientSDK("KINDE_HOST", "KINDE_REDIRECT_URL", "KINDE_CLIENT_ID", "KINDE_CLIENT_SECRET", "KINDE_GRANT_TYPE", "KINDE_POST_LOGOUT_REDIRECT_URL", "YOUR_SCOPES", [ "audience" => "api.yourapp.com ]); ... } ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/) ## Overriding scope By default the `KindeSDK` requests the following scopes: - profile - email - offline - openid You can override this by passing scope into the `KindeSDK` ```php public function __construct() { ... $this->kindeClient = new KindeClientSDK("KINDE_HOST", "KINDE_REDIRECT_URL", "KINDE_CLIENT_ID", "KINDE_CLIENT_SECRET", "KINDE_GRANT_TYPE", "KINDE_POST_LOGOUT_REDIRECT_URL", "profile email offline openid"); ... } ``` ## Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```php $this->kindeClient->getClaim("aud"); // ["name" => "aud", "value" => ["api.yourapp.com"]] $this->kindeClient->getClaim("given_name", "id_token"); // ["name" => "aud", "value" => "David"] ``` ## Organizations ### Create an organization To create a new organization within your application, run a similar function to below: ```php public function register() { $this->kindeClient->createOrg(); } ``` You can also pass `org_name` as your organization ```php $this->kindeClient->createOrg(["org_name" => "Your Organization"]); ``` ### Sign up and sign in to organizations Kinde has a unique code for every organization. You’ll have to pass this code through when you register a new user. Example function below: ```php $this->kindeClient->register(["org_code" => "your_org_code"]); ``` If you want a user to sign in to a particular organization, pass this code along with the sign in method. ```php $this->kindeClient->login(["org_code" => "your_org_code"]); ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```php [ "aud" => [], "exp" => 1658475930, "iat" => 1658472329, "iss" => "https://your_subdomain.kinde.com", "jti" => "123457890", "org_code" => "org_1234", "permissions" => ["read:todos", "create:todos"], "scp" => [ "openid", "profile", "email", "offline ], "sub" => "kp:123457890 ]; ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```php [ ... "org_codes" => ["org_1234", "org_4567"], ... ]; ``` There are two helper functions you can use to extract information: ```php $this->kindeClient->getOrganization(); // ["orgCode" => "org_1234"] $this->kindeClient->getUserOrganizations(); // ["orgCodes" => ["org_1234", "org_abcd"]] ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## Feature flags We have provided a helper to grab any feature flag from `access_token`: ```php $this->kindeClient->getFlag('theme'); // returns [ "code" => "theme", "type" => "string", "value" => "pink", "is_default" => false // whether the fallback value had to be used ] // Another usage case $this->kindeClient->getFlag('is_dark_mode'); // returns [ "code": "is_dark_mode", "type": "boolean", "value": true, "is_default": false ] // This flag does not exist - default value provided $this->kindeClient->getFlag('create_competition', ["defaultValue" => false]); // returns [ "code": "create_competition", "type" => "boolean", "value": false, "is_default": true // because fallback value had to be used ] // The flag type was provided as string, but it is an integer $this->kindeClient->getFlag('competitions_limit', {defaultValue: 3}, 's'); // should error out - Flag "competitions_limit" is type integer - requested type string // This flag does not exist, and no default value provided $this->kindeClient->getFlag('new_feature'); // should error out - This flag was not found, and no default value has been provided ``` We also provide wrapper functions which should leverage `getFlag` above: ```php // [--- Boolean ---] $this->kindeClient->getBooleanFlag('is_dark_mode'); // with default value $this->kindeClient->getBooleanFlag('is_dark_mode', false); // [--- Boolean ---] // [--- String ---] $this->kindeClient->getStringFlag('theme'); // with default value $this->kindeClient->getStringFlag('theme', 'blue'); // [--- String ---] // [--- Integer ---] $this->kindeClient->getIntegerFlag('competitions_limit'); // with default value $this->kindeClient->getIntegerFlag('competitions_limit', 1); // [--- Integer ---] ``` ## Token Storage Once the user has successfully authenticated, you'll have a JWT stored in a local cookie containing an access token, refresh token and ID token if requested. You can use the `getAccessToken` method of the `Storage` class to retrieve the access token from the cookie. There are also helper functions to get the decoded access token or id token. ```php ... use Kinde\\KindeSDK\\Sdk\\Storage\\Storage; ... $storage = Storage::getInstance(); $accessToken = $storage->getAccessToken(); $decodedAccessToken = $storage->getDecodedAccessToken(); $decodedIdToken = $storage->getDecodedIdToken(); print_r($accessToken); print_r($decodedAccessToken); print_r($decodedIdToken); ``` To specify the expiration time, you can use the `setTokenTimeToLive` method. ```php $storage->setTokenTimeToLive(time() + 3600) // Live in 1 hour ``` ## Using your token cookie across multiple subdomains By default, your token cookie will be local to the subdomain that made the login request (e.g. [login.yourdomain.com](http://login.yourdomain.com/)), so [app.yourdomain.com](http://app.yourdomain.com/) will have no visibility of this. You can confirm this in your browser, for example in Chrome go to **Developer tools** and under **Application > Storage > Cookies**, look at the **Domain** column. To achieve cross sub-domain use the cookie needs to be set to the root domain rather than the subdomain. You can do this by adding the following code after initializing the KindeClient: ```php $storage = Storage::getInstance(); $storage->setCookieDomain('yourdomain.com'); ``` ## SDK API reference ### `host` Either your Kinde instance URL or your custom domain. e.g `https://yourapp.kinde.com/` Type: `string` Required: yes ### `redirectUri` The url that the user will be returned to after authentication. Type: `string` Required: yes ### `clientId` The unique ID of your application. Get this from the Application details section in Kinde. Type: `string` Required: yes ### `clientSecret` The unique client secret of your Kinde application. Get this from the Application details section in Kinde. Type: `string` Required: yes ### `grantType` The `grantType` for Kinde Authorization varies for each OAuth 2 flow. You can use: - **Authorization code:** `GrantType::authorizationCode:` Intended for confidential clients, e.g. web-servers. - **Authorization code with PKCE:** `GrantType::PKCE:` Extension for public clients, e.g. single page web applications and mobile applications, and confidential clients, e.g. web-servers. Note that the `code_challenge` and `code_challenge_method` parameters are also required for this grant type. - **Client credentials flow:** `GrantType::clientCredentials:` Intended for confidential clients where machine-to-machine communication is required. Type: `string` Required: yes ### `logoutRedirectUri` Where your user will be redirected when they sign out. Type: `string` Required: yes ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No Default: ```php openid profile email offline ``` ### `additionalParameters` Additional parameters that will be passed in the authorization request. Type: `array` Required: No Default: `[ ]` ### `additionalParameters` - `audience` The audience claim for the JWT. Type: `string` Required: No ## KindeSDK methods ### `login` Constructs redirect url and sends user to Kinde to sign in. Arguments: ```php org_code?: string ``` Usage: ```php $kinde->login(); ``` ### `register` Constructs redirect url and sends user to Kinde to sign up. Arguments: ```php org_code?: string ``` Usage: ```php $kinde->register(); ``` ### `logout` Logs the user out of Kinde. Usage: ```php $kinde->logout(); ``` ### `getToken` Returns the raw access token from URL after logged from Kinde. Usage: ```php $kinde->getToken(); ``` Sample output: ```php [ "access_token" => "eyJhbGciOiJSUzI...", "expires_in" => 86400, "id_token" => "eyJhbGciOiJSU...", "refresh_token" => "yXI1bFQKbXKLD7AIU...", "scope" => "openid profile email offline", "token_type" => "bearer ]; ``` ### `createOrg` Constructs redirect url and sends user to Kinde to sign up and create a new org for your business. Arguments: ```php org_name?: string ``` Usage: ```php $kinde->createOrg(); or $kinde->createOrg(["org_name" => "your organization name"}); ``` Sample output: ```php redirect ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```php claim: string, tokenKey?: string ``` Usage: ```php $kinde->getClaim("given_name", "id_token"); ``` Sample output: ```php David ``` ### `getPermission` Returns the state of a given permission. Arguments: ```php key: string ``` Usage: ```php $kinde->getPermission("read:todos"); ``` Sample output: ```php [ "orgCode" => "org_1234", "isGranted" => true ]; ``` ### `getPermissions` Returns all permissions for the current user for the organization they are logged into. Usage: ```php $kinde->getPermissions(); ``` Sample output: ```php [ "orgCode" => "org_1234", "permissions" => ["create:todos", "update:todos", "read:todos"] ]; ``` ### `getOrganization` Get details for the organization your user is logged into. Usage: ```php $kinde->getOrganization(); ``` Sample output: ```php [ "orgCode" => "org_1234 ]; ``` ### `getUserDetails` Returns the profile for the current user. Usage: ```php $kinde->getUserDetails(); ``` Sample output: ```php [ "given_name" => "Dave", "id" => "abcdef", "family_name" => "Smith", "email" => "mailto:dave@smith.com ]; ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Usage: ```php $kinde->getUserOrganizations(); ``` Sample output: ```php [ "orgCodes" => ["org_8de8711f46a", "org_820c0f318de"] ]; ``` ### `getFlag` Gets a feature flag from an access token. Arguments: ```php flagName: string, options?: ["defaultValue" => any] ``` Usage: ```php $kinde->getFlag("is_dark_mode"); ``` Sample output: ```php [ "code": "is_dark_mode", "type": "boolean", "value": true, "is_default": false ]; ``` ### `getBooleanFlag` Gets a boolean feature flag from an access token. Arguments: ```php flagName: string, defaultValue?: boolean ``` Usage: ```php $kinde->getBooleanFlag("is_dark_mode", false); ``` Sample output: ```php [ "code": "is_dark_mode", "type": "boolean", "value": false, "is_default": true ]; ``` ### `getStringFlag` Gets a string feature flag from an access token. Arguments: ```php flagName: string, defaultValue?: string ``` Usage: ```php $kinde->getStringFlag('theme'); ``` Sample output: ```php [ "code": "theme", "type": "string", "value": "black", "is_default": false ]; ``` ### `getIntegerFlag` Gets a integer feature flag from an access token. Arguments: ```php flagName: string, defaultValue?: integer ``` Usage: ```php $kinde->getIntegerFlag("competitions_limit"); ``` Sample output: ```php [ "code": "competitions_limit", "type": "integer", "value": 1, "is_default": false ]; ``` ### `isAuthenticated` To check user authenticated or not. Usage: ```php $kinde->isAuthenticated ``` Sample output: ```php true or false ``` If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Python SDK v1

> Legacy guide for Python SDK v1 including authentication setup, OAuth flows, user permissions, and callback management for Python 3.8+ applications.

python sdk v1, legacy sdk, authentication, oauth flows, user permissions, callback urls
developer-tools, sdks, python, backend

<Aside type="warning"> This SDK has been superseded by a [new version](/developer-tools/sdks/backend/python-sdk/). </Aside> The Kinde Python SDK allows developers to quickly and securely integrate a new or an existing Python application into the Kinde platform. ## Before you begin - Kinde Python SDK supports Python 3.8+ - If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. For new projects, you can also find our [Starter Kit on GitHub](https://github.com/kinde-starter-kits/python-starter-kit). ## Install Install [PIP](https://pip.pypa.io/en/stable/installation/) and then execute the following command: ```bash pip install kinde-python-sdk ``` ### Set callback URLs 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example, `http://localhost:8000/callback` - Allowed logout redirect URLs - for example, `http://localhost:8000` 3. Select **Save**. ### Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Note that each environment needs to be set up independently, so you need to use the Environment subdomain in the code block above for those new environments. ## Configure your app **Environment variables** The following variables need to be replaced in the code snippets below. - `KINDE_HOST` - your Kinde domain, e.g. `https://yourdomain.kinde.com` - `KINDE_CLIENT_ID` - In Kinde, go to **Settings > Applications > [your application] > View details**. - `KINDE_CLIENT_SECRET` - In Kinde, go to **Settings > Applications > [your application] > View details**. - `KINDE_REDIRECT_URL` - your callback urls or redirect URIs, e.g. `http://localhost:8000/callback` - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after signing out, e.g. `http://localhost:8000` ## Integrate with your app Create a new instance of the Kinde Auth client object before you initialize your app. ```python ... from kinde_sdk import Configuration from kinde_sdk.kinde_api_client import GrantType, KindeApiClient ... configuration = Configuration(host=KINDE_HOST) kinde_api_client_params = { "configuration": configuration, "domain": KINDE_HOST, "client_id": KINDE_CLIENT_ID, "client_secret": KINDE_CLIENT_SECRET, "grant_type": GRANT_TYPE, # client_credentials | authorization_code | authorization_code_with_pkce "callback_url": KINDE_REDIRECT_URL } kinde_client = KindeApiClient(**kinde_api_client_params) ``` With **PKCE** flow, the `code_verifier` is required. ```python from authlib.common.security import generate_token CODE_VERIFIER = generate_token(48) kinde_api_client_params["code_verifier"] = CODE_VERIFIER ``` ## Sign in and sign up The Kinde client provides methods for easy sign in and sign up. You can add buttons in your HTML as follows: ```html <div class="navigation"> <a href="{{ url_for('login') }}" type="button">Sign in</a> <a href="{{ url_for('register') }}" type="button">Sign up</a> </div> ``` You will also need to route `/login` and `/register` to the SDK methods: ```python @app.route("/login") def login(): return app.redirect(kinde_client.get_login_url()) @app.route("/register") def register(): return app.redirect(kinde_client.get_register_url()) ``` ## Manage redirects When the user is redirected back to your site from Kinde, this will call your callback URL defined in the `KINDE_REDIRECT_URL` variable. You will need to route `/callback` to call a function to handle this. ```python @app.route("/callback") def callback(): kinde_client.fetch_token(authorization_response=request.url) print(configuration.access_token) # Token here ``` The code above setups up the Kinde client as a single instance per user session. If you want to setup the Kinde client as a singleton, you can do the following: ```python @app.route("/callback") def callback(): access_token: dict = kinde_client.fetch_token_value(authorization_response=request.url) print(access_token) # Token here ``` This logic leaves the Kinde client responsible for managing the access_token, but not for storing them. This is left up to the developer to implement. You can also get the current authentication status with `is_authenticated`. ```python if kinde_client.is_authenticated(): # Core here ``` The code above will check if a user is authenticated by checking its internal state. The down side is that the there will have to be an instance of the Kinde client for each user session. This is costly and not scalable. ```python if kinde_client.is_authenticated_token(access_token): # Core here ``` **Note:** The kinde_client object that is created stores the access_token. This means you need to create a kinde_client object for each unique user that is signing in to your application, so that you can keep track of whether the user is authenticated or not. ## Logout The SDK comes with a logout method that returns a logout URL. ```python kinde_client.logout(redirect_to=KINDE_POST_LOGOUT_REDIRECT_URL) @app.route("/logout") def logout(): return app.redirect( kinde_client.logout(redirect_to=KINDE_POST_LOGOUT_REDIRECT_URL) ) ``` ## Get user information To access the user information, use the `get_user_details` helper function: ```python kinde_client.get_user_details(); { "given_name":"Dave", "id":"abcdef", "family_name":"Smith", "email":"dave@smith.com", "picture": "https://link_to_avatar_url.kinde.com" } ``` ### View users in Kinde Go to the **Users** page in Kinde to see who has registered. ## User permissions After a user signs in and they are verified, the token return includes permissions for that user. [User permissions are set in Kinde](/manage-users/roles-and-permissions/user-permissions/), but you must also configure your application to unlock these functions. ```python permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ] ``` We provide helper functions to more easily access permissions: ```python kinde_client.get_permission("create:todos") kinde_client.get_permissions() ``` A practical example in code might look something like: ```python -if kinde_client.get_permission("create:todos").get("is_granted")): +if kinde_client.get_permission("create:todos").get("is_granted"): The code above will check against a session managed through the Kinde client. If you want to check against a specific access token, you can do the following: ```python permission: dict = kinde_client.get_permission_token(access_token, "create:todos") ``` ## Feature Flags We have provided a helper to grab any feature flag from `access_token`: ```python kinde_client.get_flag("theme"); { "code": "theme", "type": "string", "value": "pink", "is_default": False # whether the fallback value had to be used } kinde_client.get_flag("is_dark_mode"); { "code": "is_dark_mode", "type": "boolean", "value": True, "is_default": False } kinde_client.get_flag("create_competition", default_value = False); { "code": "create_competition", "type" => "boolean", "value": False, "is_default": True # because fallback value had to be used } kinde_client.get_flag("competitions_limit", default_value = 3, flat_type = "s"); kinde_client.get_flag("new_feature"); # this will return the flag value for the given access token kinde_client.get_flag_token(access_token, "new_feature"); ``` We also provide wrapper functions which should leverage `getFlag` above. **Get boolean flags** ```python kinde_client.get_boolean_flag("is_dark_mode"); kinde_client.get_boolean_flag("is_dark_mode", False); kinde_client.get_boolean_flag("new_feature", False); kinde_client.get_boolean_flag("new_feature"); kinde_client.get_boolean_flag("theme", False); kinde_client.get_boolean_flag_token(access_token, "new_feature"); ``` **Get string flags** ```python kinde_client.get_string_flag("theme"); kinde_client.get_string_flag("theme", False); kinde_client.get_string_flag("cta_color", False); kinde_client.get_string_flag("cta_color"); kinde_client.get_string_flag("is_dark_mode", False); kinde_client.get_string_flag_token(access_token, "cta_color"); ``` **Get integer flags** ```python kinde_client.get_integer_flag("competitions_limit"); kinde_client.get_integer_flag("competitions_limit", 3); kinde_client.get_integer_flag("team_count", 2); kinde_client.get_integer_flag("team_count"); kinde_client.get_integer_flag("is_dark_mode", False); kinde_client.get_integer_flag_token(access_token, "team_count"); ``` ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```python kinde_api_client_params["audience"] = "api.yourapp.com ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/) ## Overriding scope By default the `KindeSDK` requests the following scopes: - profile - email - offline - openid You can override this by passing scope into the `KindeSDK`. ```python kinde_api_client_params["scope"] = "profile email offline openid ``` ### Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```python kinde_client.get_claim("aud") kinde_client.get_claim("given_name", "id_token") kinde_client.get_claim_token(access_token, "given_name") ``` ## Organizations ### Create an organization To create a new organization within your application, you will need to run a similar function to below: ```python return app.redirect(kinde_client.create_org()) ``` ### Sign up and sign in to organizations Kinde has a unique code for every organization. You’ll have to pass this code through when you register a new user or sign in to a particular organization. Example function below: ```python kinde_api_client_params["org_code"] = 'your_org_code' @app.route("/login") def login(): return app.redirect(kinde_client.get_login_url()) @app.route("/register") def register(): return app.redirect(kinde_client.get_register_url()) ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```python { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": [ "openid", "profile", "email", "offline ], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```python { ... "org_codes": ["org_1234", "org_4567"], ... }; ``` There are two helper functions you can use to extract information: ```python kinde_client.get_organization() kinde_client.get_user_organizations() ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ### Token storage Once the user has successfully authenticated, you'll get a JWT and possibly a refresh token that should be stored securely. ## SDK API reference ### `domain` Either your Kinde instance url or your custom domain. e.g. `https://yourapp.kinde.com`. Type: `string` Required: Yes ### `callback_url` The url that the user will be returned to after authentication. Type: `string` Required: Yes ### `client_id` The ID of your application in Kinde. Type: `string` Required: Yes ### `grant_type` Define the grant type when using the SDK. Type: `string` Required: Yes ### `client_secret` The unique client secret associated with your application in Kinde. Type: `string` Required: No ### `code_verifier` PKCE works by having the app generate a random value at the beginning of the flow called a Code Verifier. Type: `string` Required: No, except for PKCE flow ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No Default: `openid profile email offline` ### `audience` The audience claim for the JWT. Type: `string` Required: No ### `org_code` Additional parameters that will be passed in the authorization request. Type: `string` Required: No ## KindeSDK methods ### `get_login_url` Constructs a redirect URL and sends the user to Kinde to sign in. Optional parameters are used for custom sign-up and sign-in and are documented [here](/authenticate/custom-configurations/custom-authentication-pages/). Arguments (optional): ```python auth_url_params: Optional[Dict[str, Dict[str, str]]] ``` Usage: ```python kinde_client.get_login_url() kinde_client.get_login_url({ "auth_url_params": { "connection_id": "conn_6a95dec504d34dc286dc80e8df9f6099" } }) ``` Sample output: ```python https://your_host.kinde.com/oauth2/auth?response_type=code&… ``` ### `get_register_url` Constructs a redirect URL and sends the user to Kinde to sign up. Optional parameters are used for custom sign-up and sign-in and are documented [here](/authenticate/custom-configurations/custom-authentication-pages/). Arguments (optional): ```python auth_url_params: Optional[Dict[str, Dict[str, str]]] ``` Usage: ```python kinde_client.get_register_url() kinde_client.get_register_url({ "auth_url_params": { "connection_id": "conn_6a95dec504d34dc286dc80e8df9f6099" } }) ``` Sample: ```python https://your_host.kinde.com/oauth2/auth?response_type=code&… ``` ### `logout` Logs the user out of Kinde. Arguments: ```python redirect_to: str ``` Usage: ```python kinde_client.logout(redirect_to="KINDE_POST_LOGOUT_REDIRECT_URL") ``` Sample: ```python https://your_host.kinde.com/logout?redirect=https://… ``` ### `fetch_token` Returns the raw access token from URL after logged in from Kinde. Arguments: ```python authorization_response: str ``` Usage: ```python kinde_client.fetch_token(authorization_response=”[http://localhost:8000?code=42..e9&state=d..t](https://example.com/github?code=42..e9&state=d..t)”) token: dict = kinde_client.fetch_token_value(authorization_response=”[http://localhost:8000?code=42..e9&state=d..t](https://example.com/github?code=42..e9&state=d..t)”) ``` Sample: ```python eyJhbGciOiJIUzI1... ``` ### `refresh_token` Get new access token from Kinde if existed `refresh_token`. Usage: ```python kinde_client.refresh_token() kinde_client._refresh_token_value(refresh_value) ``` ### `create_org` Return the redirect URL to sign up and create a new organization in your business. Usage: ```python kinde_client.create_org() ``` Sample: ```python https://your_host.kinde.com/oauth2/auth?response_type=code&… ``` ### `get_claim` Gets a claim from an access or ID token. Arguments: ```python claim: str, token_name?: str # default: access_token ``` Usage: ```python kinde_client.get_claim("given_name", "id_token") kinde_client.get_claim_token(access_token, "given_name") ``` Sample: ```python {"name": "given_name", "value": "David"} ``` ### `get_permission` Returns the state of a given permission. Arguments: ```python key: str ``` Usage: ```python kinde_client.get_permission(”read:todos”) kinde_client.get_permission_token(access_token, "read:todos") ``` Sample: ```python {”org_code”: "org_b235c067b7e4", is_granted: True} ``` ### `get_permissions` Returns all permissions for the current user for the organization they are signed into. Usage: ```python kinde_client.get_permissions() kinde_client.get_permissions_token(access_token) ``` Sample: ```python {"org_code": "org_b235c067b7e4", permissions: [ "create:users", "view:users" ]} ``` ### `get_organization` Get details for the organization your user is signed into. Usage: ```python kinde_client.get_organization() kinde_client.get_organization_token(access_token) ``` Sample: ```python {"org_code": "org_1234"} ``` ### `get_organizations` Gets an array of all organizations the user has access to. Usage: ```python kinde_client.get_user_organizations() kinde_client.get_user_organizations_token(access_token) ``` Sample: ```python {"org_codes": ["org_1234", "org_abcd"]} ``` ### `get_user_details` Returns the profile for the current user. Usage: ```python kinde_client.get_user_details() kinde_client.get_user_details_token(access_token) ``` Sample: ```python { "given_name":"Dave", "id":"abcdef", "family_name":"Smith", "email":"dave@smith.com", "picture": "https://link_to_avatar_url.abc.com" } ``` ### `get_flag` Gets a feature flag from an access token. Arguments: ```python code: str default_value?: str flag_type?: str ``` Usage: ```python kinde_client.get_flag("theme"); kinde_client.get_flag_token(access_token, "theme"); ``` Sample: ```python { "code": "theme", "type": "string", "value": "pink", "is_default": False } ``` ### `get_boolean_flag` Gets a boolean feature flag from an access token. Arguments: ```python code: str default_value?: str ``` Usage: ```python kinde_client.get_boolean_flag("is_dark_mode"); kinde_client.get_boolean_flag_token(access_token, "is_dark_mode"); ``` Sample: `True` or `False` ### `get_string_flag` Gets a string feature flag from an access token. Arguments: ```python code: str default_value?: str ``` Usage: ```python kinde_client.get_string_flag("theme"); kinde_client.get_string_flag_token(access_token, "theme"); ``` Sample: `“pink”` ### `get_integer_flag` Gets a integer feature flag from an access token Arguments: ```python code: str default_value?: str ``` Usage: ```python kinde_client.get_integer_flag("competitions_limit"); kinde_client.get_integer_flag_token(access_token, "competitions_limit"); ``` Sample: `5` ### `is_authenticated()` To check user authenticated or not. Sample: `true` or `false` If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Python SDK

> Complete guide for Python SDK including Flask and FastAPI integration, OAuth configuration, environment variables, and session management for Python 3.9+ applications.

Python SDK, Flask, FastAPI, OAuth, environment variables, callback URLs, session management
developer-tools, sdks, python, backend

The Kinde Python SDK allows developers to quickly and securely integrate a new or an existing Python application into the Kinde platform. The SDK supports both Flask and FastAPI frameworks through a single unified interface. ## Before you begin - Kinde Python SDK supports Python 3.9+ - If you haven't already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. If you are using a previous version of Python, you may need to refer to the [previous v1 SDK](/developer-tools/sdks/backend/python-sdk-v1/). If you're migrating from an older version of the SDK, see our [migration guide](https://github.com/kinde-oss/kinde-python-sdk/blob/main/MIGRATION.md) for detailed instructions. For new projects, you can find our [Starter Kit on GitHub](https://github.com/kinde-starter-kits/python-starter-kit). ## Install Install [PIP](https://pip.pypa.io/en/stable/installation/) and then execute the following command: ```bash pip install kinde-python-sdk ``` ### Environment variables The Kinde Python SDK uses environment variables for configuration. Here are all the supported variables: #### Required variables - `KINDE_CLIENT_ID` - Your application's client ID from Kinde - `KINDE_CLIENT_SECRET` - Your application's client secret from Kinde - `KINDE_REDIRECT_URI` - The callback URL where Kinde will redirect after authentication - `KINDE_HOST` - Your Kinde domain (e.g., `https://yourdomain.kinde.com`) - `KINDE_ISSUER_URL` - Your Kinde issuer URL (typically same as KINDE_HOST) - `GRANT_TYPE` - The OAuth grant type to use (e.g., `AUTHORIZATION_CODE_WITH_PKCE`) #### Optional variables - `KINDE_AUDIENCE` - The intended recipient of the access token (for API access) - `KINDE_CALLBACK_URL` - Alternative name for KINDE_REDIRECT_URI - `LOGOUT_REDIRECT_URL` - Where users are redirected after logout - `SITE_HOST` - Your application's host (default: `127.0.0.1`) - `SITE_PORT` - Your application's port (default: `5000`) - `SITE_URL` - Your application's base URL - `CODE_VERIFIER` - Required for PKCE flow (auto-generated if not provided) **Session management variables** (core SDK features): - `SECRET_KEY` - Used for session management and token security - `SESSION_TYPE` - Session storage type (e.g., `filesystem`) - `SESSION_PERMANENT` - Whether sessions are permanent (default: `False`) **Application configuration**: - `TEMPLATES_AUTO_RELOAD` - Whether to auto-reload templates (default: `True`) **Management API variables** (only needed if using Management API features): - `MGMT_API_CLIENT_ID` - Management API client ID - `MGMT_API_CLIENT_SECRET` - Management API client secret Example `.env` file: ```bash KINDE_CLIENT_ID=your_client_id KINDE_CLIENT_SECRET=your_client_secret KINDE_REDIRECT_URI=http://localhost:5000/api/auth/kinde_callback KINDE_HOST=https://yourdomain.kinde.com KINDE_ISSUER_URL=https://yourdomain.kinde.com GRANT_TYPE=AUTHORIZATION_CODE_WITH_PKCE SITE_HOST=localhost SITE_PORT=5000 SITE_URL=http://localhost:5000 LOGOUT_REDIRECT_URL=http://localhost:8000 SECRET_KEY=your_secret_key SESSION_TYPE=filesystem SESSION_PERMANENT=False TEMPLATES_AUTO_RELOAD=True ``` ### Set callback URLs 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example, `http://localhost:8000/callback` - Allowed logout redirect URLs - for example, `http://localhost:8000` 3. Select **Save**. ### Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Note that each environment needs to be set up independently, so you need to use the Environment subdomain in the code block above for those new environments. ## Configure your app The OAuth client is now automatically configured based on the framework you're using. Simply import the OAuth class from the auth module and create an instance: ```python from kinde_sdk.auth.oauth import OAuth # For Flask applications from flask import Flask app = Flask(__name__) oauth = OAuth( framework="flask", app=app # optional: pass your Flask app instance ) # For FastAPI applications from fastapi import FastAPI app = FastAPI() oauth = OAuth( framework="fastapi", app=app # optional: pass your FastAPI app instance ) ``` The SDK will automatically detect and configure the appropriate framework implementation based on the framework parameter and app instance you provide. ## Sign in and sign up The Kinde client provides methods for easy sign in and sign up. You can add buttons in your HTML as follows: ```html <div class="navigation"> <a href="{{ url_for('login') }}" type="button">Sign in</a> <a href="{{ url_for('register') }}" type="button">Sign up</a> </div> ``` ### Automatic Route Registration The framework wrapper can automatically register all necessary routes. For Flask: ```python from kinde_sdk.auth.oauth import OAuth from flask import Flask app = Flask(__name__) oauth = OAuth( framework="flask", app=app ) ``` For FastAPI: ```python from kinde_sdk.auth.oauth import OAuth from fastapi import FastAPI app = FastAPI() oauth = OAuth( framework="fastapi", app=app ) ``` ### Manual route implementation If you prefer to implement the routes manually, here's how you can do it: For Flask: ```python import asyncio from flask import Flask, request, session, redirect from kinde_sdk.auth.oauth import OAuth app = Flask(__name__) oauth = OAuth( framework="flask", app=app ) @app.route('/login') def login(): """Redirect to Kinde login page."" loop = asyncio.get_event_loop() login_url = loop.run_until_complete(oauth.login()) return redirect(login_url) @app.route('/register') def register(): """Redirect to Kinde registration page."" loop = asyncio.get_event_loop() register_url = loop.run_until_complete(oauth.register()) return redirect(register_url) @app.route('/callback') def callback(): """Handle the OAuth callback from Kinde."" try: code = request.args.get('code') state = request.args.get('state') if not code: return "Authentication failed: No code provided", 400 # Generate a unique user ID for the session user_id = session.get('user_id') or str(uuid.uuid4()) # Use OAuth's handle_redirect method to process the callback loop = asyncio.get_event_loop() result = loop.run_until_complete(oauth.handle_redirect(code, user_id, state)) # Store user ID in session session['user_id'] = user_id return redirect('/') except Exception as e: return f"Authentication failed: {str(e)}", 400 @app.route('/logout') def logout(): """Logout the user and redirect to Kinde logout page."" user_id = session.get('user_id') session.clear() loop = asyncio.get_event_loop() logout_url = loop.run_until_complete(oauth.logout(user_id)) return redirect(logout_url) @app.route('/user') def get_user(): """Get the current user's information."" try: if not oauth.is_authenticated(request): loop = asyncio.new_event_loop() asyncio.set_event_loop(loop) try: login_url = loop.run_until_complete(oauth.login()) return redirect(login_url) finally: loop.close() return oauth.get_user_info(request) except Exception as e: return f"Failed to get user info: {str(e)}", 400 ``` For FastAPI: ```python from fastapi import FastAPI, Request from fastapi.responses import RedirectResponse @app.get("/login") async def login(request: Request): url = await oauth.login() return RedirectResponse(url=url) @app.get("/register") async def register(request: Request): url = await oauth.register() return RedirectResponse(url=url) @app.get("/callback") async def callback(request: Request, code: str, state: Optional[str] = None): try: result = await oauth.handle_redirect(code, state) return RedirectResponse(url="/") except Exception as e: return HTMLResponse(f"Authentication failed: {str(e)}") @app.get("/logout") async def logout(request: Request): request.session.clear() return RedirectResponse(url=await oauth.logout()) @app.get("/user") async def get_user(request: Request): if not oauth.is_authenticated(request): return RedirectResponse(url=await oauth.login()) return oauth.get_user_info(request) ``` The manual implementation gives you more control over the authentication flow and allows you to add custom logic like session management, error handling, and logging. Note that Flask requires special handling of async methods using `asyncio` since it doesn't natively support async/await like FastAPI does. ## User permissions The Kinde Python SDK provides a simple way to check user permissions in your application. First, import the permissions module: ```python from kinde_sdk.auth import permissions ``` ### Checking permissions To check if a user has a specific permission: ```python # Check a single permission permission = await permissions.get_permission("create:todos") if permission["isGranted"]: # User has permission print(f"User has permission in organization: {permission['orgCode']}") ``` To get all permissions for the current user: ```python # Get all permissions all_permissions = await permissions.get_permissions() print(f"User belongs to organization: {all_permissions['orgCode']}") print("User permissions:", all_permissions["permissions"]) ``` ### Practical examples Here's how to use permissions in your application: ```python # Example 1: Conditional Feature Access async def create_todo_button(): permission = await permissions.get_permission("create:todos") if permission["isGranted"]: return "<button>Create Todo</button> return None # Example 2: Permission-Based API Endpoint @router.post("/todos") async def create_todo(todo_data: dict): permission = await permissions.get_permission("create:todos") if not permission["isGranted"]: raise HTTPException(status_code=403, detail="Permission denied") # Create todo logic here... ``` ### Common permission patterns Here are some common permission patterns you might use: ```python # Resource-based permissions "create:todos "read:todos "update:todos "delete:todos # Feature-based permissions "can:export_data "can:manage_users "can:view_analytics # Organization-based permissions "org:manage_members "org:view_billing "org:update_settings ``` For more information about setting up permissions in Kinde, see [User permissions](/manage-users/roles-and-permissions/user-permissions/). ## Feature flags The Kinde Python SDK provides a simple way to access feature flags from your application. First, import the feature flags module: ```python from kinde_sdk.auth import feature_flags ``` ### Getting feature flags To get a specific feature flag value: ```python # Get a string feature flag theme_flag = await feature_flags.get_flag("theme") print(f"Current theme: {theme_flag.value}") # Get a boolean feature flag with default value dark_mode = await feature_flags.get_flag("is_dark_mode", default_value=False) if dark_mode.value: print("Dark mode is enabled") # Get a numeric feature flag competitions_limit = await feature_flags.get_flag("competitions_limit") print(f"User can create up to {competitions_limit.value} competitions") ``` To get all feature flags for the current user: ```python # Get all feature flags all_flags = await feature_flags.get_all_flags() for code, flag in all_flags.items(): print(f"- {code}: {flag.value} ({flag.type})") ``` ### Practical examples Here's how to use feature flags in your application: ```python # Example 1: Conditional Feature Rendering async def render_create_competition_button(): can_create = await feature_flags.get_flag("create_competition", default_value=False) if can_create.value: return "<button>Create Competition</button> return None # Example 2: Theme Configuration async def get_user_theme(): theme = await feature_flags.get_flag("theme", default_value="light") dark_mode = await feature_flags.get_flag("is_dark_mode", default_value=False) return { "theme": theme.value, "is_dark_mode": dark_mode.value } # Example 3: Feature Limits @router.post("/competitions") async def create_competition(competition_data: dict): limit_flag = await feature_flags.get_flag("competitions_limit", default_value=3) current_count = await get_user_competition_count() if current_count >= limit_flag.value: raise HTTPException( status_code=403, detail=f"Competition limit reached (max: {limit_flag.value}) ) # Create competition logic here... ``` ### Feature flag types The SDK supports the following feature flag types: ```python # String flags { "t": "s", "v": "pink" } # Boolean flags { "t": "b", "v": true } # Integer flags { "t": "i", "v": 5 } ``` ### Common use cases ```python # Feature Toggles can_use_feature = await feature_flags.get_flag("enable_new_feature", default_value=False) # User Preferences theme = await feature_flags.get_flag("theme", default_value="light") dark_mode = await feature_flags.get_flag("is_dark_mode", default_value=False) # Usage Limits max_uploads = await feature_flags.get_flag("max_uploads", default_value=10) # A/B Testing test_group = await feature_flags.get_flag("ab_test_group", default_value="control") ``` ## Claims The Kinde Python SDK provides a simple way to access user claims from your application. First, import the claims module: ```python from kinde_sdk.auth import claims ``` ### Getting claims To get a specific claim from the user's tokens: ```python # Get the audience claim from the access token claim = await claims.get_claim("aud") print(f"Token audience: {claim['value']}") # Get the given_name claim from the ID token claim = await claims.get_claim("given_name", token_type="id_token") print(f"User's given name: {claim['value']}") ``` To get all claims from the user's tokens: ```python # Get all claims from the access token all_claims = await claims.get_all_claims() for claim_name, claim_value in all_claims.items(): print(f"- {claim_name}: {claim_value}") # Get all claims from the ID token id_token_claims = await claims.get_all_claims(token_type="id_token") ``` ### Practical examples Here's how to use claims in your application: ```python # Example 1: Accessing User Information async def get_user_profile(): given_name = await claims.get_claim("given_name", token_type="id_token") family_name = await claims.get_claim("family_name", token_type="id_token") if given_name["value"] and family_name["value"]: return { "name": f"{given_name['value']} {family_name['value']}", "email": (await claims.get_claim("email", token_type="id_token"))["value"] } return None # Example 2: Token Validation @router.get("/api/protected") async def protected_endpoint(): aud_claim = await claims.get_claim("aud") if not aud_claim["value"] or "api.yourapp.com" not in aud_claim["value"]: raise HTTPException(status_code=401, detail="Invalid token audience") return {"message": "Access granted"} ``` ### Common claims Here are some common claims you might want to access: ```python # User Information (ID Token) "given_name "family_name "email "picture # Token Information (Access Token) "aud" # Audience "iss" # Issuer "exp" # Expiration time "iat" # Issued at time # Organization Information "org_code "org_name "org_id ``` ## Organizations ### Create an organization To create a new organization within your application, you will need to run a similar function to below: ```python return app.redirect(oauth.create_org()) ``` ### Sign up and sign in to organizations Kinde has a unique code for every organization. You'll have to pass this code through when you register a new user or sign in to a particular organization. Example function below: ```python oauth.get_claim("org_code") @app.route("/login") def login(): return app.redirect(oauth.get_login_url()) @app.route("/register") def register(): return app.redirect(oauth.get_register_url()) ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```python { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": [ "openid", "profile", "email", "offline ], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```python { ... "org_codes": ["org_1234", "org_4567"], ... }; ``` There are two helper functions you can use to extract information: ```python oauth.get_organization() oauth.get_user_organizations() ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ### Token and session management The Kinde Python SDK automatically handles token and session management for your application. Once a user has successfully authenticated, the SDK manages: - **Token acquisition and storage**: Automatically obtains and securely stores access tokens, ID tokens, and refresh tokens - **Token refresh**: Automatically refreshes tokens when they expire - **Session management**: Handles user sessions across requests - **Framework integration**: Works seamlessly with Flask and FastAPI session systems The SDK uses the session configuration from your environment variables (`SECRET_KEY`, `SESSION_TYPE`, `SESSION_PERMANENT`) to manage sessions appropriately for your chosen framework. #### Token types The SDK supports two types of tokens: 1. **Access Token** (`token_type="access_token"`): - Contains authorization information - Used for API access - Contains permissions and organization context - Default token type 2. **ID Token** (`token_type="id_token"`): - Contains user identity information - Used for user profile data - Contains name, email, and other user details - Must be explicitly requested using `token_type="id_token"` #### Session handling The SDK automatically integrates with your framework's session system: - **Flask**: Uses Flask's built-in session management - **FastAPI**: Integrates with FastAPI's session handling You don't need to manually manage tokens or sessions - the SDK handles this automatically for you. ## Management API The Kinde Python SDK provides a Management API client for interacting with Kinde's management endpoints. This allows you to programmatically manage users, organizations, and other resources. ### Getting started To use the Management API, you'll need to initialize the client with your Kinde credentials: ```python from kinde_sdk.auth.oauth import OAuth oauth = OAuth( framework="flask", app=app ) # Get the management client management = oauth.get_management() ``` ### Available endpoints The Management API provides methods for common operations on resources. Here are some examples: ```python # List users users = await management.get_users() # Get a specific user user = await management.get_user(user_id="user_123") # Create a new user new_user = await management.create_user( email="user@example.com", given_name="John", family_name="Doe ) # Update a user updated_user = await management.update_user( user_id="user_123", given_name="Johnny ) # Delete a user await management.delete_user(user_id="user_123") ``` ### Organization management ```python # List organizations orgs = await management.get_organizations() # Get a specific organization org = await management.get_organization(org_id="org_123") # Create a new organization new_org = await management.create_organization( name="My Organization ) # Update an organization updated_org = await management.update_organization( org_id="org_123", name="Updated Name ) # Delete an organization await management.delete_organization(org_id="org_123") ``` ### Error handling The Management API methods will raise exceptions for API errors. It's recommended to handle these appropriately: ```python try: user = await management.get_user(user_id="user_123") except Exception as e: # Handle API-specific errors print(f"Error: {e}") ``` ### Token management The Management API client has its own token management system for API authentication, which is separate from the core SDK's user session token management. The Management API client automatically handles: - **accessing Kinde Management API endpoints**: Obtains tokens for accessing Kinde's management endpoints - **Token refresh**: Automatically refreshes management API tokens when they expire - **Token storage**: Securely stores management API tokens - **Thread safety**: Ensures thread-safe token handling for concurrent requests You don't need to manually manage Management API tokens - the client handles this for you. This is different from the core SDK's user session token management, which handles user authentication tokens automatically. ### Best practices 1. Always use async/await when calling Management API methods 2. Handle API errors appropriately 3. Cache results when appropriate to reduce API calls 4. Use appropriate error handling for production environments 5. Keep your client credentials secure For more information about the Management API endpoints and capabilities, see the [Kinde Management API documentation](https://docs.kinde.com/kinde-apis/management/).

# Developer tools - Sdks - Remix SDK

> Complete guide for Remix SDK including authentication setup, route protection, session management, and internationalization for Remix applications.

Remix SDK, authentication, route protection, session management, internationalization, organizations
developer-tools, sdks, remix, backend

This SDK is for developers using Remix. New to Kinde? [Get started here](/get-started/guides/first-things-first/). ## Create a back end application in Kinde The Remix SDK works with back end applications. Create one in Kinde. See [Add and manage applications](/build/applications/add-and-manage-applications/). ## Install the Kinde Remix SDK into your Remix project <PackageManagers pkg="@kinde-oss/kinde-remix-sdk" /> ## **Set callback URLs** 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example `http://localhost:3000/kinde-auth/callback` - Allowed logout redirect URLs - for example `http://localhost:3000` 3. Select **Save**. ## Set up environment variables While you are in your Kinde backend application, copy the Client ID and Client secret, redirect URLs, etc. Add these details to the Environment variables for your application. `.env` ```shell KINDE_CLIENT_ID=<your-client-id> KINDE_CLIENT_SECRET=<your-client-secret> KINDE_ISSUER_URL=https://<your-kinde-subdomain>.kinde.com KINDE_SITE_URL=http://localhost:3000 KINDE_POST_LOGOUT_REDIRECT_URL=http://localhost:3000 KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:3000 ``` ## Set up authentication routes Create this file `app/routes/kinde-auth.$index.tsx`. ```jsx import { handleAuth } from "@kinde-oss/kinde-remix-sdk"; import { LoaderFunctionArgs } from "@remix-run/node"; export async function loader({ params, request }: LoaderFunctionArgs) { return await handleAuth(request, params.index); } ``` ## Authentication ### Sign up and sign in Authenticate users by redirecting them to `/kinde-auth/login` and `/kinde-auth/register` with the Remix `<Link />` component. ```jsx import { Link } from "@remix-run/react"; <Link to={"/kinde-auth/login"}> Login </Link> <Link to={"/kinde-auth/register"}> Register </Link> ``` **Sign into organizations** To log into specific organizations you can specify the `org_code` in the search params. ```typescript <Link to={{ pathname: "/kinde-auth/login", search: "?org_code=org_af90783xxxx", }} > Sign in </Link> ``` **Internationalization** You can set the language you wish your users to see when they hit the login flow by including `lang` in the search params. ```typescript <Link to={{ pathname: "/kinde-auth/login", search: "?lang=fr", }} > Sign in </Link> ``` ### Logout This is implemented in much the same way as signing up or signing in. Use the remix `<Link />` component to redirect users to `/kinde-auth/logout`. ```jsx import {Link} from "@remix-run/react"; <Link to={"/kinde-auth/logout"}>Logout</Link>; ``` ### Protect routes In the `loader`, check if the user exists and then handle route protection there. In this example we will redirect the user to sign in if there is no login data. ```typescript export const loader = async ({request}: LoaderFunctionArgs) => { const {getUser, headers} = await getKindeSession(request); const user = await getUser(); if (user === null) { throw redirect("/kinde-auth/login"); } return json({user}, {headers}); }; ``` <Aside> Note that passing the headers through in the `json` response is required to ensure refresh tokens can be used in the background to keep the session alive. </Aside> ### Return to a specific page after authentication After a user has logged in following a redirect from a protected route, we usually want to send the user back to the page they were trying to access prior to logging in. This can be achieved with the `returnTo` search parameter added to the login/register url. ```typescript export const loader = async ({request}: LoaderFunctionArgs) => { const {getUser, headers} = await getKindeSession(request); const user = await getUser(); if (user === null) { throw redirect("/kinde-auth/login?returnTo=/protected-route"); } return json({user}, {headers}); }; ``` ### Call a function after authentication After a user has authenticated, you may want to call a function to update your database or perform some other action. This can be achieved by passing `onRedirectCallback` to the handleAuth function. ```typescript import {handleAuth} from "@kinde-oss/kinde-remix-sdk"; import {LoaderFunctionArgs} from "@remix-run/node"; export async function loader({params, request}: LoaderFunctionArgs) { return await handleAuth(request, params.index, { onRedirectCallback({user}) { console.log("This is called after the user is authenticated!", user); } }); } ``` ## Kinde session data - `getKindeSession()` ```jsx const { getUser, getBooleanFlag, getFlag, getIntegerFlag, getStringFlag, getPermission, getClaim, getClaimValue, getOrganization, getPermissions, getToken, getUserOrganizations, getUserProfile, isAuthenticated } = await getKindeSession(request); ``` ### **Claims** `getClaim(claim, type)`: Fetches a specific claim from the user's session based on the provided claim name and type. Returns an object with `name` and `value` properties, or null on error. `getClaimValue(claim, type)`: Similar to `getClaim`, but retrieves only the claim's value. Returns the value or null on error. ### **Authentication and user information** `getToken()`: Retrieves the current access token from the session. Returns the token or null when the user is not authenticated or on error. `refreshTokens()`: Attempts to refresh the user's access and refresh tokens. Returns true on success or throws an error. `isAuthenticated()`: Checks if a valid session exists, indicating a logged-in user. Returns true if authenticated, otherwise false. `getUser()`: Retrieves the user information associated with the current session. Returns a user object or null on error or if the user is not authenticated. `getUserProfile()`: Fetches the user's profile details from Kinde. Returns a user profile object or null on error or if the user is not authenticated. ### **Feature flags** `getFlag(code, defaultValue, type)`: Retrieves a feature flag value by code. Optionally provides a default value and type for parsing the retrieved value. Returns the flag value or the default value on error. `getBooleanFlag(code, defaultValue)`: Retrieves a boolean feature flag. `getIntegerFlag(code, defaultValue)`: Retrieves an integer feature flag. `getStringFlag(code, defaultValue)`: Retrieves a string feature flag. ### **Permissions** `getPermission(permission)`: Checks if a specific permission is granted to the user. Returns true if granted, false otherwise. `getPermissions()`: Retrieves all permissions associated with the user's session. Returns an array of permission strings or an empty array on error. ### **Organizations** `getOrganization()`: Fetches information about the user's current organization. Returns an organization object or null on error. `getUserOrganizations()`: Retrieves a list of organizations the user belongs to. Returns an array of organization objects or an empty array on error. ## Using refresh tokens Refresh tokens used to keep the user session alive. You can pass through the `headers` from `getKindeSession` through to the loader fetch response. Or you can use the `refreshTokens` function to refresh the user's access and refresh tokens manually. ```typescript // Refresh tokens in the background export const loader = async ({request}: LoaderFunctionArgs) => { const {headers} = await getKindeSession(request); return json({paylod: "Refreshing tokens in the backgrounf"}, {headers}); }; // Refresh tokens manually export const action = ({request}: ActionFunctionArgs) => { const {refreshTokens} = await getKindeSession(request); const headers = refreshTokens(); return redirect("/profile", {headers}); }; ``` ## Get up-to-date Kinde data To get up-to-date Kinde data into your app you can use the `refreshTokens` function in an `action` function and then include the headers in the response. ```jsx export const action = ({request}: ActionFunctionArgs) => { const {refreshTokens} = await getKindeSession(request); const headers = refreshTokens(); return redirect('/profile', {headers}); } ``` ## Kinde Management API To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) ``` ```

# Developer tools - Sdks - Ruby SDK

> Complete guide for Ruby SDK including Rails integration, OAuth2 flows, AuthController, and configuration for Ruby-based applications.

Ruby SDK, Rails, OAuth2, client credentials, authorization code, PKCE, AuthController
developer-tools, sdks, ruby, backend

{/* @case-police-ignore Api */} The Kinde Ruby SDK gem allows developers to integrate Kinde API into any ruby-based applications, Rails or non-Rails. The gem contains all the related oauth2 authorization, and 3 pre-built OAuth flows: **client credentials**, **authorization code** and **authorization code with PKCE code verifier**. You can also view the [Ruby docs](https://github.com/kinde-oss/kinde-ruby-sdk) and [Ruby starter kit](https://github.com/kinde-starter-kits/ruby-starter-kit) in GitHub. ## Register for Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com` ## Install Add this line into your Gemfile and run a bundler or install manually through a gem command. ```ruby gem 'kinde_sdk', '~> 1.6.1' ``` ## Set callback URLs 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example, `http://localhost:3000/kinde_sdk/callback` - Allowed logout redirect URLs - for example, `http://localhost:3000` 3. Select **Save**. ## Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Note that each environment needs to be set up independently, so you need to use the Environment subdomain in the code block above for those new environments. ## Configure your app ### **Environment variables** The following variables need to be replaced in the code snippets below. - `KINDE_DOMAIN` - your Kinde domain - e.g. `https://your_kinde_domain.kinde.com` - `KINDE_REDIRECT_URL` - your callback url, make sure this URL is under your allowed callback redirect URLs. - e.g. `http://localhost:3000/kinde_sdk/callback` - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out, make sure this URL is under your allowed logout redirect URLs. - e.g. `http://localhost:3000` - `KINDE_CLIENT_ID` - you can find this on the **Application details** page - e.g. `your_kinde_client_id` - `KINDE_CLIENT_SECRET` - you can find this on the **Application details** page - e.g. `your_kinde_client_secret` ## Integrate with your app You can easily configure via the gem. For example, in a typical Rails-app it can be configured through the initializer file: ```ruby KindeSdk.configure do |c| c.domain = domain c.client_id = client_id c.client_secret = client_secret c.callback_url = callback_url c.logout_url = logout_url # c.scope = 'openid offline email profile' # default value # c.pkce_enabled = true # default value # c.authorize_url = '/oauth2/auth' # default value # c.token_url = '/oauth2/token' # default value # c.debugging = false # default value c.logger = Rails.logger end ``` The snippet above contains all the possible configuration values. Here is a detailed explanation of them: - `Domain` refers to your organization - for example, `your-biz.kinde.com`. - `Client id` and `Client secret` can be found in Kinde. Go to **Settings > Applications > [yourapplication] > Details.** - `Callback url` (or redirect URI) refers to the callback processing action. The URL must be defined in the **Allowed callback URLs** section of your application. - `Logout url` will open when the user signs out. The URL must be defined in the **Allowed callback URLs** section of your application. - `Scope` is an OAuth special parameter which is used to limit some rights. - `PKCE enabled` is a flag that can turn off PKCE auth flow. By default it is activated to improve security. - `Authorize url` and `Token url` are paths to Oauth2 methods in kinde. - `Debugging` set to `True` for long request logs. Can be useful while developing your application. - `Business name` is a parameter which is used in requests building. By default it is extracted from your Kinde `domain` endpoint. For example, if your domain is `your-biz.kinde.com`, then business name will be set to`your-biz`. You don't need to change it. - `Logger` set to whichever kind of loggers you are using. By default it is set to `Rails.logger` if gem is used in rails application or `Logger.new(STDOUT)` if it is not a rails app. - `auto_refresh_tokens` defines the default behaviour on API instance method calls. If the config is set to false, there will not be any auto refreshes during method calling, otherwise each time the client will try to refresh expired tokens if `expires_at` is present (see [token expiration and refreshing](https://github.com/kinde-oss/kinde-ruby-sdk#token-expiration-and-refreshing) section). These variables can be handled with any system you want: .env files, settings.yml or any type of config files. For example, .env file (you can name variables yourself): ```ruby KINDE_DOMAIN=https://<your_kinde_subdomain>.kinde.com KINDE_CLIENT_ID=<your_kinde_client_id> KINDE_CLIENT_SECRET=<your_kinde_client_secret> KINDE_CALLBACK_URL=http://localhost:3000/callback KINDE_LOGOUT_URL=http://localhost:3000/logout_callback ``` This can be used as: ```ruby KindeSdk.configure do |c| c.domain = ENV['KINDE_DOMAIN'] c.client_id = ENV['KINDE_CLIENT_ID'] # .... end ``` The `KINDE_MANAGEMENT_CLIENT_ID` and the `KINDE_MANAGEMENT_CLIENT_SECRET` can be used for accessing the Kinde management API using the `client_credentials` grant, without redirection, see details in the [management API section](https://github.com/kinde-oss/kinde-ruby-sdk#management-api). ```ruby KindeSdk.client_credentials_access( client_id: ENV["KINDE_MANAGEMENT_CLIENT_ID"], # client_id: # default to @config.client_id client_secret: ENV["KINDE_MANAGEMENT_CLIENT_SECRET"], # client_secret: # default to @config.client_secret, # audience: # default to "#{@config.domain}/api", # domain: # default to @config.domain ) ``` ## Rails Authentication integration The Kinde Ruby SDK gem provides a Rails authentication integration that simplifies the process of integrating Kinde authentication into your Rails application. This is provided by the AuthController class, which is responsible for handling the authentication flow and redirecting users to the appropriate page. ### AuthController The AuthController class is responsible for handling the authentication flow and redirecting users to the appropriate page. It is provided by the SDK gem and is located in 'lib/kinde_sdk/controllers/auth_controller.rb'. ### Routes To enable the AuthController, you need to add the following routes to your `config/routes.rb` file: ```ruby namespace :kinde_sdk do get "callback" => "auth#callback get "auth" => "auth#auth get "logout" => "auth#logout get "logout_callback" => "auth#logout_callback get "client_credentials_auth" => "auth#client_credentials_auth end ``` If you decide instead to use the rails engine, you can add the following to your `config/routes.rb` file: ```ruby mount KindeSdk::Engine, at: "/kinde_sdk" ``` ### Usage the AuthController in your application To use the AuthController consume the routes in your application. For example in a Rails view file use the auth path to trigger the login flow: ```ruby <div class="buttons"> <a class="button is-primary" href="<%= kinde_sdk_auth_path %>"> <strong>Log in</strong> </a> </div> ``` The full list of paths exposed by the controller are the following: ```ruby kinde_sdk_auth_path kinde_sdk_callback_path kinde_sdk_logout_path kinde_sdk_logout_callback_path kinde_sdk_client_credentials_auth_path ``` #### Using the engine When using the AuthController with the engine your application can use the paths as follows: ```ruby <div class="buttons"> <a class="button is-primary" href="<%= kinde_sdk.auth_path %>"> <strong>Log in</strong> </a> </div> ``` The full list of paths exposed by the engine are the following: ```ruby kinde_sdk.auth_path kinde_sdk.callback_path kinde_sdk.logout_path kinde_sdk.logout_callback_path kinde_sdk.client_credentials_auth_path ``` ## Sign in and registration The Kinde client provides methods for easy login and registration. For this, you need to acquire an auth URL by calling: ```ruby KindeSdk.auth_url( # client_id: # default to @config.client_id, # client_secret: # default to @config.client_secret, # domain: # default to @config.domain, # redirect_uri: # default to @config.callback_url, **kwargs ) { url: "https://<domain>/oauth2/auth?client_id=<client_id>&code_challenge=<generated code>&code_challenge_method=S256&redirect_uri=<redirect_uri>&response_type=code&scope=openid+offline+email+profile&state=<random string>", code_verifier: "<challenge verifier>" } ``` By default, gem uses the PKCE verification flow. This means that the `code challenge` param will be added to your auth url, and the method returns verification string for the code. This can also be used in token requests. You can disable PKCE by setting `pkce_enabled` to false in your configuration. In this case, `KindeSdk.auth_url` will only return a url: ```ruby KindeSdk.auth_url ``` If you are about to use PCKE, our recommendation is to save the code verifier output somewhere near your later tokens output. The `#auth_url` method can have another redirect url just in runtime. Use it with the argument: ```text KindeSdk.auth_url(redirect_uri: "your-another-desired-callback") ``` You can put the link right in your web-application page or you can use it under the hood through redirection. After visiting the link you'll be redirected to Kinde's sign in/sign up form. And after authorizing in Kinde, you'll be redirected to callback url. ## Manage redirects The next step is to extract code from the callback redirect. Your callback endpoint should contain logic to call the exchange method. Callback is triggered in the body with the code. Use the whole `params` object or to extract code from `params["code"]`. Next, exchange access and refresh tokens. You will receive `code` as the parameter in the callback endpoint, and `code_verifier` (if PKCE enabled) as per the previous step. ```ruby KindeSdk.fetch_tokens( params_or_code, # client_id: # default to @config.client_id, # client_secret: # default to @config.client_secret, # domain: # default to @config.domain, # code_verifier: # default to nil, # redirect_uri: # default to @config.callback_url ) {"access_token"=>"eyJhbGciOiJSUzI1NiIsIm...", "expires_in"=>86399, "id_token"=>"eyJhbGciOiJSUz", "refresh_token"=>"eyJhbGciOiJSUz", "scope"=>"openid offline email profile", "token_type"=>"bearer"} ``` Save the whole hash in your session, redis or any other storage, and use it to build your client. ```ruby session[:kinde_auth] = KindeSdk.fetch_tokens(code).slice(:access_token, :refresh_token, :expires_at) client = KindeSdk.client(session[:kinde_auth]) # => #<KindeSdk::Client:0x00007faf31e5ecb8> ``` ## Fetch tokens The `#fetch_tokens` method can have another callback url (just lake the `#auth_url` method), just use it in a same way: ```text KindeSdk.fetch_tokens(code, redirect_uri: "your-another-desired-callback") ``` ### **Token expiration and refreshing** For proper refreshing you'll need to use `access_token`, `refresh_token` and probably `expires_in` if you want to know if your access token still actual. Use these two methods to work with refreshing: ```text KindeSdk.token_expired?(session[:kinde_auth])# => false KindeSdk.refresh_token(session[:kinde_auth])# => {"access_token" => "qwe...", "refresh_token" => "fqw...", "expires_at"=>1685474405} ``` Or from your client instance: ```text client.token_expired?# => false client.refresh_token# => {"access_token" => "qwe...", ...., "expires_at"=>1685474405} ``` If you are calling `#refresh_token` on a client instance, the instance token data will be automatically updated. If you are calling `KindeSdk#refresh_token`, you'll need to store new token data in your configured storage (redis, session, etc). ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde `#auth_url` method to request an audience be added to the provided token: ```text KindeSdk.auth_url(audience: "https://your-app.kinde.com/api") ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/) ## **Overriding scope** By default `KindeSdk` requests the following scopes: - profile - email - offline - openid You are able to change it - by configuring as per the integration instructions above - or by direct param passing into `auth_url` method: ```text KindeSdk.auth_url(scope: "openid offline") ``` ## **Getting claims** We have provided a helper to grab any claim from your ID or access tokens. The helper defaults to access tokens: ```text client = KindeSdk.client(session[:kinde_auth]) client.get_claim("aud")#=> {name: "aud", value: ['api.yourapp.com']} client.get_claim("scp")#=> {name: "scp", value: ["openid", "offline"]} ``` By default claim data is fetched from access_token, but you can also do it with id_token as well: ```text client.get_claim("some-claim", :id_token)# => {name: "some-claim", value: "some-data"} ``` ## **User permissions** After a user signs in and they are verified, the token return includes permissions for that user. [User permissions](/manage-users/roles-and-permissions/user-permissions/) are set in Kinde, but you must also configure your application to unlock these functions. ```text permissions" => [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ] ``` We provide helper functions to more easily access permissions: ```text client = KindeSdk.client(session[:kinde_auth]) client.get_permission("create:todos")# => {org_code: "org_1234", is_granted: true} client.permission_granted?("create:todos")# => true client.permission_granted?("create:orders")# => false ``` ## **Feature flags** Kinde provides [feature flag functionality](/releases/about/about-feature-flags/). So, the SDK provides methods to work with them. Here’s an example: ```text { "asd": { "t": "b", "v": true }, "eeeeee": { "t": "i", "v": 111 }, "qqq": { "t": "s", "v": "aa" } } ``` Note that `t` refers to type (`b` - boolean, `i` - integer, `s` - string) and `v` refers to value. You can fetch these flags with methods below: ```text client.get_flag("asd")# => { code: "asd", is_default: false, type: "boolean", value: true } client.get_flag("eeeeee")# => { code: "eeeeee", is_default: false, type: "integer", value: 111 } client.get_flag("qqq")# => { code: "qqq", is_default: false, type: "string", value: "aa" } ``` If you try to call an call undefined flag, you will get an exception. In addition to fetch existing flags, you can use fallbacks. For example: ```text client.get_flag("undefined", { default_value: true })# => { code: "undefined", is_default: true, value: true } ``` Set the type explicitly (output omitted except value): ```text client.get_flag("undefined_bool", { default_value: true }, "b")# => value = true client.get_flag("undefined_string", { default_value: "true" }, "s")# => value = "true client.get_flag("undefined_int", { default_value: 111 }, "i")# => value = 111 ``` In the example above if you try to set default_value of different types (for example: `get_flag("flag", {default_value: 1}, "s")`), you'll get an exception. Also you have wrapper methods, for example: ```text client.get_boolean_flag("eeeeee")# => leads to exception "Flag eeeeee value type is different from requested type client.get_boolean_flag("asd")# => true client.get_boolean_flag("undefined", false)# => false client.get_integer_flag("asd")# => exception "Flag asd value type is different from requested type client.get_integer_flag("undefined", "true")# => exception "Flag undefined value type is different from requested type client.get_integer_flag("eeeeee")# => 111 client.get_integer_flag("undefined", 123)# => 123 client.get_string_flag("qqq")# => "aa client.get_string_flag("undefined", "111")# => "111 ``` ## **Client usage** The API part is mounted in the `KindeSdk::Client` instance, so the short usage is: ```text client.oauth.get_user client.users.create_user(args) client.organizations.get_organizations ``` The method name will be the same as API module from the SDK without `-Api` part. Alternatively, you can initialize each API module: ```text api_client = KindeSdk.api_client(access_token) instance_client = KindeApi::UsersApi.new(api_client) instance_client.create_user(args) ``` ## Logout For logout you need to call in the controller (in the case of a rails app): ```ruby redirect_to KindeSdk.logout_url, allow_other_host: true ``` Your app should handle the logout callback url (which was configured separately). After calling redirect to logout_url (if set), Kinde redirects it back to logout callback path, where you need to clear your session: ```ruby # ....... def logout_callback Rails.logger.info("logout callback successfully received") reset_session redirect_to root_path end # ...... ``` If you configured a logout redirect url in Kinde, you’ll receive a logout callback. Otherwise a Kinde logout message will be shown. ## Organizations ### Create an organization To have a new organization created within your application, you will need to run something like: ```ruby client.organizations.create_organization(name: "new_org") ``` ### Sign up and sign in to organizations Kinde has a unique code for every organization. If you want a user to sign in to a particular organization, call the `#auth_url` method with `org_code` param passing: ```ruby KindeSdk.auth_url(org_code: "org_1234", start_page: "registration") # to enforce new user creation form KindeSdk.auth_url(org_code: "org_1234") # to login by default ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```ruby [ { "aud" => [], "exp" => 1658475930, "iat" => 1658472329, "iss" => "https://your_subdomain.kinde.com", "jti" => "123457890", "org_code" => "org_1234", "permissions" => ["read:todos", "create:todos"], "scp" => [ "openid", "profile", "email", "offline ], "sub" => "kp:123457890", "feature_flags" => { "asd" => { "t" => "b", "v" => true }, "eeeeee" => { "t" => "i", "v" => 111 }, "qqq" => { "t" => "s", "v" => "aa" } } } ] ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example: ```ruby client.get_claim("org_codes", :id_token) # => {name: "org_codes", value: [ ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## Get user info ```ruby KindeSdk.client(session[:kinde_auth]).oauth.get_user ``` ## Kinde management API To get started, you will need an access token, the Ruby SDK includes a helper to get one. Or see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js/) ```ruby result = KindeSdk.client_credentials_access( client_id: ENV["KINDE_MANAGEMENT_CLIENT_ID"], client_secret: ENV["KINDE_MANAGEMENT_CLIENT_SECRET"] ) $redis.set("kinde_m2m_token", result["access_token"], ex: result["expires_in"].to_i) ``` This token can then be used to call any of the endpoints in the [Kinde Management API](/kinde-apis/management/). ### Organizations handling ```ruby client = KindeSdk.client({"access_token" => $redis.get("kinde_m2m_token")}) client.organizations.get_organizations client.organizations.create_organization(name: "new_org") ``` ### Create new user ```ruby client.users.create_user( create_user_request: { profile: {given_name: "AAAname", family_name: "AAAsurname"}, identities: [{type: "email", details: {email: "aaexample@asd.com"}}] } ) ``` Alternatively, using model instances: ```jsx request = KindeApi::CreateUserRequest.new( profile: KindeApi::CreateUserRequestProfile.new(given_name: "AAAfirstname1", family_name: "AAAlastname1"), identities: [ KindeApi::CreateUserRequestIdentitiesInner.new(type: "email", details: KindeApi::CreateUserRequestIdentitiesInnerDetails.new(email: "aaaaexample@example.com")) ] ) client.users.create_user(create_user_request: request) ``` ### Add organization users ```ruby client.organizations.add_organization_users(code: "org_1111", users: ["kp:12311...."]) ``` ### Token expiration and refreshing For proper refreshing you'll need to use `access_token`, `refresh_token` and probably `expires_in` if you want to know if your access token is still active. Use these two methods to work with refreshing: ```ruby KindeSdk.token_expired?( session[:kinde_auth], # client_id: # default to @config.client_id, # client_secret: # default to @config.client_secret, # audience: # default to "#{@config.domain}/api", # domain: # default to @config.domain ) # => false KindeSdk.refresh_token( session[:kinde_auth], # client_id: # default to @config.client_id, # client_secret: # default to @config.client_secret, # audience: # default to "#{@config.domain}/api", # domain: # default to @config.domain ) # => {"access_token" => "qwe...", "refresh_token" => "fqw...", .....} ``` `KindeSdk#refresh_token` returns a new token hash, so it needs to be updated in your storage. ## SDK API reference ### `host` Either your Kinde URL or your custom domain. e.g `https://yourapp.kinde.com`. Type: `string` Required: Yes ### `redirectUri` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `clientId` The unique ID of your application in Kinde. Type: `string` Required: Yes ### `clientSecret` The unique ID key or secret of your application in Kinde. Type: `string` Required: Yes ### `logoutRedirectUri` Where your user will be redirected when they sign out. Type: `string` Required: Yes ### `scope` The scopes to be requested from Kinde. Type: `boolean` Required: No Default: `openid profile email offline` ### `additionalParameters` Additional parameters that will be passed in the authorization request. Type: `object` Required: No Default: `{}` ### `additionalParameters` `- audience` The audience claim for the JWT. Type: `string` Required: No ## Kinde SDK methods ### `login` Constructs a redirect URL and sends the user to Kinde to sign in. Arguments: ```ruby {org_code?: string} ``` Usage: ```ruby $kinde->login(); ``` Allow `org_code` to be provided if a specific organization is being signed into. ### `register` Constructs a redirect URL and sends the user to Kinde to sign up. Arguments: ```ruby {org_code?: string} ``` Usage: ```ruby $kinde->register(); ``` ### `logout` Logs the user out of Kinde. Usage: ```ruby $kinde->logout(); ``` ### `getToken` Returns the raw Access token from URL after logged from Kinde. Usage: ```ruby $kinde->getToken(); ``` Sample output: ```ruby eyJhbGciOiJIUzI1... ``` ### `createOrg` Constructs a redirect URL and sends the user to Kinde to sign up and create a new organization in your business. Arguments: ```ruby {org_name?: string} ``` Usage: ```ruby $kinde->createOrg(); or $kinde->createOrg(['org_name' => 'your organization name'}); ``` Allow `org_name` to be provided if you want a specific organization name when you create. Sample output: ```ruby redirect ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```ruby claim: string, tokenKey?: string ``` Usage: ```ruby $kinde->getClaim('given_name', 'id_token'); ``` Sample output: ```ruby "David ``` ### `getPermission` Returns the state of a given permission. Arguments: `key: string` Usage: ```ruby $kinde->getPermission('read:todos'); ``` Sample output: ```ruby ['orgCode' => 'org_1234', 'isGranted' => true] ``` ### `getPermissions` Returns all permissions for the current user for the organization they are signed into. Usage: ```ruby $kinde->getPermissions(); ``` Sample output: ```ruby ['orgCode' => 'org_1234', permissions => ['create:todos', 'update:todos', 'read:todos']] ``` ### `getOrganization` Get details for the organization your user is signed into. Usage: ```ruby $kinde->getOrganization(); ``` Sample output: ```ruby ['orgCode' => 'org_1234'] ``` ### `getUserDetails` Returns the profile for the current user. Usage: ```ruby $kinde->getUserDetails(); ``` Sample output: ```ruby ['given_name' => 'Dave', 'id' => 'abcdef', 'family_name' => 'Smith', 'email' => 'mailto:dave@smith.com'] ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. If you need help connecting to Kinde, contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - SvelteKit SDK

> Complete guide for SvelteKit SDK including OAuth 2.0 flows, session management, authentication integration, and user profile access for SvelteKit applications.

SvelteKit SDK, OAuth 2.0, Authorization Code, PKCE, Client Credentials, session hooks, authentication
developer-tools, sdks, sveltekit, backend

Kinde SvelteKit SDK allows developers to integrate Kinde Authentication into their SvelteKit projects. This SDK implements the following OAuth 2.0 flows. - Authorization Code - Intended for confidential clients for e.g. web-servers - Authorization Code with PKCE extension - For public clients for e.g. single page web application and or mobile applications, and confidential clients for e.g. web-servers. - Client Credentials Flow - Intended for confidential clients, where machine to machine communication is required. For new project, you can find our [Svelte Starter Kit](https://github.com/kinde-starter-kits/sveltekit-starter-kit) ## Requirements - Node version 18.16.x or newer ## Register for Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. ## Install <PackageManagers pkg="@kinde-oss/kinde-auth-sveltekit" /> ## Configure Kinde ### Set callback URLs 1. In Kinde, go to **Settings > Applications** and then navigate to the relevant **frontend app** or **backend app**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs): `https://<your_app_domain>/api/auth/kinde_callback` e.g: `http://localhost:5173/api/auth/kinde_callback` - Allowed logout redirect URLs: `https://<your_app_domain>` e.g:`http://localhost:5173` 3. Select **Save**. ### Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Each environment has a unique subdomain so be sure to use the correct one in the **Configure your app section** which follows. ## Configure your app **Environment variables** Put these variables in your `.env` file. You can find these variables on your **Settings > Applications > [Your app] > View details** page. - `KINDE_ISSUER_URL` - your Kinde domain - `KINDE_CLIENT_ID` - your Kinde Client ID - `KINDE_CLIENT_SECRET` - your Kinde Client secret. Leave this field empty if you are using Authentication Code Flow with PKCE - `KINDE_REDIRECT_URL` - this is the URL Kinde will redirect to after the authentication process. Note that the Kinde `api/auth/kinde_callback` path must be included in the URL (see example below). You also need to make sure this URL is included in your list of **Allowed callback URLs**. - `KINDE_POST_LOGOUT_REDIRECT_URL` - Specify the destination where you want users to be redirected to after logging out. Make sure this URL is listed under your **Allowed logout redirect URLs**. - `KINDE_POST_LOGIN_REDIRECT_URL`- the URL users will be redirected to after signing in. - `KINDE_AUTH_WITH_PKCE` - Set `true` if you want to use Authentication Code Flow with PKCE Below is an example of a `.env` file ```bash KINDE_ISSUER_URL=https://<your_kinde_subdomain>.kinde.com KINDE_CLIENT_ID=<your_kinde_client_id> KINDE_CLIENT_SECRET=<your_kinde_client_secret> KINDE_REDIRECT_URL=http://localhost:5173/api/auth/kinde_callback KINDE_POST_LOGOUT_REDIRECT_URL=http://localhost:5173 KINDE_POST_LOGIN_REDIRECT_URL=http://localhost:5173/dashboard KINDE_AUTH_WITH_PKCE=true // Set `true` if you want to use Authentication Code Flow with PKCE ``` ## Integrate with your app Implement `sessionHooks` in your hooks. ```typescript // src/hooks.server.ts import { sessionHooks, type Handler } from '@kinde-oss/kinde-auth-sveltekit'; ... export const handle: Handler = async ({ event, resolve }) => { ... sessionHooks({ event }); const response = await resolve(event); return response; }; ``` Then implement the Kinde routes in your app by creating a server file. ```typescript // src/routes/api/auth/[...kindeAuth]/+server.ts import {handleAuth} from "@kinde-oss/kinde-auth-sveltekit"; import type {RequestEvent} from "@sveltejs/kit"; export function GET(requestEvents: RequestEvent) { return handleAuth(requestEvents); } ``` This will handle Kinde Auth endpoints in your SvelteKit app. - `/api/auth/login` - will redirect you to login at the KindeAuth server. - `/api/auth/logout` - will log you out of the app. - `/api/auth/register` - will redirect you to register at the KindeAuth server. - `/api/auth/kinde_callback` - the endpoint to handle the redirect after logging in from Kinde - `/api/auth/health` - See Health Below ## Sign in and sign up (login and register) The SDK ships with predefined API routes to generate the auth urls for sign up and sign in. ```html <ul> <li> <a href="/api/auth/login">Sign in</a> </li> <li> <a href="/api/auth/register">Sign up</a> </li> </ul> ``` ### Direct users post login / registration In addition to `KINDE_POST_LOGIN_REDIRECT_URL` which will direct your users to a single place, you direct the users more granularly. Both login and register support passing a url param `post_login_redirect_url` which will direct the user once the flow is completed. ```html <a class="btn btn-ghost sign-in-btn" href="/api/auth/login?post_login_redirect_url=/custom_url"> Sign in </a> ``` ## Log out This is implemented in much the same way as signing up or signing in. An API route is provided for you ```html <a href="/api/auth/logout"> Sign out </a> ``` ## Check if the user is authenticated We’ve provided a helper to get a boolean value that checks if a user is signed in by verifying that the access token is valid. ```typescript // +layout.server.ts ... import {kindeAuthClient, type SessionManager} from '@kinde-oss/kinde-auth-sveltekit'; import type {RequestEvent} from '@sveltejs/kit'; export async function load({request}: RequestEvent) { const isAuthenticated = await kindeAuthClient.isAuthenticated( request as unknown as SessionManager ); // Boolean: true or false if (isAuthenticated) { // Need to implement, e.g: call an api, etc... } else { // Need to implement, e.g: redirect user to sign in, etc.. } ... return { isAuthenticated }; } ``` ## View user profile You need to have already authenticated before you call the API, otherwise an error will occur. To access the user information, use the `getUser` helper function: ```typescript await kindeAuthClient.getUser(request as unknown as SessionManager); // returns { "given_name":"Dave", "id":"kp_12345678910", "family_name":"Smith", "email":"dave@smith.com", "picture": "https://link_to_avatar_url.kinde.com" } ``` ## Health check To check your configuration, the SDK exposes an endpoint with your settings. `/api/auth/health` **Note**: The client secret will indicate only if the secret is set or not set correctly. To enable set the `KINDE_DEBUG` environment variable to `true` ```jsx KINDE_DEBUG = true; ``` ```jsx { "authDomain": "https://danielkinde.kinde.com", "clientId": "0eb39a3b1cd64e99b4461d9660f7b97c", "logoutRedirectURL": "http://localhost:5173", "redirectURL": "http://localhost:5173/api/auth/kinde_callback", "audience": "", "scope": "profile email openid", "clientSecret": "Set correctly", "loginRedirectURL": "http://localhost:5173", "authUsePKCE": false, "version": "1710935446027", "framework": "sveltekit" } ``` ## **View users in Kinde** If you navigate to the “**Users**” page within Kinde you will see your newly registered user there. ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be set against `KINDE_AUDIENCE` in your environment variables. The audience of a token is the intended recipient of the token. ```typescript // .env KINDE_AUDIENCE = your_audience; ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/) ## Overriding scope By default the `KindeSDK` requests the following scopes: - profile - email - offline - openid To override this, you can set the value against the `KINDE_SCOPE` in your environment variables. ```typescript // .env KINDE_SCOPE=profile email offline openid ``` ## Organizations ### Create an organization To create a new organization within your application, set up the following route: ```typescript <a href="/api/auth/create_org?org_name={<org_name>}"> Create org </a> ``` ### Sign up and sign in to organizations The Kinde client provides methods for you easily sign up and sign in users into organizations. You can add links in your HTML as follows: ```typescript <a href="/api/auth/login?org_code={<your_org_code>}">Sign in</a> <a href="/api/auth/register?org_code={<your_org_code>}">Sign up</a> ``` Following authentication, Kinde provides a json web token (JWT) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```json { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": ["openid", "profile", "email", "offline"], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```json [ ... "org_codes": ["org_1234", "org_4567"] ... ]; ``` There are two helper functions you can use to extract information: ```typescript await kindeAuthClient.getOrganization(request as unknown as SessionManager); // { orgCode: 'org_1234' } await kindeAuthClient.getUserOrganizations(request as unknown as SessionManager); // { orgCodes: ['org_1234', 'org_abcd'] } ``` ## User permissions Once a user has been verified, your product/application will return the JWT with an array of permissions for that user. You will need to configure your product/application to read permissions and unlock the respective functions. [Set permissions](/manage-users/roles-and-permissions/user-permissions/) in your Kinde account. Here’s an example set of permissions. ```jsx const permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks ]; ``` We provide helper functions to more easily access the permissions claim: ```typescript await kindeAuthClient.getPermission(request as unknown as SessionManager, "create:todos"); // { orgCode: 'org_1234', isGranted: true } await kindeAuthClient.getPermissions(request as unknown as SessionManager); // { orgCode: 'org_1234', permissions: ['create:todos', 'update:todos', 'read:todos'] } ``` ## Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```typescript await kindeAuthClient.getClaim(request as unknown as SessionManager, "aud"); // { name: "aud", value: ["local-testing@kinde.com"] } await kindeAuthClient.getClaimValue(request as unknown as SessionManager, "aud"); // ["local-testing@kinde.com"] await kindeAuthClient.getClaim(request as unknown as SessionManager, "email", "id_token"); // { name: "email", value: "first.last@test.com" } await kindeAuthClient.getClaimValue(request as unknown as SessionManager, "email", "id_token"); // "first.last@test.com ``` ## Feature flags We have provided a helper to grab any feature flag from `access_token`: ```typescript await kindeAuthClient.getFlag(request as unknown as SessionManager, 'theme') // returns { "is_default": false "value": "pink", "code": "theme", "type": "string", } await kindeAuthClient.getFeatureFlag(request as unknown as SessionManager, 'no-feature-flag') // returns // Error: "Flag no-feature-flag was not found, and no default value has been provided" await kindeAuthClient.getFeatureFlag(request as unknown as SessionManager, 'no-feature-flag', 'default-value') // returns { "is_default": true "code": "no-feature-flag", "value": "default-value", } await kindeAuthClient.getFeatureFlag(request as unknown as SessionManager, 'theme', 'default-theme', 'b') // returns // Error: "Flag theme is of type string, expected type is boolean" ``` We also require wrapper functions by type which should leverage `getFlag` above. ### **Get boolean flags** ```typescript /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {Object} request - Request object * @param {String} code - The name of the flag. * @param {Boolean} [defaultValue] - A fallback value if the flag isn't found. * @return {Boolean} */ await kindeAuthClient.getBooleanFlag(request as unknown as SessionManager, code, defaultValue); await kindeAuthClient.getBooleanFlag(request as unknown as SessionManager, "is_dark_mode"); // true await kindeAuthClient.getBooleanFlag(request as unknown as SessionManager, "is_dark_mode", false); // true await kindeAuthClient.getBooleanFlag(request as unknown as SessionManager, "new_feature"); // Error - flag does not exist and no default provided await kindeAuthClient.getBooleanFlag(request as unknown as SessionManager, "new_feature", false); // false (flag does not exist so falls back to default) await kindeAuthClient.getBooleanFlag(request as unknown as SessionManager, "theme", "blue"); // Error - Flag "theme" is of type string not boolean ``` ### **Get string flags** ```typescript /** * Get a string flag from the feature_flags claim of the access_token. * @param {Object} request - Request object * @param {String} code - The name of the flag. * @param {String} [defaultValue] - A fallback value if the flag isn't found. * @return {String} */ await kindeAuthClient.getStringFlag(request as unknown as SessionManager, code, defaultValue); /* Example usage */ await kindeAuthClient.getStringFlag(request as unknown as SessionManager, "theme"); // pink await kindeAuthClient.getStringFlag(request as unknown as SessionManager, "theme", "black"); // true await kindeAuthClient.getStringFlag(request as unknown as SessionManager, "cta_color"); // Error - flag does not exist and no default provided await kindeAuthClient.getStringFlag(request as unknown as SessionManager, "cta_color", "blue"); // blue (flag does not exist so falls back to default) await kindeAuthClient.getStringFlag(request as unknown as SessionManager, "is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not string ``` ### **Get integer flags** ```typescript /** * Get an integer flag from the feature_flags claim of the access_token. * @param {Object} request - Request object * @param {String} code - The name of the flag. * @param {Integer} [defaultValue] - A fallback value if the flag isn't found. * @return {Integer} */ await kindeAuthClient.getIntegerFlag(request as unknown as SessionManager, code, defaultValue); await kindeAuthClient.getIntegerFlag(request as unknown as SessionManager, "competitions_limit"); // 5 await kindeAuthClient.getIntegerFlag(request as unknown as SessionManager, "competitions_limit", 3); // 5 await kindeAuthClient.getIntegerFlag(request as unknown as SessionManager, "team_count"); // Error - flag does not exist and no default provided await kindeAuthClient.getIntegerFlag(request as unknown as SessionManager, "team_count", 2); // false (flag does not exist so falls back to default) await kindeAuthClient.getIntegerFlag(request as unknown as SessionManager, "is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not integer ``` ## Token storage After the user has successfully logged in, you will have a JSON Web Token (JWT) and a refresh token securely stored. You can retrieve an access token using the `getToken` method. ```typescript const access_token = await kindeAuthClient.getToken(request as unknown as SessionManager); ``` ## Kinde Management API To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) ## **SDK API reference** ### `login` Constructs redirect url and sends user to Kinde to sign in. **Usage:** ```dart sdk.login(); ``` ### `register` Constructs redirect url and sends user to Kinde to sign up. **Usage:** ```dart sdk.register(); ``` ### `logout` Logs the user out of Kinde. **Usage:** ```dart sdk.logout(); ``` ### `isAuthenticated` Checks if the user is authenticated. **Usage:** ```dart sdk.isAuthenticated(); ``` **Sample output:** ```dart true or false ``` ### `createOrg` Constructs redirect url and sends the user to Kinde to sign up and creates a new org for your business. **Arguments:** ```dart options?: CreateOrgURLOptions { org_name?: "string"; org_code?: "string"; state?: "string"; } ``` **Usage:** ```dart sdk.createOrg( org_name: "org_1234" ); ``` ### `getClaim` Extracts the provided claim from the provided token type in the current session, the returned object includes the provided claim. **Arguments:** ```dart claim: "string", tokenKey?: TokenType "access_token" | "id_token ``` **Usage:** ```dart sdk.getClaim(claim:"given_name", tokenType: TokenType); ``` ### `getPermission` Returns the state of a given permission. **Arguments:** ```dart key: "string ``` **Usage:** ```dart sdk.getPermission("permission"); ``` **Sample output:** ```dart { orgCode : 'org_1234', isGranted : true} ``` ### `getPermissions` Returns all permissions for the current user for the organization they are logged into. **Usage:** ```dart sdk.getPermissions(); ``` **Sample output:** ```dart { orgCode : 'org_1234', permissions : ['create:todos', 'update:todos', 'read:todos'] } ``` ### `getOrganization` Get details for the organization your user is logged into. **Usage:** ```dart sdk.getOrganization(); ``` **Sample output:** ```dart { orgCode : 'org_1234' } ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. **Usage:** ```dart sdk.getUserOrganizations(); ``` **Sample output:** ```dart { orgCodes: ['org_7052552de68', 'org_5a5c29381327'] } ``` ### `getUser` Extracts the user details from the ID token obtained after authentication. **Usage:** ```dart sdk.getUser(); ``` **Sample output:** ```dart { "id":"kp_12345678910", "preferredEmail":"dave@smith.com", "lastName":"smith", "firstName":"dave", } ``` ### `getToken` Returns the access token obtained after authentication. **Usage:** ```dart sdk.getToken(); ``` **Sample output:** ```dart eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ .SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c; ``` --- ### `getUserProfile` Makes use of the `getToken` method above to fetch user details. **Usage:** ```dart sdk.getUserProfile(); ``` **Sample output:** ```dart { given_name: 'Dave', id: 'abcdef', family_name : 'Smith', email : 'mailto:dave@smith.com' } ``` ### `getFlag` Get a flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : FlagType[keyof FlagType] flagType? : [key of FlagType] interface FlagType { s: string; b: boolean; i: number; } interface GetFlagType { type?: 'string' | 'boolean' | 'number'; value: FlagType[keyof FlagType]; is_default: boolean; code: "string"; } ``` **Usage:** ```dart sdk.getFlag(code:"theme"); ``` **Sample output:** ```dart { "code": "theme", "type": "string", "value": "pink", "is_default": false } ``` ### `getBooleanFlag` Get a boolean flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : boolean ``` **Usage:** ```dart sdk.getBooleanFlag(code:"is_dark_mode"); ``` **Sample output:** ```dart true or false ``` ### `getStringFlag` Get a string flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : "string ``` **Usage:** ```dart sdk.getStringFlag(code:"theme"); ``` **Sample output:** ```dart pink ``` ### `getIntegerFlag` Get an integer flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : number ``` **Usage:** ```dart sdk.getIntegerFlag(code:"team_count"); ``` **Sample output:** ```dart 2 ``` If you need help connecting to Kinde, contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - TypeScript SDK

> Complete guide for TypeScript SDK including OAuth 2.0 flows, session management, user authentication, and profile access for Node.js applications.

TypeScript SDK, OAuth 2.0, Authorization Code, PKCE, Client Credentials, session management, user profile
developer-tools, sdks, typescript, backend

Kinde’s TypeScript SDK allows developers to integrate Kinde Authentication into their JavaScript or TypeScript projects. This SDK implements the following OAuth2.0 flows. [Learn more here](https://kinde.com/guides/authentication/protocols/oauth-flows-explained/) - **Authorization Code** - Intended for confidential clients, e.g. web-servers - **Authorization Code with PKCE extension** - For public clients, e.g. single page web application and or mobile applications - **Client Credentials flow** - Intended for confidential clients, where machine to machine communication is required. ## Requirements Node version 16 or newer ## Register for Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `<your_subdomain>.kinde.com`. ## Install <PackageManagers pkg="@kinde-oss/kinde-typescript-sdk" /> ## Configure Kinde ### Set callback URLs Kinde will redirect your user to authenticate. They’ll be redirected back to your JavaScript app after signing in or signing up. To authenticate your app, you need to specify which URL Kinde should redirect your user. 1. In Kinde, go to **Settings > Applications** and then navigate to **Front-end app** or **Back-end app** which ever applies - or add a new application. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs): `https://<your_app_domain>/callback` e.g: `http://localhost:3000/callback` - Allowed logout redirect URLs: `https://<your_app_domain>` e.g:`http://localhost:3000` 3. Select **Save**. ### Add environments Kinde comes with a production environment, but you can set up other environments if you want to. Each environment has a unique subdomain so be sure to use the correct one in the **Configure your app section** which follows. ## Integrate with your app First step is to configure and create a client. The following settings are needed depending on which authentication flow you are using. You can find these values on your **Settings > Applications > [Your app] > View details** page. - `authDomain` - your Kinde domain - `clientId` - your Kinde client ID - `clientSecret` - your Kinde client secret - `redirectURL` - your callback url to redirect to after authentication. Make sure this URL is under your **Allowed callback URLs**. - `logoutRedirectURL` - where you want users to be redirected to after logging out. Make sure this URL is under your **Allowed logout redirect URLs**. ```typescript import {createKindeServerClient, GrantType} from "@kinde-oss/kinde-typescript-sdk"; // Client for authorization code flow const kindeClient = createKindeServerClient(GrantType.AUTHORIZATION_CODE, { authDomain: "https://<your_kinde_subdomain>.kinde.com", clientId: "<your_kinde_client_id>", clientSecret: "<your_kinde_client_secret>", redirectURL: "http://localhost:3000/callback", logoutRedirectURL: "http://localhost:3000" }); // Client for client credentials flow const kindeApiClient = createKindeServerClient(GrantType.CLIENT_CREDENTIALS, { authDomain: "https://<your_kinde_subdomain>.kinde.com", clientId: "<your_kinde_client_id>", clientSecret: "<your_kinde_client_secret>", logoutRedirectURL: "http://localhost:3000" }); ``` ## Log in and register To incorporate the login and register features, you'll need to redirect to Kinde for authentication. One way to do this is to create routes for `/login` and `/register`. ```typescript const app = express(); app.get("/login", async (req, res) => { const loginUrl = await kindeClient.login(sessionManager); return res.redirect(loginUrl.toString()); }); app.get("/register", async (req, res) => { const registerUrl = await kindeClient.register(sessionManager); return res.redirect(registerUrl.toString()); }); app.listen(3000); ``` With that in place you can simply add links in your HTML as follows: ```html <a href="/login">Sign in</a> <a href="/register">Sign up</a> ``` In the above example there is a `sessionManager` which has not been defined. In order to track the authenticated session between requests a session store is required. Any key-value store can be used for this, you just need to implement the `SessionManager` interface to provide it to the SDK. An example session manager storing in memory could be implemented as: ```typescript let store: Record<string, unknown> = {}; const sessionManager: SessionManager = { async getSessionItem(key: string) { return store[key]; }, async setSessionItem(key: string, value: unknown) { store[key] = value; }, async removeSessionItem(key: string) { delete store[key]; }, async destroySession() { store = {}; } }; ``` This would work for a single user for local development purposes, but would need to be expanded for a production environment. The appropriate session store for your application will depend on your application architecture, for example encrypted cookies in a stateless server environment or a shared cache/database for a load balanced cluster of servers. Commonly, the session manager will be a wrapper around an existing session management library - often provided by a web framework, or a third party library. ## **Manage redirects** You will also need to route `/callback`. When the user is redirected back to your site from Kinde, it will trigger a call to the callback URL defined in the `redirectURL` client option. ```typescript app.get("/callback", async (req, res) => { const url = new URL(`${req.protocol}://${req.get("host")}${req.url}`); await kindeClient.handleRedirectToApp(sessionManager, url); return res.redirect("/"); }); ``` ## Logout The Kinde SDK comes with a logout method. ```typescript app.get("/logout", async (req, res) => { const logoutUrl = await kindeClient.logout(sessionManager); return res.redirect(logoutUrl.toString()); }); ``` ```html <a href="/logout">Log out</a> ``` ## Check if user is authenticated We’ve provided a helper to get a boolean value to check if a user is signed in by verifying that the access token is still valid. The `isAuthenticated` function is only available for authentication code and PKCE flows. ```typescript const isAuthenticated = await kindeClient.isAuthenticated(sessionManager); // Boolean: true or false if (isAuthenticated) { // Need to implement, e.g: call an api, etc... } else { // Need to implement, e.g: redirect user to sign in, etc.. } ``` ## View user profile You need to have already authenticated before you call the API, otherwise an error will occur. To access the user information, use the `getUserProfile` helper function: ```typescript const profile = await kindeClient.getUserProfile(sessionManager); // returns { "given_name":"Dave", "id":"kp_12345678910", "family_name":"Smith", "email":"dave@smith.com", "picture": "https://link_to_avatar_url.kinde.com" } ``` ## **View users in Kinde** Go to the **Users** page in Kinde to see your newly registered user. ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. ```typescript const clientOptions = { ..., audience: 'api.yourapp.com', }; const kindeClient = createKindeServerClient( GrantType.AUTHORIZATION_CODE, clientOptions ); ``` ## Overriding scope By default the Kinde SDK requests the following scopes: - `profile` - `email` - `offline` - `openid` You can override this by passing scopes into the Kinde SDK ```typescript const clientOptions = { ..., scope: 'openid profile email offline', }; const kindeClient = createKindeServerClient( GrantType.AUTHORIZATION_CODE, clientOptions ); ``` ## Organizations ### Create an organization To have a new organization created within your application during registration, you can create a route as follows: ```typescript app.get("/createOrg", async (req, res) => { const org_name = req.query.org_name?.toString(); const createUrl = await kindeClient.createOrg(sessionManager, {org_name}); return res.redirect(createUrl.toString()); }); ``` You can also pass `org_name` as part of the query string as per the following HTML: ```html <a href="/createOrg?org_name=<your_org_name>">Create Org</a> ``` ### Log in and register to organizations The Kinde client provides methods for you to easily log in and register users into existing organizations. Update the routes to accept an `org_code` parameter and pass it to the SDK: ```typescript const loginUrl = await kindeClient.login(sessionManager, {org_code: "org_1234"}); const registerUrl = await kindeClient.register(sessionManager, {org_code: "org_1234"}); ``` Following authentication, Kinde provides a JSON web token (JWT) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```json { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": ["openid", "profile", "email", "offline"], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```json [ ... "org_codes": ["org_1234", "org_4567"] ... ]; ``` There are two helper functions you can use to extract information: ```typescript const org = await kindeClient.getOrganization(sessionManager); // { orgCode: 'org_1234' } const orgs = await kindeClient.getUserOrganizations(sessionManager); // { orgCodes: ['org_1234', 'org_abcd'] } ``` ## User permissions Once a user has been verified, your product/application will return the JWT token with an array of permissions for that user. You will need to configure your product/application to read permissions and unlock the respective functions. [Set permissions](/manage-users/roles-and-permissions/user-permissions/) in your Kinde account. Here’s an example set of permissions. ```typescript const permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks ]; ``` We provide helper functions to more easily access the permissions claim: ```typescript const permission = await kindeClient.getPermission(sessionManager, "create:todos"); // { orgCode: 'org_1234', isGranted: true } const permissions = await kindeClient.getPermissions(sessionManager); // { orgCode: 'org_1234', permissions: ['create:todos', 'update:todos', 'read:todos'] } ``` A practical example in code might look something like: ```typescript const permission = await kindeClient.getPermission(sessionManager, "create:todos"); if (permission.isGranted) { ... } ``` ## Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```typescript client.getClaim(sessionManager, "aud"); // { name: "aud", value: ["local-testing@kinde.com"] } client.getClaimValue(sessionManager, "aud"); // ["local-testing@kinde.com"] client.getClaim(sessionManager, "email", "id_token"); // { name: "email", value: "first.last@test.com" } client.getClaimValue(sessionManager, "email", "id_token"); // "first.last@test.com ``` ## Feature Flags We have provided a helper to return any features flag from the access token: ```typescript client.getFeatureFlag(sessionManager, 'theme') // returns { "is_default": false "value": "pink", "code": "theme", "type": "string", } client.getFeatureFlag(sessionManager, 'no-feature-flag') // returns // Error: "Flag no-feature-flag was not found, and no default value has been provided" client.getFeatureFlag(sessionManager, 'no-feature-flag', 'default-value') // returns { "is_default": true "code": "no-feature-flag", "value": "default-value", } client.getFeatureFlag(sessionManager, 'theme', 'default-theme', 'b') // returns // Error: "Flag theme is of type string, expected type is boolean" ``` We also require wrapper functions by type which should leverage `getFlag` above. ### **Get boolean flags** ```typescript /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {Object} request - Request object * @param {String} code - The name of the flag. * @param {Boolean} [defaultValue] - A fallback value if the flag isn't found. * @return {Boolean} */ kindeClient.getBooleanFlag(sessionManager, code, defaultValue); kindeClient.getBooleanFlag(sessionManager, "is_dark_mode"); // true kindeClient.getBooleanFlag(sessionManager, "is_dark_mode", false); // true kindeClient.getBooleanFlag(sessionManager, "new_feature"); // Error - flag does not exist and no default provided kindeClient.getBooleanFlag(sessionManager, "new_feature", false); // false (flag does not exist so falls back to default) kindeClient.getBooleanFlag(sessionManager, "theme", "blue"); // Error - Flag "theme" is of type string not boolean ``` ### **Get string flags** ```typescript /** * Get a string flag from the feature_flags claim of the access_token. * @param {Object} request - Request object * @param {String} code - The name of the flag. * @param {String} [defaultValue] - A fallback value if the flag isn't found. * @return {String} */ kindeClient.getStringFlag(sessionManager, code, defaultValue); /* Example usage */ kindeClient.getStringFlag(sessionManager, "theme"); // pink kindeClient.getStringFlag(sessionManager, "theme", "black"); // true kindeClient.getStringFlag(sessionManager, "cta_color"); // Error - flag does not exist and no default provided kindeClient.getStringFlag(sessionManager, "cta_color", "blue"); // blue (flag does not exist so falls back to default) kindeClient.getStringFlag(sessionManager, "is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not string ``` ### **Get integer flags** ```typescript /** * Get an integer flag from the feature_flags claim of the access_token. * @param {Object} request - Request object * @param {String} code - The name of the flag. * @param {Integer} [defaultValue] - A fallback value if the flag isn't found. * @return {Integer} */ kindeClient.getIntegerFlag(sessionManager, code, defaultValue); kindeClient.getIntegerFlag(sessionManager, "competitions_limit"); // 5 kindeClient.getIntegerFlag(sessionManager, "competitions_limit", 3); // 5 kindeClient.getIntegerFlag(sessionManager, "team_count"); // Error - flag does not exist and no default provided kindeClient.getIntegerFlag(sessionManager, "team_count", 2); // false (flag does not exist so falls back to default) kindeClient.getIntegerFlag(sessionManager, "is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not integer ``` ## Token storage After the user has successfully logged in, you will have a JSON Web Token (JWT) and a refresh token securely stored. You can retrieve an access token by utilizing the `getToken` method. ```typescript const accessToken = await kindeClient.getToken(sessionManager); ``` ## Kinde Management API To use our management API please see [@kinde/management-api-js](https://github.com/kinde-oss/management-api-js) ## **SDK API reference** ### `authDomain` Either your Kinde instance url or your custom domain. e.g. `https://yourapp.kinde.com`. Type: `string` Required: Yes ### `redirectUri` The url that the user will be returned to after authentication. Type: `string` Required: Yes ### `LogoutRedirectUri` The url that the user will be returned to after they sign out. Type: `string` Required: Yes ### `clientId` The ID of your application in Kinde. Type: `string` Required: Yes ### `clientSecret` The unique client secret associated with your application in Kinde. Type: `string` Required: Yes ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No Default: `openid profile email offline` ### `audience` The audience claim for the JWT. Type: `string` Required: No ## **Kinde SDK methods** ### `login` Constructs a redirect URL and sends the user to Kinde to sign in. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.login(sessionManager); ``` ### `register` Constructs a redirect URL and sends the user to Kinde to sign up. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.register(sessionManager); ``` ### `logout` Logs the user out of Kinde. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.logout(sessionManager); ``` ### `handleRedirectToApp` Callback middleware function for Kinde OAuth 2.0 flow. Arguments: ```typescript sessionManager: SessionManager; callbackURL: URL; ``` Usage: ```typescript kindeClient.handleRedirectToApp(sessionManager, callbackURL); ``` ### `isAuthenticated` Check if the user is authenticated. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript await kindeClient.isAuthenticated(sessionManager); ``` Output: `true` or `false` ### `createOrg` Constructs redirect url and sends user to Kinde to sign up and create a new org for your business. Arguments: ```typescript sessionManager : SessionManager options?: CreateOrgURLOptions { org_name?: string; org_code?: string; state?: string; } ``` Usage: ```typescript kindeClient.createOrg(sessionManager, { org_name: "org_1234" }); ``` ### `getClaim` Extract the provided claim from the provided token type in the current session, the returned object includes the provided claim. Arguments: ```typescript sessionManager : SessionManager tokenKey?: ClaimTokenType 'access_token' | 'id_token’ ``` Usage: ```typescript kindeClient.getClaim(sessionManager, "given_name", "id_token"); ``` ### `getClaimValue` Extract the provided claim from the provided token type in the current session. Arguments: ```typescript sessionManager : SessionManager claim: string, tokenKey?: ClaimTokenType 'access_token' | 'id_token’ ``` Usage: ```typescript client.getClaimValue(sessionManager, "given_name"); ``` Output: `'David'` ### `getPermission` Returns the state of a given permission. Arguments: ```typescript sessionManager: SessionManager; key: string; ``` Usage: ```typescript kindeClient.getPermission(sessionManager, "read:todos"); ``` Output sample: ```json { "orgCode": "org_1234", "isGranted": true } ``` ### `getPermissions` Returns all permissions for the current user for the organization they are logged into. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.getPermissions(sessionManager); ``` Sample output: ```json { "orgCode": "org_1234", "permissions": ["create:todos", "update:todos", "read:todos"] } ``` ### `getOrganization` Get details for the organization your user is logged into. Arguments: ```typescript sessionManager: SessionManager; key: string; ``` Usage: ```typescript kindeClient.getOrganization(sessionManager); ``` Sample output: ```json {"orgCode": "org_1234"} ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.getUserOrganizations(sessionManager); ``` Sample output: ```json {"orgCodes": ["org_7052552de", "org_5a5c293813"]} ``` ### `getUser` Extracts the user details from the ID token obtained post authentication. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.getUser(sessionManager); ``` ### `getToken` Returns a valid access token if available. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.getToken(sessionManager); ``` ### `refreshTokens` Uses the refresh token to update and return new tokens. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.refreshTokens(sessionManager); ``` ### `getUserProfile` Extracts makes use of the `getToken` method above to fetch user details. Arguments: ```typescript sessionManager: SessionManager; ``` Usage: ```typescript kindeClient.getUserProfile(sessionManager); ``` Sample output: ```json {"given_name": "Dave", "id": "abcdef", "family_name": "Smith", "email": "mailto:dave@smith.com"} ``` ### `getFlag` Get a flag from the feature_flags claim of the `access_token`. Arguments: ```typescript sessionManager : SessionManager code : string defaultValue? : FlagType[keyof FlagType flagType? : keyof FlagType interface FlagType { s: string; b: boolean; i: number; } interface GetFlagType { type?: 'string' | 'boolean' | 'number'; value: FlagType[keyof FlagType]; is_default: boolean; code: string; } ``` Usage: ```typescript kindeClient.getFlag(sessionManager, "theme"); ``` Sample output: ```json { "code": "theme", "type": "string", "value": "pink", "is_default": false } ``` ### `getBooleanFlag` Get a boolean flag from the `feature_flags` claim of the access token. Arguments: ```typescript sessionManager : SessionManager code : string defaultValue? : boolean ``` Usage: ```typescript kindeClient.getBooleanFlag(sessionManager, "is_dark_mode"); ``` Sample output: `true` ### `getStringFlag` Get a string flag from the `feature_flags` claim of the access token. Arguments: ```typescript sessionManager : SessionManager code : string defaultValue? : string ``` Usage: ```typescript kindeClient.getStringFlag(sessionManager, "theme"); ``` Sample output: `pink` ### `getIntegerFlag` Get an integer flag from the `feature_flags` claim of the access token. Arguments: ```typescript sessionManager : SessionManager code : string defaultValue? : number ``` Usage: ```typescript kindeClient.getIntegerFlag(sessionManager, "team_count"); ``` Sample output: `2` If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - JavaScript SDK

> Complete guide for JavaScript SDK including PKCE authentication, login/register flows, organization management, and API integration for single-page applications.

JavaScript SDK, PKCE, authentication, login, register, logout, organizations, access tokens, JWT
developer-tools, sdks, javascript, frontend

If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). This will give you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com` You can also view the [JavaScript starter kit](https://github.com/kinde-starter-kits/javascript-starter-kit) in GitHub. ## **Set up Kinde** ### **Set your callback and logout URLs** Kinde will redirect your user to authenticate. They’ll be redirected back to your JavaScript app after signing in or signing up. To authenticate your app, you need to specify which URL Kinde should redirect your user. These need to match the ones listed in your application details in Kinde. The `http://localhost:3000` is an example of a commonly used local development URL. It should be replaced with the URL where your app is running. 1. In Kinde, go to **Settings > Applications > [your app] > View details**. 2. Set the **Allowed callback URLs** (also known as redirect URIs) to the URL of your app. This is where the Kinde client app is served. For local development this could be `http://localhost:3000`. This is required for your users to sign in to your app successfully. 3. Set the URLs they’ll be redirected to after signing out, by adding **Allowed logout redirect URLs** to your JavaScript applications logout page. For local development this could be `http://localhost:3000`. 4. Select **Save**. ### **Environments** As part of your development process, we highly recommend you create a development environment within your Kinde account. In this case, you’d use the Environment subdomain in the code block above. ## **Set up your app** ### Installation <PackageManagers pkg="@kinde-oss/kinde-auth-pkce-js" /> ### **Integrate with your app** You’ll need to create a new instance of the Kinde Auth client object. We recommend using the async/await method. It must be the first thing that happens before you initialize your app. ```jsx import createKindeClient from "@kinde-oss/kinde-auth-pkce-js"; (async () => { const kinde = await createKindeClient({ client_id: <your_kinde_client_id>, domain: "https://<your_kinde_subdomain>.kinde.com", redirect_uri: window.location.origin }); } ``` 1. In Kinde, go to **Settings > Applications > [your app] > View details**. 2. Replace the **client_id** and **domain** placeholders in the code block above with the the values from the **App keys** section. Note: The `redirect_uri` value you enter here needs to be the same as the redirect URI you entered in the Kinde application (see above). ## Log in / register Kinde provides login / register methods that are easy to implement. Here’s an example of adding buttons to your HTML: ```html <div id="logged_out_view"> <button id="login" type="button">Sign in</button> <button id="register" type="button">Register</button> </div> ``` You can bind events to buttons. ```jsx document.getElementById("login").addEventListener("click", async () => { await kinde.login(); }); document.getElementById("register").addEventListener("click", async () => { await kinde.register(); }); ``` Clicking either of these buttons redirects your user to Kinde, where they authenticate before being redirected back to your site. ### **Test sign up** Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page of the relevant organization in Kinde. ## **Handle redirect** Once your user is redirected back to your site from Kinde, you can set a callback to take place. The callback automatically passes in the user object and any application state you set prior to the redirect. ```jsx on_redirect_callback: (user, appState) => { console.log({user, appState}); if (user) { // render logged in view } else { // render logged out view } }; ``` ## Log out This is implemented in much the same way as signing in or registering. The Kinde single page application client already comes with a sign out method. ```jsx document.getElementById("logout").addEventListener("click", async () => { await kinde.logout(); }); ``` ## **Call your API** The `getToken` method lets you to securely call your API and pass the bearer token to validate that your user is authenticated. ```jsx (async () => { try { const token = await kinde.getToken(); const response = await fetch(YOUR_API, { headers: new Headers({ Authorization: "Bearer " + token }) }); const data = await response.json(); console.log({data}); } catch (err) { console.log(err); } })(); ``` We recommend using our middleware on your back end to verify users and protect endpoints. Our current implementation is Node/Express, but we’re working on more. ## **Organizations** For general information about using organizations, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). **Create an organization** To create a new organization within your application, you will need to run a similar function below. ```jsx document.getElementById("createOrganization").addEventListener("click", async () => await kinde.createOrg();}); ``` **Sign up / sign in users to organizations** Kinde has a unique code for every organization. You’ll have to pass this code through when you register a new user. Example function below: ```jsx kinde.register({org_code: ‘org_1234’}); ``` If you want a user to sign in to a particular organization, pass this code along with the sign in method. ```jsx kinde.login({org_code: ‘org_1234’}); ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the `permissions` for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```json { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": [“read:todos”, “create:todos”], "scp": [ "openid", "profile", "email", "offline ], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of Organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```json { ... "org_codes": ["org_1234", "org_4567"] ... } ``` There are two helper functions you can use to extract information: ```jsx kinde.getOrganization(); // {orgCode: "org_1234"} kinde.getUserOrganizations(); // {orgCodes: ["org_1234", "org_abcd"]} ``` ## **Get user information** Use the `getUser()` helper function to request the user information from Kinde. Use the `getUserProfile()` function to request the latest user information from the server. ```jsx const user = kinde.getUser(); const user = await kinde.getUserProfile(); // user will be populated with a user object { id: "kp_0123456789abcdef0123456789abcdef", given_name: "Billy", family_name: "Hoyle", email: "billy@example.com", picture: "https://link_to_avatar_url.kinde.com" } ``` ## **User permissions** When a user signs in to an organization the Access token your product/application receives contains a custom claim with an array of permissions for that user. You can set permissions in your Kinde account. Here’s an example. ```json "permissions":[ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ] ``` We provide helper functions to more easily access permissions: ```jsx kinde.getPermission("create:todos"); // {orgCode: "org_1234", isGranted: true} kinde.getPermissions(); // {orgCode: "org_1234", permissions: ["create:todos", "update:todos", "read:todos"]} ``` A practical example in code might look something like: ```jsx if (kinde.getPermission("create:todos").isGranted) { // show Create Todo button in UI } ``` ## **Feature flags** When a user signs in the Access token your product/application receives contains a custom claim called `feature_flags` which is an object detailing the feature flags for that user. You can set feature flags in your Kinde account. Here’s an example. ```jsx feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ``` In order to minimize the payload in the token we have used single letter keys / values where possible. The single letters represent the following: `t` = `type` `v` = `value` `s` = `string` `b` = `boolean` `i` = `integer` We provide helper functions to more easily access feature flags: ```jsx /** * Get a flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {obj} [defaultValue] - A fallback value if the flag isn't found. * @param {'s'|'b'|'i'|undefined} [flagType] - The data type of the flag (integer / boolean / string). * @return {object} Flag details. */ kinde.getFlag(code, defaultValue, flagType); /* Example usage */ kinde.getFlag('theme'); /*{ // "code": "theme", // "type": "string", // "value": "pink", // "is_default": false // whether the fallback value had to be used */} kinde.getFlag('create_competition', {defaultValue: false}); /*{ "code": "create_competition", "value": false, "is_default": true // because fallback value had to be used }*/ ``` We also require wrapper functions by type which should leverage `getFlag` above. Booleans: ```jsx /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {bool} [defaultValue] - A fallback value if the flag isn't found. * @return {bool} */ kinde.getBooleanFlag(code, defaultValue); /* Example usage */ kinde.getBooleanFlag("is_dark_mode"); // true kinde.getBooleanFlag("is_dark_mode", false); // true kinde.getBooleanFlag("new_feature", false); // false (flag does not exist so falls back to default) ``` Strings and integers work in the same way as booleans above: ```jsx /** * Get a string flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {string} [defaultValue] - A fallback value if the flag isn't found. * @return {string} */ getStringFlag(code, defaultValue); /** * Get an integer flag from the feature_flags claim of the access_token. * @param {string} code - The name of the flag. * @param {int} [defaultValue] - A fallback value if the flag isn't found. * @return {int} */ getIntegerFlag(code, defaultValue); ``` ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```jsx const kinde = await createKindeClient({ audience: "<your_api>" ... }); ``` To request multiple audiences, pass them separated by white space. See example. ```jsx const kinde = await createKindeClient({ audience: "<your_api1> <your_api2" ... }); ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## **Overriding scope** By default the JavaScript SDK requests the following scopes: - `profile` - `email` - `offline` - `openid` You can override this by passing `scope` into the `createKindeClient` ```jsx const kinde = await createKindeClient({ client_id: "<your_kinde_client_id>", domain: "https://<your_kinde_subdomain>.kinde.com", redirect_uri: "http://localhost:3000", scope: "openid" }); ``` ## **Getting claims** We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```jsx kinde.getClaim("aud"); // {name: "aud", "value": ["api.yourapp.com"]} kinde.getClaim("given_name", "id_token"); // {name: "given_name", "value": "David"} ``` ## **Persisting authentication state on page refresh or new tab** You will find that when you refresh the browser using a front-end based SDK that the authentication state is lost. This is because there is no secure way to persist this in the front-end. There are two ways to work around this. - (Recommended) use our [Custom Domains](/build/domains/pointing-your-domain/) feature which then allows us to set a secure, httpOnly first party cookie on your domain. - (Non-production solution only) If you’re not yet ready to add your custom domain, or for local development, we offer an escape hatch you can provide to the Kinde Client `is_dangerously_use_local_storage`. This will use local storage to store the refresh token. DO NOT use this in production. Once you implement one of the above, you don’t need to do anything else. ## **Persisting application state** The options argument passed into the `login` and `register` methods accepts an `app_state` key where you can pass in the current application state prior to redirecting to Kinde. This is then returned to you in the second argument of the `on_redirect_callback` as seen above. A common use case is to allow redirects to the page the user was trying to access prior to authentication. This could be achieved as follows: Login handler: ```jsx login({ app_state: { redirectTo: window.location } }); ``` Redirect handler: ```jsx const kinde = await createKindeClient({ client_id: "<your_kinde_client_id>", domain: "https://<your_kinde_subdomain>.kinde.com", redirect_uri: "http://localhost:3000", on_redirect_callback: (user, appState) => { if (appState?.redirectTo) { window.location = appState?.redirectTo; } } }); ``` ## **Token storage in the authentication state** By default the JWTs provided by Kinde are stored in memory. This protects you from both [CSRF](https://owasp.org/www-community/attacks/csrf) attacks (possible if stored as a client side cookie) and [XSS](https://owasp.org/www-community/attacks/xss/) attacks (possible if persisted in local storage). The trade off with this approach however is that if a page is refreshed or a new tab is opened then the token is wiped from memory, and the sign in button would need to be clicked to re-authenticate. There are two ways to prevent this behaviour: 1. Use the Kinde custom domain feature. We can then set a secure, httpOnly cookie against your domain containing only the refresh token which is not vulnerable to CSRF attacks. 2. There is an escape hatch which can be used for local development: `is_dangerously_use_local_storage`. This absolutely should not be used in production and we highly recommend you use a custom domain. This will store only the refresh token in local storage and is used to silently re-authenticate. ```jsx const kinde = await createKindeClient({ client_id: "[YOUR_KINDE_CLIENT_ID]", domain: "[YOUR_KINDE_DOMAIN]", redirect_uri: window.location.origin, is_dangerously_use_local_storage: true }); ``` ## **SDK API Reference - createKindeClient** ### `audience` The audience claim for the JWT. Type: `string` Required: No ### `client_id` The unique ID of your application in Kinde. Type: `string` Required: Yes ### `domain` Either your Kinde instance URL, e.g `https://yourapp.kinde.com` or your custom domain. Type: `string` Required: Yes ### `logout_uri` Where your user will be redirected when they sign out. Type: `string` Required: No ### `is_dangerously_use_local_storage` An escape hatch for storing the refresh token in local storage. Recommended for local development only, and not production. Type: `boolean` Required: No Default: `false` ### `redirect_uri` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No ```jsx openid profile email offline ``` ## **SDK API Reference - kindeClient methods** ### `createOrg` Constructs redirect url and sends user to Kinde to sign up and create a new org for your business. usage: ```jsx kinde.createOrg(); ``` Sample output: ```jsx redirect; ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```jsx claim: string, tokenKey?: string ``` Usage: ```jsx kinde.getClaim("given_name", "id_token"); ``` Sample output: ```jsx "David"; ``` ### `getPermission` Returns the state of a given permission. Arguments: ```jsx key: string; ``` Usage: ```jsx kinde.getPermission("read:todos"); ``` Sample output: ```jsx { orgCode: "org_1234", isGranted: true } ``` ### `getPermissions` Returns all permissions for the current user for the organization they are signed in to. Usage: ```jsx kinde.getPermissions(); ``` Sample output: ```jsx { orgCode:"org_1234", permissions:["create:todos", "update:todos", "read:todos"] } ``` ### `getOrganization` Get details for the organization your user is signed in to. Usage: ```jsx kinde.getOrganization(); ``` Sample output: ```jsx { orgCode: "org_1234"; } ``` ### `getToken` Returns the raw Access token from memory. Usage: ```jsx kinde.getToken(); ``` Sample output: ```jsx eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ .SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c; ``` ### `getUser` Returns the profile for the current user. Usage: ```jsx kinde.getUser(); ``` Sample output: ```jsx { given_name: "Dave"; id: "abcdef"; family_name: "Smith"; email: "dave@smith.com"; } ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Usage: ```jsx kinde.getUserOrganizations(); ``` Sample output: ```jsx { orgCodes: ["org_1234", "org_5678"]; } ``` ### `login` Constructs redirect URL and sends user to Kinde sign in. Arguments ```jsx org_code?: string ``` Usage: ```jsx kinde.login(); ``` Example output: ```jsx redirect; ``` ### `logout` Logs the user out of Kinde. Argument: ```jsx org_code?: string ``` Usage: ```jsx kinde.logout(); ``` Example output: ```jsx redirect; ``` ### `register` Constructs redirect url and sends user to Kinde to sign up. Usage: ```jsx kinde. ``` Sample output: ```jsx redirect; ``` Reach out to [support@kinde.com](mailto:support@kinde.com) if you need help getting Kinde connected.

# Developer tools - Sdks - React SDK

> Complete guide for React SDK including installation, provider setup, authentication hooks, callback handling, and API integration for React 18+ applications.

React SDK, React Context Provider, useKindeAuth hook, authentication, login, register, logout, access tokens
developer-tools, sdks, react, frontend

The Kinde React SDK allows developers to quickly and securely integrate a new or an existing React application to the Kinde platform. You can also view the [React package](https://github.com/kinde-oss/kinde-auth-react) and [React starter kit](https://github.com/kinde-starter-kits/react-starter-kit) in GitHub. This new SDK (v5) is optimized to work with React version 18+. If you are currently using v4, refer to this [migration information](/developer-tools/sdks/frontend/react-sdk/#migration-from-v4-to-v5) to update to v5. ## **Register for Kinde** If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. ## **Configure React** ### Installation <PackageManagers pkg=" @kinde-oss/kinde-auth-react" /> ## **Integrate with your app** Kinde uses a React Context Provider to maintain its internal state in your application. Import the Kinde Provider component and wrap your application in it. ```jsx import { KindeProvider } from '@kinde-oss/kinde-auth-react'; const App = () => ( <KindeProvider clientId="<your_kinde_client_id>" domain="<your_kinde_domain>" logoutUri={window.location.origin} redirectUri={window.location.origin} > <Routes /> </KindeProvider> ); ``` ## **Set callback and logout URLs** Set the URLs in Kinde so that after your user signs up, signs in, or signs out, they will be redirected back to your application. 1. In Kinde, go to **Settings > Applications > [your app] > View details**. 2. Replace the `your_kinde_client_id` and `your_kinde_domain` placeholders in the code block above with the the values from the **App keys** section. 3. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs) - for example `https://localhost:3000/home/callback` - Allowed logout redirect URLs - for example `https://localhost:3000` 4. Select **Save**. Tip: Make sure there are no hidden spaces and remove any ‘/’ forward slashes from the end of URLs. ## Environments If you would like to use different Environments as part of your development process, you will need to [add them within your Kinde business](/build/environments/environments/) first. You will also need to add the Environment subdomain to the code block above. ## Sign in and sign up Kinde provides a `useKindeAuth` hook with the methods `login` and `register` method to start the flow and also `LoginLink` and `RegisterLink` components Use the button examples below to redirect your users to Kinde, where they authenticate before being redirected back to your site. ```jsx import { LoginLink, RegisterLink } from '@kinde-oss/kinde-auth-react/components'; <LoginLink>Sign in</LoginLink> <RegisterLink>Sign up</RegisterLink> ``` ```jsx import { useKindeAuth } from '@kinde-oss/kinde-auth-react'; const { login, register } = useKindeAuth(); <button onClick={() => register(/* params here */)} type="button">Sign up</button> <button onClick={() => login(/* params here */)} type="button">Sign In</button> ``` ### Callback Events To handle the result of auth there are three callback events. - `onSuccess` - On Successful authentication, this includes the user authenticated along with the passed state and context to the Kinde hook - `onError` - When an error occurs during authentication, this includes the error along with the passed state and context to the Kinde hook ```jsx <KindeProvider callbacks={ { onSuccess: (user, state, context) => console.log("onSuccess", user, state, context), onError: (error, state, context) => console.log("onError", error, state, context), } } > <Routes /> </KindeProvider> ``` ### Passing additional params to the auth url Both the `login` and `register` methods accept all the extra authentication params that can be passed to Kinde as part of the auth flow. All the params are also accepted as attributes to the `LoginLink` and `RegisterLink` components. Some things you may wish to pass are: - `loginHint` this allows you to ask Kinde to prepopulate a users email address on the sign-up and sign-in screens. - `lang` if you offer multi-language support Kinde will automatically figure out the best language for your user based on their browser. However, if you want to force a language and override the users preference, you can do so by passing this attribute. ```javascript login({ loginHint: "jenny@example.com", lang: "ru" }) ``` ### Signing out Kinde provides a `useKindeAuth` hook with the method `logout` and component `LogoutLink` which can be used to end the current session. ```jsx const { logout } = useKindeAuth(); <button onClick={() => logout(/* params here */)} type="button">Sign out</button> ``` ```jsx import { LogoutLink } from '@kinde-oss/kinde-auth-react/components'; <LogoutLink>Sign out</LogoutLink> ``` ## Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ### **View user profile** You can get an authorized user’s profile from any component using the Kinde React hook. ```jsx import { useKindeAuth } from '@kinde-oss/kinde-auth-react'; const SayHello = () => { const { user } = useKindeAuth(); return <p>Hi {user.firstName}!</p>; }; ``` To be on the safe side we have also provided `isAuthenticated` and `isLoading` state to prevent rendering errors. ```jsx import { useKindeAuth } from '@kinde-oss/kinde-auth-react'; const UserProfile = () => { const { user, isAuthenticated, isLoading } = useKindeAuth(); if (isLoading) { return <p>Loading</p>; } return ({ isAuthenticated ? <div> <h2>{user.firstName}</h2> <p>{user.preferredEmail}</p> </div> : <p>Please sign in or register!</p> }); }; ``` ## Access control ### Check if user is authenticated ```jsx const { isAuthenticated } = useKindeAuth(); ``` ### Check user rights There are two ways to check if a user has a specific permission: - Using the `has` function from the `@kinde-oss/kinde-auth-react/utils` package - Using the `<ProtectedRoute>` component #### Using the `has` function The `has` function is a helper function that checks if a user has specific roles, permissions, feature flags, or billing entitlements. It returns a boolean value indicating whether the user meets all the specified criteria. ```typescript import { has } from '@kinde-oss/kinde-auth-react/utils'; // Basic usage - check multiple criteria at once const userHasAccess = has({ roles: ['admin'], permissions: ['create:todos'], featureFlags: ['theme'], billingEntitlements: ['premium'] }); ``` **Parameters:** - `roles` (optional): Array of role names the user must have - `permissions` (optional): Array of permission names the user must have - `featureFlags` (optional): Array of feature flag names the user must have - `billingEntitlements` (optional): Array of billing entitlement names the user must have **Return value:** `boolean` - `true` if user meets all criteria, `false` otherwise ### API vs Token-based checks By default, the `has` function performs checks using the user's tokens. You can override this behavior by passing the `forceApi` option to perform server-side validation: ```typescript // Force all checks to use API calls instead of tokens has({ roles: ['admin'], permissions: ['create:todos'], forceApi: true }) // Force only specific checks to use API calls has({ roles: ['admin'], permissions: ['create:todos'], forceApi: { permissions: true } // Only permissions use API, roles use tokens }) ``` ### Advanced usage with conditions You can add custom conditions to any check by expanding the object structure: ```typescript // Add custom conditions to role checks has({ roles: [{ role: 'admin', condition: (user) => user.isAdmin && user.isActive }], }) // Add custom conditions to permission checks has({ permissions: [{ permission: 'create:todos', condition: (user) => user.organizationId === 'org123' }], }) ``` ### Feature flag value checking For feature flags, you can check both the flag's existence and its specific value: ```typescript // Check if feature flag exists has({ featureFlags: ['theme'] }) // Check if feature flag has a specific value has({ featureFlags: [{ flag: 'theme', value: 'dark' }] }) // Check multiple feature flags with values has({ featureFlags: [ { flag: 'theme', value: 'dark' }, { flag: 'beta_features', value: true } ] }) ``` ### Complete example ```typescript import { has } from '@kinde-oss/kinde-auth-react/utils'; const checkUserAccess = () => { const canAccessAdminPanel = has({ roles: ['admin', 'super_admin'], permissions: ['read:users', 'write:users'], featureFlags: ['admin_panel'], billingEntitlements: ['enterprise_plan'] }); const canUseDarkTheme = has({ featureFlags: [{ flag: 'theme', value: 'dark' }], permissions: ['customize:theme'] }); return { canAccessAdminPanel, canUseDarkTheme }; }; ``` ### TypeScript type safety You can enhance type safety by declaring your specific roles, permissions, feature flags and billing entitlements. This provides autocomplete and compile-time checking for your access control. Create a type declaration file (e.g., `kinde-types.d.ts`) in your project: ```typescript declare module "@kinde-oss/kinde-auth-react/utils" { interface KindeConfig { roles: ['admin', 'user', 'moderator', 'super_admin']; permissions: ['read:users', 'write:users', 'delete:users', 'manage:settings']; featureFlags: ['dark_mode', 'beta_features', 'admin_panel']; billingEntitlements: ['basic', 'premium', 'enterprise']; } } ``` **Note:** Make sure your `tsconfig.json` includes the type declaration file, or place it in a directory that TypeScript automatically includes (like `src/types/` or the root of your project). ### Using the `<ProtectedRoute>` component **Note:** The `<ProtectedRoute>` component requires the `react-router-dom` package to be installed. The `<ProtectedRoute>` component is a wrapper component that checks if a user has specific permissions and renders the child component if they do. If the user doesn't have the required permissions, they are redirected to a fallback path. ```jsx import { ProtectedRoute } from '@kinde-oss/kinde-auth-react/react-router'; // Basic usage - protect a route with role-based access <ProtectedRoute has={{ roles: ['admin'] }} fallbackPath="/"> <div>You have access to this admin page</div> </ProtectedRoute> ``` **Props:** - `has` (required): Object containing the access requirements (same format as the `has` function) - `fallbackPath` (required): Path to redirect to if user doesn't have access - `children` (required): React components to render if user has access #### Basic examples ```jsx // Protect with single role <ProtectedRoute has={{ roles: ['admin'] }} fallbackPath="/unauthorized"> <AdminDashboard /> </ProtectedRoute> // Protect with multiple roles (user must have at least one) <ProtectedRoute has={{ roles: ['admin', 'moderator'] }} fallbackPath="/"> <ModeratorPanel /> </ProtectedRoute> // Protect with permissions <ProtectedRoute has={{ permissions: ['read:users', 'write:users'] }} fallbackPath="/dashboard"> <UserManagement /> </ProtectedRoute> // Protect with feature flags <ProtectedRoute has={{ featureFlags: ['beta_features'] }} fallbackPath="/"> <BetaFeatures /> </ProtectedRoute> ``` #### Complex access control ```jsx // Multiple criteria - user must have ALL specified requirements <ProtectedRoute has={{ roles: ['admin'], permissions: ['manage:users'], featureFlags: ['admin_panel'], billingEntitlements: ['premium'] }} fallbackPath="/upgrade" > <PremiumAdminPanel /> </ProtectedRoute> // Using API-based checks for real-time validation <ProtectedRoute has={{ roles: ['admin'], permissions: ['manage:users'], forceApi: true }} fallbackPath="/" > <RealTimeAdminPanel /> </ProtectedRoute> ``` #### Integration with React Router ```jsx import { Routes, Route } from 'react-router-dom'; import { ProtectedRoute } from '@kinde-oss/kinde-auth-react/react-router'; function App() { return ( <Routes> <Route path="/" element={<HomePage />} /> <Route path="/admin" element={ <ProtectedRoute has={{ roles: ['admin'] }} fallbackPath="/"> <AdminPage /> </ProtectedRoute> } /> <Route path="/premium" element={ <ProtectedRoute has={{ billingEntitlements: ['premium'] }} fallbackPath="/upgrade" > <PremiumPage /> </ProtectedRoute> } /> </Routes> ); } ``` #### Complete example with multiple protected routes ```jsx import { Routes, Route } from 'react-router-dom'; import { ProtectedRoute } from '@kinde-oss/kinde-auth-react/react-router'; function App() { return ( <Routes> <Route path="/" element={<HomePage />} /> {/* Basic admin access */} <Route path="/admin" element={ <ProtectedRoute has={{ roles: ['admin'] }} fallbackPath="/"> <AdminDashboard /> </ProtectedRoute> } /> {/* Premium features */} <Route path="/premium" element={ <ProtectedRoute has={{ billingEntitlements: ['premium'] }} fallbackPath="/upgrade" > <PremiumFeatures /> </ProtectedRoute> } /> {/* Beta features with specific permissions */} <Route path="/beta" element={ <ProtectedRoute has={{ featureFlags: ['beta_access'], permissions: ['beta:test'] }} fallbackPath="/" > <BetaFeatures /> </ProtectedRoute> } /> </Routes> ); } ``` ## Call your API The `getAccessToken` method lets you to securely call your API and pass the bearer token to validate that your user is authenticated. ```jsx const { getAccessToken } = useKindeAuth(); const fetchData = async () => { try { const accessToken = await getAccessToken(); const res = await fetch(`<your-api>`, { headers: { Authorization: `Bearer ${accessToken}` } }); const {data} = await res.json(); console.log({data}); } catch (err) { console.log(err); } }; ``` We have a range of backend SDKs available to assist you in securing your back end application using this token, alternatively you can use any JWT validator and decoder to assit you here. ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The `audience` argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```jsx <KindeProvider audience="<your_api> > ``` To request multiple audiences, pass them separated by white space. ```jsx <KindeProvider audience="<your_api1> <your_api2> > ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## Organizations ### Create an organization To create a new organization with the user registration, you can use the `createOrg` function to start the registration process: ```jsx <LoginLink isCreateOrg={true}>Sign in</LoginLink> <button onClick={() => login({isCreateOrg: true})} type="button">Sign in</button> ``` ### Sign up/sign in users to organizations To sign up a user to a particular organization, you must pass the `orgCode` from your Kinde account as the user is created. You can find the `orgCode` on the **Details** page of each organization in Kinde. ```jsx <LoginLink orgCode="org_1234">Sign in</LoginLink> <button onClick={() => login({orgCode: "org_1234"})} type="button">Sign in</button> ``` Following authentication Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the `permissions` for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```json { "aud": ["https://your_subdomain.kinde.com"], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": ["openid", "offline"], "sub": "kp:123457890" } ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## User Permissions Once a user has been verified as signed in, your project/application will be returned in the JWT token with an array of permissions for that user. You need to configure your project to read permissions and unlock the respective functions. [Configure permissions](/manage-users/roles-and-permissions/user-permissions/) in Kinde first. Here is an example set of permissions. ```json "permissions":[ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ] ``` We provide helper functions to more easily access permissions: ```jsx const {getPermission, getPermissions} = useKindeAuth(); await getPermission("create:todos"); // {permissionKey: "create:todos", orgCode: "org_1234", isGranted: true} await getPermissions(); // {orgCode: "org_1234", permissions: ["create:todos", "update:todos", "read:todos"]} ``` A practical example in code might look something like: ```jsx { (await getPermission("create:todos")).isGranted ? <button>Create todo</button> : null; } ``` ## **Feature flags** When a user signs in, the access token your project/application receives contains a custom claim called `feature_flags` which is an object detailing the feature flags for that user. You can [set feature flags](/releases/feature-flags/add-feature-flag/) in your Kinde account. Here’s an example. ```jsx feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ``` In order to minimize the payload in the token we have used single letter keys / values where possible. The single letters represent the following: `t` = `type` `v` = `value` `s` = `string` `b` = `boolean` `i` = `integer` We provide helper functions to more easily access feature flags: ```jsx const { getFlag } = useKindeAuth(); /* Example usage */ await getFlag('theme'); // string value await getFlag<boolean>('theme'); // boolean value await getFlag<number>('theme'); // numeric value /*{ // "code": "theme", // "type": "string", // "value": "pink", // "is_default": false // whether the fallback value had to be used */} getFlag('create_competition', {defaultValue: false}); /*{ "code": "create_competition", "value": false, "is_default": true // because fallback value had to be used }*/ ``` A practical example in code might look something like: ```jsx const { getFlag } = useKindeAuth(); { (await getFlag<boolean>('create_competition')) ? <button>Create competition</button> : null; } ``` A practical example in code might look something like: ```jsx const {getFlag} = useKindeAuth(); { getFlag<boolean>("create_competition") ? ( <button className={`theme-${getFlag("theme")}`}>Create competition</button> ) : null; } ``` ## **Overriding scope** By default the JavaScript SDK requests the following scopes: - `profile` - `email` - `offline` - `openid` You can override this by passing `scope` into the `<KindeProvider>`. ```jsx <KindeProvider scope="openid > ``` ## **Getting claims** We have provided a helper to grab any claim from your ID or access tokens. The helper defaults to access tokens: ```jsx const { getClaim } = useKindeAuth(); getClaim("aud"); // {name: "aud", "value": ["api.yourapp.com"]} getClaim("given_name", "idToken"); // {name: "given_name", "value": "David"} ``` ## **Persisting authentication state on page refresh or new tab** You will find that when you refresh the browser using a front-end based SDK that the authentication state is lost. This is because there is no secure way to persist this in the front-end. There are two ways to work around this. - (Recommended) use our [Custom Domains](/build/domains/pointing-your-domain/) feature which then allows us to set a secure, httpOnly first party cookie on your domain. - (Non-production solution only) If you’re not yet ready to add your custom domain, or for local development, we offer an escape hatch `<KindeProvider>` `useInsecureForRefreshToken`. This will use local storage to store the refresh token. DO NOT use this in production. Once you implement one of the above, you don’t need to do anything else. ## **Persisting application state** The options argument passed into the `login` and `register` methods accepts an `state` key where you can pass in the current application state prior to redirecting to Kinde. This is then returned to you in the second argument of the `onSuccess` callback as seen above. A common use case is to allow redirects to the page the user was trying to access prior to authentication. This could be achieved as follows: Login handler: ```jsx <button onClick={() => login({ state: { redirectTo: location.state ? location.state?.from?.pathname : null } }) } /> ``` Redirect handler: ```jsx <KindeProvider callbacks={ { onSuccess: (user, state, context) => { window.location = state?.redirectTo }, } } > ``` ## **Token storage in the authentication state** By default the JWTs provided by Kinde are stored in memory. This protects you from both [CSRF](https://owasp.org/www-community/attacks/csrf) attacks (possible if stored as a client side cookie) and [XSS](https://owasp.org/www-community/attacks/xss/) attacks (possible if persisted in local storage). The trade off with this approach however is that if a page is refreshed or a new tab is opened then the token is wiped from memory, and the sign in button would need to be clicked to re-authenticate. There are two ways to prevent this behaviour: 1. Use the Kinde custom domain feature. We can then set a secure, httpOnly cookie against your domain containing only the refresh token which is not vulnerable to CSRF attacks. 2. There is an escape hatch which can be used for local development: `useInsecureForRefreshToken`. This SHOULD NOT be used in production. We recommend you use a custom domain. This will store only the refresh token in local storage and is used to silently re-authenticate. ```jsx <KindeProvider useInsecureForRefreshToken={process.env.NODE_ENV === 'development'} ... > ``` ## Migration from v4 to v5 ### login and register method params No longer need to use authUrlParams parameter, all url params are now passed at top level and are now camel case instead of snake case. e.g. ``` login({ authUrlParams: { login_hint: "jenny@example.com", lang: "ru" } }) ``` becomes ``` login({ loginHint: "jenny@example.com", lang: "ru" }) ``` ### Callbacks `onRedirectCallback` has been removed in favor of a richer event system. This has been replaced by `callbacks > onSuccess` ### Create organization `createOrg` method has been removed and replaced by using `isCreateOrg` on the login or register methods or Components ### Accessing access token `getToken` has been replaced by `await getAccessToken` ### Token helpers all token helpers are now async methods ### getClaims token attribute changed to camelCase. e.g. ```javascript getClaim("given_name", "id_token"); ``` becomes ```javascript await getClaim("given_name", "idtoken"); ``` ## **API References - KindeProvider** ### **`audience`** The audience claim for the JWT. Type: `string` Required: No ### **`clientId`** The ID of your application as it appears in Kinde. Type: `string` Required: Yes ### **`domain`** Either your Kinde instance url or your custom domain. e.g `https://yourapp.kinde.com` Type: `string` Required: Yes ### **`logoutUri`** Where your user will be redirected when they log out. Type: `string` Required: No ### `useInsecureForRefreshToken` An escape hatch for storing the refresh in local storage for local development. Type: `boolean` Required: No Default: `false` ### **`redirectUri`** The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### **`scope`** The scopes to be requested from Kinde. Type: `string` Required: No Default: `openid profile email offline` ## **API References- useKindeAuth hook** ### `getClaim` Gets a claim from an access or ID token. Arguments: ```typescript claim: string, tokenKey?: "accessToken" | "idToken" ``` Usage: ```jsx getClaim("givenName", "idToken"); ``` Sample: ```jsx "David"; ``` ### `getOrganization` Get details for the organization your user is signed into. Usage: ```jsx getOrganization(); ``` Sample: ```jsx { orgCode: "org_1234"; } ``` ### `getPermission` Returns the state of a given permission. Arguments: ```jsx key: string; ``` Usage: ```jsx getPermission("read:todos"); ``` Sample: ```jsx { orgCode: "org_1234", isGranted: true } ``` ### `getPermissions` Returns all permissions for the current user for the organization they are signed into. Usage: ```jsx getPermissions(); ``` Sample: ```jsx { orgCode: "org_1234", permissions: [ "create:todos", "update:todos", "read:todos ] } ``` ### `getToken` Returns the raw Access token from memory. Usage: ```jsx getToken(); ``` Sample: ```jsx eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c; ``` ### `getUserProfile` Returns the profile for the current user. Usage: ```jsx getUserProfile(); ``` Sample: ```jsx { givenName: "Dave"; id: "abcdef"; familyName: "Smith"; email: "dave@smith.com"; } ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Usage: ```jsx getUserOrganizations(); ``` Sample: ```jsx { orgCodes: ["org_1234", "org_5678"]; } ``` ### `login` Constructs redirect url and sends user to Kinde to sign in. Arguments: ```typescript orgCode?: string; state?: object; ``` Usage: ```jsx login(); ``` Sample: ```jsx redirect; ``` ### `logout` Logs the user out of Kinde. Argument: ```typescript orgCode?: string ``` Usage: ```jsx logout(); ``` Sample: ```jsx redirect; ``` ### `register` Constructs redirect url and sends user to Kinde to sign up. Arguments: ```typescript orgCode?: string; state?: object; ``` Usage: ```jsx register(); ``` Sample: ```jsx redirect; ``` ## **API References- login** ### `getClaim` Gets a claim from an access or ID token. Arguments: ```typescript claim: string, tokenKey?: "accessToken" | "idToken" ``` Usage: ```jsx getClaim("given_name", "idToken"); ``` Sample: ```jsx "David"; ``` If you need any assistance with getting Kinde connected reach out to us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Android SDK

> Complete guide for Android SDK including Maven installation, Retrofit integration, PKCE authentication, and native Android app integration.

android sdk, kotlin, java, maven, retrofit, gson, pkce, user permissions, meta-data
developer-tools, sdks, android, native

The Kinde Android SDK allows developers to quickly and securely integrate a new or existing application into the Kinde platform. You can also view the [Android docs](https://github.com/kinde-oss/kinde-sdk-android) and [Android starter kit](https://github.com/kinde-starter-kits/android-starter-kit) in GitHub. ## Register for Kinde If you don’t already have a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain to get started, e.g. `https://yourapp.kinde.com`. ## Install KindeSDK is available through [Maven](https://search.maven.org/). To install it, simply add the following line to your `build.gradle`: ```kotlin ... implementation "com.kinde:android-sdk:<sdk_version> ... ``` You should also include Retrofit and the GSON converter as dependencies: ```kotlin implementation "com.squareup.retrofit2:retrofit:<retrofit_version> implementation "com.squareup.retrofit2:converter-gson:<retrofit_version> ``` ## Configure Kinde ### Set callback URLs 1. In Kinde, go to **Settings > Applications > [Your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs): `{your_url_scheme}://<your_kinde_host>//kinde_callback` - for example `myapp://myhost.kinde.com//kinde_callback` - Allowed logout redirect URLs: `{your_url_scheme}://<your_kinde_host>//kinde_logoutcallback` - for example `myapp://myhost.kinde.com//kinde_logoutcallback` 3. Select **Save**. ### Add environments If you would like to use our Environments feature as part of your development process, you will need to create them within your Kinde account. In this case you would use the Environment subdomain in the code block above. ## **Configure your app** ### Environment variables The SDK reads configuration from `meta-data`, so you should add `meta-data` to the `<application>` section of your `AndroidManifest.xml`. You can find these variables in Kinde. Go to **Settings > Applications > [Your app] > View details**. Then scroll to the **App keys** section. - `au.kinde.domain:` - your Kinde domain - `au.kinde.clientId` ```xml ... <application ...> ... <meta-data android:name="au.kinde.domain android:value="your_kinde_url" /> <meta-data android:name="au.kinde.clientId android:value="your_kinde_client_id" /> ... </application> ... ``` Configuration example: ```xml ... <application ...> ... <meta-data android:name="au.kinde.domain android:value="app.kinde.com" /> <meta-data android:name="au.kinde.clientId android:value="test@live" /> ... </application> ... ``` ## Integrate with your app You'll need to import the SDK package in your Android app. ```kotlin ... import android.os.Handler import android.util.Log ... class YourActivity : AppCompatActivity() { ... private lateinit var sdk: KindeSDK ... override fun onCreate(savedInstanceState: Bundle?) { ... sdk = KindeSDK(this, object : KindeSDK.SDKListener { override fun onNewToken(token: String) { // Need to implement } override fun onLogout() { // Need to implement } override fun onException(exception: Exception) { Handler(Looper.getMainLooper()).post { Log.e("Kinde", "Something wrong init KindeSDK: " + exception.message)" } } }) ... } ``` ## Login / Register The Kinde client provides methods for a simple login / register flow. Add buttons in your view as follows: ```kotlin ... findViewById<View>(R.id.b_sign_in).setOnClickListener { sdk.login(GrantType.PKCE) } findViewById<View>(R.id.b_sign_up).setOnClickListener { sdk.register(GrantType.PKCE) } ... ``` ### Handle redirect Once your user is redirected back to your site from Kinde, it means you’ve logged in successfully. You will need to implement the `onNewToken` function from the SDK. ```kotlin ... sdk = KindeSDK(this, object : KindeSDK.SDKListener { override fun onNewToken(token: String) { // Need to implement } ... } ``` ## Logout This is implemented in much the same way as logging in or registering. The Kinde SPA client comes with a logout method. ```kotlin findViewById<View>(R.id.b_sign_out).setOnClickListener { sdk.logout() } ``` ## Get user information To access the user information, call the `getUserDetails` method. ```kotlin sdk.getUserDetails().let { Log.i("Kinde", it.givenName + " " + it.familyName) } ``` ### View users in Kinde In Kinde, go to **Users** to view all users and subscribers. ## User Permissions Once a user has been verified, your application will be returned the JWT token with an array of permissions for that user. You will need to configure your application to read permissions and unlock the respective functions. [Set roles and permissions](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/) at the Business level in Kinde. Here’s an example of permissions. ```kotlin String[] permissions = { "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", } ``` We provide helper functions to more easily access permissions: ```kotlin sdk.getPermission("create:todos") // {orgCode: "org_b235c067b7e4", isGranted: true} sdk.getPermissions() // {orgCode: "org_b235c067b7e4", permissions: [ "create:users", "view:users" ]} ``` A practical example in code might look something like: ```kotlin if(sdk.getPermission("create:todos").isGranted) { // create new a todo } ``` ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience to be added to the provided token. The audience of a token is the intended recipient of the token. ```xml <meta-data android:name="au.kinde.audience" android:value="example@example" /> ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## Overriding scope By default the `KindeSDK` requests the following scopes: - `profile` - `email` - `offline` - `openid` You can override this by passing scope into the `KindeSDK`. ```kotlin sdk = KindeSDK( ... scopes = listOf("openid", "offline", "email", "profile"), ... ) ``` ## Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```kotlin sdk.getClaim("aud") // ["api.yourapp.com"] sdk.getClaim("given_name", TokenType.ID_TOKEN) // "David ``` ## Feature flags We have provided a helper to grab any feature flag from `access_token`. ```kotlin ... import au.kinde.sdk.model.FlagType ... sdk.getFlag("theme"); // returns { "code": "theme", "type": "String", "value": "pink", "isDefault": true // whether the fallback value had to be used } // Another usage case sdk.getFlag("is_dark_mode"); // returns { "code": "is_dark_mode", "type": "Boolean", "value": true, "isDefault": false } // This flag does not exist - default value provided sdk.getFlag("create_competition", false); // returns { "code": "create_competition", "type": "Boolean", "value": false, "isDefault": true // because fallback value had to be used } // The flag type was provided as string, but it is an integer sdk.getFlag("competitions_limit", 3, FlagType.String); // should error out - Flag "competitions_limit" is type integer - requested type string // This flag does not exist, and no default value provided sdk.getFlag("new_feature"); // should error out - This flag was not found, and no default value has been provided ``` We also provide wrapper functions which should leverage `getFlag` above. **Get boolean flags** ```kotlin sdk.getBooleanFlag("is_dark_mode"); // true sdk.getBooleanFlag("is_dark_mode", false); // true sdk.getBooleanFlag("new_feature", false); // false (flag does not exist so falls back to default) sdk.getBooleanFlag("new_feature"); // Error - flag does not exist and no default provided sdk.getBooleanFlag("theme", false); // Error - Flag "theme" is of type string not boolean ``` **Get string flags** ```kotlin sdk.getStringFlag("theme"); // "pink sdk.getStringFlag("theme", "blue"); // "pink sdk.getStringFlag("cta_color", "blue"); // "blue" (flag does not exist so falls back to default) sdk.getStringFlag("cta_color"); // Error - flag does not exist and no default provided sdk.getStringFlag("is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not string ``` **Get integer flags** ```kotlin sdk.getIntegerFlag("competitions_limit"); // 5 sdk.getIntegerFlag("competitions_limit", 3); // 5 sdk.getIntegerFlag("team_count", 2); // 2 (flag does not exist so falls back to default) sdk.getIntegerFlag("team_count"); // Error - flag does not exist and no default provided sdk.getIntegerFlag("is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not integer ``` ## Organizations ### Create an organization To have a new organization created within your application, you will need to run a similar function to below: ```kotlin ... findViewById<View>(R.id.create_org).setOnClickListener { sdk.createOrg(orgName = "Your Organization") } ... ``` ### Sign up and sign in to organizations Kinde has a unique code for every organization. You’ll have to pass this code through when you register a new user or sign in to a particular organization. Example function below: ```kotlin findViewById<View>(R.id.b_sign_in).setOnClickListener { sdk.login(GrantType.PKCE, orgCode = "your_org_code") } findViewById<View>(R.id.b_sign_up).setOnClickListener { sdk.register(GrantType.PKCE, orgCode = "your_org_code") } ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information, we also include the `org_code` and the permissions for that organization. This is important as a user can belong to multiple organizations and have different permissions for each. Example of a returned token: ```kotlin { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": [ "openid", "profile", "email", "offline ], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to. This is useful if you wanted to build out an organization switcher, for example. ```json { ... "org_codes": ["org_1234", "org_4567"], ... }; ``` There are two helper functions you can use to extract information: ```kotlin sdk.getOrganization() // {'orgCode': 'org_1234'} sdk.getUserOrganizations() // {'orgCodes': ['org_1234', 'org_abcd']} ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ### Token storage Once the user has successfully authenticated, you'll have a JWT and possibly a refresh token that should be stored securely. ## SDK API reference ### `activity` Activity of the application. Type: `AppCompatActivity` Required: Yes ### `loginRedirect` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `logoutRedirect` Where the user will be redirected when they sign out. Type: `string` Required: Yes ### `scopes` Type: `List<String>` Is required: No Default: ```kotlin listOf("openid", "offline", "email", "profile") ``` ### `SDKListener` The listener that receives callbacks from the SDK. Type: ```kotlin SDKListener { fun onNewToken(token: String) fun onLogout() fun onException(exception: Exception) } ``` Required: Yes ## KindeSDK methods ### `login` Starts the authorization flow. Arguments: ```kotlin grantType: GrantType?, orgCode: String? // GrantType { PKCE, NONE } ``` Usage: ```kotlin sdk.login(GrantType.PKCE)orsdk.login(GrantType.PKCE, orgCode = "your_org_code") ``` ### `register` Starts the registration flow. Arguments: ```kotlin grantType: GrantType?, orgCode: String? ``` Usage: ```kotlin sdk.register(GrantType.PKCE)orsdk.register(GrantType.PKCE, orgCode = "your_org_code") ``` ### `createOrg` Starts the registration flow and creates a new organization in your business. Arguments: ```kotlin grantType: GrantType?, orgCode: String? ``` Usage: ```kotlin sdk.createOrg(orgName =”Your Organization”)orsdk.register(GrantType.PKCE, orgName =”Your Organization”) ``` ### `logout` Logs the user out of Kinde. Usage: `sdk.logout()` ### `isAuthenticated` Checks that access token is present. Usage: `sdk.isAuthenticated()` Sample output: `true` or `false` ### `getUserDetails` Gets user details from an access or ID token. Usage: `sdk.getUserDetails()` Sample output: ```kotlin { givenName: "Dave"; id: "abcdef"; familyName: "Smith"; email: "dave@smith.com" } ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```kotlin claim: String, tokenType: TokenType // TokenType { ID_TOKEN, ACCESS_TOKEN} ``` Usage: ```kotlin sdk.getClaim('given_name', TokenType.ID_TOKEN); ``` Sample output: `"David"` ### `getPermission` Returns the state of a given permission. Usage: ```kotlin sdk.getPermission("read:todos") ``` Sample output: ```kotlin { orgCode: "org_1234", isGranted: true } ``` ### `getPermissions` Returns all permissions for the current user for the organization they are logged into. Arguments: `permission: String` Usage: `sdk.getPermissions()` Sample output: ```kotlin { orgCode: "org_1234", permissions: [ "create:todos", "update:todos", "read:todos", "create:todos", "update:todos", "read:todos ] } ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Usage: `sdk.getUserOrganizations()` Sample output: ```kotlin { orgCodes: [ "org_1234", "org_5678", "org1_234", "org_5678 ] } ``` ### `getOrganization` Get details for the organization your user is signed into. Usage: `sdk.getOrganization()` Sample output: ```kotlin {orgCode: "org_1234"} ``` ### `getFlag` Gets a feature flag from an access token. Arguments: ```kotlin code: String, defaultValue: Any? = null; flagType: FlagType? = null // FlagType { String, Integer, Boolean } ``` Usage: `sdk.getFlag("theme");` Sample output: ```kotlin {"code": "theme", "type": "string", "value": "pink","is_default": False} ``` ### `getBooleanFlag` Gets a boolean feature flag from an access token Arguments: ```kotlin code: String; defaultValue: Boolean? = null ``` Usage: ```kotlin sdk.getBooleanFlag(”is_dark_mode”); ``` Sample output: `true` or `false` ### `getStringFlag` Gets a string feature flag from an access token Arguments: ```kotlin code: String; defaultValue: String? = null ``` Usage: ```kotlin sdk.getStringFlag("theme"); ``` Sample output: `“pink”` ### `getIntegerFlag` Gets a integer feature flag from an access token Arguments: ```kotlin code: String; defaultValue: Int? = null ``` Usage: ```kotlin sdk.getIntegerFlag("competitions_limit"); ``` Sample output: `5` If you need help getting Kinde connected, contact us at [support@kinde.com](mailto:support@kinde.com). ```

# Developer tools - Sdks - Expo

> Complete guide for Expo SDK including authentication setup, token utilities, user profile management, and mobile app integration for React Native applications.

expo, react native, mobile authentication, token utilities, user profile, feature flags, permissions
developer-tools, sdks, expo, native

The Kinde React Native SDK allows developers to quickly and securely integrate a new or an existing React Native application into the Kinde platform. This SDK is for people using Expo. ## Register for Kinde If you haven't already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. ## Before you install You will need Node, the React Native command line interface, a JDK, Android Studio (for Android) and Xcode (for iOS). Follow [the installation instructions for your chosen OS](https://reactnative.dev/docs/environment-setup) to install dependencies. ## Installation with Expo Managed Workflow ### Install package <PackageManagers pkg="@kinde/expo" /> ### Setup provider ```jsx <KindeAuthProvider config={{ domain: "<KINDE DOMAIN>", // e.g https://mybusiness.kinde.com clientId: "<CLIENT ID>", }} // All callbacks are optional callbacks={{ onSuccess: async (token, state, context) => { }, onError: (error) => { }, onEvent: async (event, state, context) => { }, }} > {/* Your app components go here */} </KindeAuthProvider> ``` ### Auth Methods ```jsx const kinde = useKindeAuth(); const handleSignUp = async () => { const token = await kinde.register(); if (token) { // User was authenticated } }; const handleSignIn = async () => { const token = await kinde.login(); if (token) { // User was authenticated } }; const handleLogout = async () => { console.log("logout", await kinde.logout()); }; ``` #### Example usage ```jsx <Pressable onPress={handleSignIn}> <ThemedText>Sign In</ThemedText> </Pressable> ``` Login and register methods accept and object containing all [Kinde supported URL parameters](https://docs.kinde.com/developer-tools/about/using-kinde-without-an-sdk/#request-parameters). Logout accepts object which allows you to revoke the token ```jsx kinde.logout({ revokeToken: true }) ``` #### Properties (Only available from `useKindeAuth`) - `isAuthenticated` - Returns true/false if the user is authenticated ## Kinde configuration 1. In Kinde, go to **Settings > Applications.** 2. Select **View details** on the **Frontend app**. 3. Scroll down to the **Callback URLs** section. 4. Add in the callback URLs for your React Native app, which should look something like this: - Allowed callback URLs - `<myapp://localhost:3000>` - Allowed logout redirect URLs - `<myapp://localhost:3000>` Make sure you press the Save button at the bottom of the page! Note: The `<myapp://localhost:3000>` is used as an example of local URL Scheme, change to the local URL Scheme or production URL Scheme that you use. ## Token Utilities A selection of utility functions are available. *Expo 53+*: Import from `@kinde/expo/utils` and `useKindeAuth` hook *Expo 51 and 52*: Import from `@kinde/js-utils` and `useKindeAuth` hook ```ts import { getUserProfile, getFlag, getRoles } from "@kinde/expo/utils"; // Example usage const checkUserProfile = async () => { const profile = await getUserProfile(); console.log("User profile:", profile); }; ``` #### Utility functions include: - `getDecodedToken` - Get token decoded values - `getUserProfile` - Get the current user's profile - `getFlag` - Check feature flag values - `getRoles` - Get the current user's roles - `getCurrentOrganization` - Get the current organization - `getUserOrganizations` - Get all organizations the user belongs to - `getPermission` - get a single permission value - `getPermissions` - get all user permissions - `getClaim` - Get a specific claim from the token - `getClaims` - Get all claims from the token - `refreshToken` - Manually refresh the access token ### `getDecodedToken` Get the decoded access token or ID token. ```typescript getDecodedToken = async <T = JWTDecoded>( tokenType: "accessToken" | "idToken" = StorageKeys.accessToken, ): Promise<(T & JWTDecoded) | null> ``` Example usage: ```javascript // Get the decoded access token const decodedAccessToken = await getDecodedToken("accessToken"); // Get the decoded ID token const decodedIdToken = await getDecodedToken("idToken"); // Adding custom claims to the decoded token const decodedAccessTokenWithCustomClaims = await getDecodedToken<{ customClaim: string; }>("accessToken"); ``` ### `getClaim` Gets a claim from an access or ID token. ```typescript getClaim = async <T = JWTDecoded, V = string | number | string[]>( keyName: keyof T, tokenType: "accessToken" | "idToken" = "accessToken", ): Promise<{ name: keyof T; value: V; } | null> ``` Example usage: ```javascript // Get the decoded access token const roles = await getClaim("roles", "accessToken"); // Get the decoded ID token const givenName = await getClaim("given_name", "idToken"); // Acessing custom claims const decodedAccessTokenWithCustomClaims = await getClaim<{ customClaim: string; }>("customClaim", "accessToken"); ``` ### `getCurrentOrganization` Returns the current users logged in organization code. ```typescript getCurrentOrganization = async (): Promise<string | null> ``` Example usage: ```javascript // Get the decoded access token const orgCode = await getCurrentOrganization(); // org_123456 ``` ### `getUserOrganizations` Returns all organization codes the current user belongs to. ```typescript getUserOrganizations = async (): Promise<string[] | null> ``` Example usage: ```javascript // Get the decoded access token const orgCode = await getUserOrganizations(); // [ // "org_0000000000001", // "org_0000000000002", // "org_0000000000003", // "org_0000000000004 // ] ``` ### `getFlag` Get the value of a feature flag. ```typescript getFlag = async <T = string | boolean | number | object>( name: string, ): Promise<T | null> ``` Example usage: ```javascript // Get the feature flag value const featureValue = await getFlag("feature_flag_name"); // Define the type of the feature flag const featureValue = await getFlag<string>("feature_flag_name"); const featureValue = await getFlag<boolean>("feature_flag_name"); const featureValue = await getFlag<number>("feature_flag_name"); const featureValue = await getFlag<object>("feature_flag_name"); ``` ### `getPermission` Get the value of a feature flag. ```typescript getPermission = async <T = string>( permissionKey: T, ): Promise<PermissionAccess> ``` Example usage: ```javascript // Get the feature flag value const permission = await getPermission("feature_flag_name"); // { // permissionKey: "feature_flag_name", // orgCode: "org_123456", // isGranted: true / false, // } ``` ### `getPermissions` Get the permissions for the current user for the organization they are signed into. ```typescript getPermissions = async <T = string>( permissionKey: T, ): Promise<PermissionAccess> ``` Example usage: ```javascript // Get the feature flag value const permissions = await getPermissions("feature_flag_name"); // { // orgCode: "org_123456", // permissions: [ // "create:todos", // "update:todos", // "read:todos", // "delete:todos", // "create:tasks", // "update:tasks", // "read:tasks", // "delete:tasks // ] // } ``` ### `getRoles` Get the users Roles <Aside> **Note:** Roles are optional in the token, will need to add to the token in your application settings </Aside> ```typescript getRoles = async (): Promise<Role[]> ``` Example usage: ```javascript // Get the feature flag value const roles = await getRoles(); // [ // { // id: "01932730-c828-c01c-9f5d-c8f15be13e24", // key: "admin", // name: "admin", // }, // ] ``` ### `getUserProfile` ```typescript getUserProfile = async <T>(): Promise< (UserProfile & T) | null > ``` Example usage: ```javascript // Get the feature flag value const roles = await getUserProfile(); // { // "email": "someuser@emaildomain.com", // "familyName": "Bloggs", // "givenName": "Joe", // "id": "kp_1234...", // "picture": "https://example.com/image.png", // } ``` ### `refreshToken` ```typescript refreshToken = async ({ domain, clientId, refreshType = RefreshType.refreshToken, onRefresh, }: { domain: string; clientId: string; refreshType?: RefreshType; onRefresh?: (data: RefreshTokenResult) => void; }): Promise<RefreshTokenResult> ``` Example usage: ```javascript const refreshToken = await refreshToken({ domain: "https://mybusiness.kinde.com", clientId: "client_id" }); // { // accessToken: "eyJhbGciOiJSUzI1N...", // idToken: "eyJhbGciOiJSUzI1N...", // refreshToken: "E5hxe-AOSTcFjri3YV...", // success: true, // } ``` ### **Caching Issues** Sometimes there will be issues related to caching when you develop React Native. There are some recommendations for cleaning the cache: 1. Remove `node_modules`, `yarn.lock` or `package-lock.json`. 2. Clean cache: `yarn cache clean` or `npm cache clean --force`. 3. Make sure you have changed values in `.env` file. 4. Trying to install packages again: `yarn install` or `npm install`. 5. Run Metro Bundler: `yarn start --reset-cache` or `npm start --reset-cache`. Assume your StarterKit path is `<StarterKit_PATH>`. **Clean cache for Android** 1. Run this: ```shell cd <StarterKit_PATH>/android ./gradlew clean ``` **Clean cache for iOS** 1. Run this: ```shell cd <StarterKit_PATH>/ios rm -rf Pods && rm Podfile.lock ``` 2. Clean build folders on **Xcode**. If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - Flutter SDK

> Complete guide for Flutter SDK including authentication setup, Android/iOS configuration, PKCE flow, and mobile app integration for Flutter 3.10+ applications.

flutter sdk, dart, mobile authentication, android setup, ios setup, pkce flow, custom schemes
developer-tools, sdks, flutter, native

The Kinde’s Flutter SDK allows developers to integrate Kinde Authentication into their Flutter projects. Integrate [Kinde](https://kinde.com/) authentication with your Flutter app. When you configure, register, log in, and log out, the authentication state is securely stored across app restarts. ## Register with Kinde If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. yourapp.kinde.com. ## Before you install This SDK is suitable for: - Flutter 3.10.0 or later. - Dart 3.0.6 or later. ## Install SDK KindeSDK is available through [pub.dev](https://pub.dev/packages/kinde_flutter_sdk). To install it, simply add the following line to your pubspec.yaml: ```dart kinde_flutter_sdk: <latest-version> ``` ## Integrate with your app The `kinde_flutter_sdk` package is intended to work with Flutter Projects. Within the main function, ensure WidgetsFlutterBinding is initialized. `KindeFlutterSDK.initializeSDK()` must be called before using the SDK. If you’re using an .env file, provide the .env filename inside the load function. See below: ```dart import 'package:flutter/material.dart'; import 'package:flutter_dotenv/flutter_dotenv.dart'; import 'package:kinde_flutter_sdk/kinde_flutter_sdk.dart'; WidgetsFlutterBinding.ensureInitialized(); await dotenv.load(fileName: ".env"); await KindeFlutterSDK.initializeSDK( authDomain: dotenv.env[KINDE_AUTH_DOMAIN]!, authClientId: dotenv.env[KINDE_AUTH_CLIENT_ID]!, loginRedirectUri: dotenv.env[KINDE_LOGIN_REDIRECT_URI]!, logoutRedirectUri: dotenv.env[KINDE_LOGOUT_REDIRECT_URI]!, audience: dotenv.env[KINDE_AUDIENCE], //optional scopes: ["email","profile","offline","openid"] // optional ); ``` **Note:** To setup the .env file in your flutter package, check the [**flutter_dotenv**](https://pub.dev/packages/flutter_dotenv) package. ### **Environment variables:** Put these variables in your `.env` file. You can find these variables on your **Settings > Applications > [Your app] > View details** page. - KINDE_AUTH_DOMAIN - your Kinde domain - KINDE_CLIENT_ID - your Kinde client ID - KINDE_LOGIN_REDIRECT_URI - your callback url to redirect to after authentication. Make sure this URL is under your **Allowed callback URLs**. - KINDE_LOGOUT_REDIRECT_URI - where you want users to be redirected to after logging out. Make sure this URL is under your **Allowed logout redirect URLs**. - KINDE_AUDIENCE (optional)- the intended recipient of an access token. To fetch this value, go to **Settings > Applications > [Your app] > APIs** Below is an example of a `.env` file ```bash KINDE_AUTH_DOMAIN=https://<your_kinde_subdomain>.kinde.com KINDE_AUTH_CLIENT_ID=<your_kinde_client_id> KINDE_LOGIN_REDIRECT_URI=<your_custom_scheme>://kinde_callback KINDE_LOGOUT_REDIRECT_URI=<your_custom_scheme>://kinde_logoutcallback KINDE_AUDIENCE=<your_kinde_audience> ``` **Example:** ```bash KINDE_AUTH_DOMAIN=https://myapp.kinde.com KINDE_AUTH_CLIENT_ID=clientid KINDE_LOGIN_REDIRECT_URI=myapp://kinde_callback KINDE_LOGOUT_REDIRECT_URI=myapp://kinde_logoutcallback KINDE_AUDIENCE=myapp.kinde.com/api ``` **Note:** Be sure to add the .env file in your .gitignore file. See the GitHub link [here](https://github.com/github/gitignore/blob/main/Dart.gitignore). ## Configure your app **Android Setup** Go to the `build.gradle` file in the **Android > App** folder for your Android app. Specify the custom scheme similar to the following, but replace `<your_custom_scheme>` with your own value. ```groovy android { ... defaultConfig { ... manifestPlaceholders += [ 'appAuthRedirectScheme': '<your_custom_scheme>' ] } } ``` **iOS Setup** Go to the `Info.plist` located at **ios > Runner** for your iOS/macOS app. Specify the custom scheme similar to the following but replace `<your_custom_scheme>` with your own value. ```xml <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleTypeRole</key> <string>Editor</string> <key>CFBundleURLSchemes</key> <array> <string><your_custom_scheme>://</string> </array> </dict> </array> ``` **Note:** `<your_custom_scheme>` has been defined previously as [`myapp`](http://com.kinde.app/) You can define your own custom scheme to correspond to the app name. ## Set callback URLs For your app to work with Kinde, you need to set callback and logout redirect URLs. Replace the values you see in `<code brackets>` with your own values. 1. In Kinde, go to **Settings > Applications.** 2. Select **View details** on your app. 3. Scroll down to the **Callback URLs** section. 4. Add in the callback URLs for your app, which might look something like this: - Allowed callback URLs: `<your_custom_scheme>://kinde_callback` - Allowed logout redirect URLs: `<your_custom_scheme>://kinde_logoutcallback` ```dart loginRedirectUri: myapp://kinde_callback, logoutRedirectUri: myapp://kinde_logoutcallback, ``` 5. Select **Save**. **Tip**: Make sure there are no hidden spaces in URLs and remove the ‘/’ backslash at the end. **Note:** For more details, please visit the link [Set callback and redirect URLs](/get-started/connect/callback-urls/). ## Environments If you would like to use different Environments as part of your development process, you will need to [add them within your Kinde business](/build/environments/environments/) first. You will also need to add the Environment subdomain to the code block above. ## Sign in and **sign up** Kinde supports an easy to implement login / register flow. Use the functions examples below to redirect your users to Kinde, where they authenticate before being redirected back to your app. ### Kinde Client Make sure you’ve already defined **KindeFlutterSDK.instance** variable. ```dart final sdk = KindeFlutterSDK.instance; ``` ### R**edirect after authentication** The Kinde client provides methods for a simple login / register flow which authenticates the user and redirects them back to the app. ```dart ... final String token = await sdk.login(context: context); // or sdk.login(type: AuthFlowType.pkce, context: context) for apply pkce flow ... await sdk.register(context: context); // or sdk.register(type: AuthFlowType.pkce, context: context) for apply pkce flow ... ``` **Note:** Kinde supports the PKCE extension, in which the `code_challenge` and `code_challenge_method` parameters are also required. For More information, visit [Using OAuth Scopes.](/build/tokens/oath-scopes/#authorization-code-flow-with-proof-key-for-code-exchange-pkce) ### Signing out This is implemented in much the same way as logging in or registering. The Kinde SDK client comes with a logout method. ```dart .... await sdk.logout() .... ``` ### Test sign up Register your first user by signing up yourself. You’ll see your newly registered user on the **Users** page in Kinde. ## Get user information To access the user information, call one of the `getUser` or `getUserProfileV2` methods. ```dart sdk.getUser().then((value) { print('User: ${value?.firstName ?? ' '} ${value?.lastName ?? ' '}'); }); ``` ### User profile ```dart final userProfile = await sdk.getUserProfileV2(); print(userProfile); // returns UserProfile { id=kp_12345678910, preferredEmail=dave@smith.com, lastName=smith, firstName=dave, } ``` Both method returns the sub(unique id of user In Kinde Console), `id`, `firstName`, `lastName`, `picture`, and `preferredEmail`, etc. ### Check if user is authenticated We’ve provided a helper to get a boolean value to check if a user is signed in by verifying that the access token is still valid. ```dart final isAuthenticated = await sdk.isAuthenticate(); if (isAuthenticated) { // Need to implement, e.g: call an api, etc... } else { // Need to implement, e.g: redirect user to sign in, etc.. } ``` ### User permissions Once the user has logged in, the JWT token is returned which contains an array of permissions of that user. Read the permissions and implement the functionality in your application accordingly. [Set permissions](/manage-users/roles-and-permissions/user-permissions/) in your Kinde account. Here’s an example set of permissions. ```dart List<String> permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ]; ``` We provide helper functions to more easily access the permissions claim: ```dart final ClaimPermissions sdkPermissions = sdk.getPermissions(); //to fetch list of permissions final ClaimPermission sdkPermission = sdk.getPermission('permissionName'); //to fetch a single permission ``` ### Examples To fetch a list of permissions, we use the following permission function: ```dart Future<void> getPermissions() async { final ClaimPermissions sdkPermissions = sdk.getPermissions(); print(sdkPermissions.permissions); //list of claim permissions granted to user } ``` To fetch a single permission, we use the following permission function: ```dart Future<void> getPermission() async { final ClaimPermission sdkPermission = sdk.getPermission('permissionName'); print(sdkPermission.isGranted); //Check if permission is granted. print(sdkPermission.orgCode); //orgCode for specific organization. } ``` ## Call Your API (Token storage) After the user has successfully logged in, you will have a JSON Web Token (JWT) and a refresh token securely stored. You can retrieve an access token by utilizing the `getToken` method. ```dart final access_token = await sdk.getToken(); ``` If the `accessToken` has expired, but the `refreshToken` is valid, the `getToken` method will automatically fetch the `newToken` using the built in `refreshToken` interceptor. To implement the methods in your front-end application with encrypted storage using flutter_secure_storage and hive, use the following code: ```dart import 'package:flutter/material.dart'; import 'package:flutter_dotenv/flutter_dotenv.dart'; import 'package:kinde_flutter_sdk/kinde_flutter_sdk.dart'; import 'package:flutter_secure_storage/flutter_secure_storage.dart'; import 'package:hive/hive.dart'; Future<void> initEncryptedHive() async { const FlutterSecureStorage secureStorage = FlutterSecureStorage(); var containsEncryptionKey = await secureStorage.containsKey(key: 'encryptionKey'); if (!containsEncryptionKey) { var key = Hive.generateSecureKey(); await secureStorage.write(key: 'encryptionKey', value: base64UrlEncode(key)); } } void main(){ WidgetsFlutterBinding.ensureInitialized(); await initEncryptedHive(); await dotenv.load(fileName: ".env"); await KindeFlutterSDK.initializeSDK( authDomain: dotenv.env[KINDE_AUTH_DOMAIN]!, authClientId: dotenv.env[KINDE_AUTH_CLIENT_ID]!, loginRedirectUri: dotenv.env[KINDE_LOGIN_REDIRECT_URI]!, logoutRedirectUri: dotenv.env[KINDE_LOGOUT_REDIRECT_URI]!, audience: dotenv.env[KINDE_AUDIENCE], ); } ``` ```dart Future < Box > hiveEncryptedBox() async { // Hive Encrypted Box Added const FlutterSecureStorage secureStorage = FlutterSecureStorage(); String ? key = await secureStorage.read(key: 'encryptionKey'); var encryptionKey = base64Url.decode(key!); var box = await Hive.openBox('myBox', encryptionCipher: HiveAesCipher(encryptionKey)); return box; } Future < String > returnAccessToken() async { final box = await hiveEncryptedBox(); var token = box.get('token', defaultValue: ''); if (token == '') { return await getNewToken(); } else if (token != null) { bool hasExpired = JwtDecoder.isExpired(token); if (hasExpired) { return await getNewToken(); } return token; } else { return getNewToken(); } } Future < String > getNewToken() async { String ? token = await sdk.getToken(); if (token == null) return 'Refresh Token Expired'; // Redirect user to the login page var box = await hiveEncryptedBox(); await box.put('token', token); return token; } ``` **Note:** To setup [hive](https://pub.dev/packages/hive) and [flutter_secure_storage](https://pub.dev/packages/flutter_secure_storage), visit the [pub.dev](http://pub.dev/) . You may also use Android KeyStore or iOS Realm to store tokens. ## **Audience** An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```dart await KindeFlutterSDK.initializeSDK( ... audience: 'myapp.kinde.com/api', ... ); ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## Organizations ### Create an organization To have a new organization created within your application, you will need to set up the following function: ```dart Future<void> createOrg() async { await sdk.createOrg(orgName: string); } ``` ### **Optional type parameter** ```dart Future<void> createOrg() async { await sdk.createOrg(orgName: string,type: AuthFlowType.pkce); } ``` ### Sign up and sign in to organizations The Kinde client provides methods for you easily sign up and sign in users into organizations. ```dart Future < void > loginUser() async { final token = await sdk.login(orgCode: 'orgCode'); // or sdk.login(orgCode:'orgCode', type: AuthFlowType.pkce) for apply pkce flow print(token); } Future < void > registerUser() async { await sdk.register(orgCode: 'orgCode'); // or sdk.register(orgCode:'orgCode', type: AuthFlowType.pkce) for apply pkce flow } ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```json { "aud": [], //audience "exp": 1658475930, //token expiry "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", //organization codes "permissions": ["read:todos", "create:todos"], //list of permissions "scp": ["openid", "profile", "email", "offline"], //scopes "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```json [ ... "org_codes": ["org_1234", "org_4567"] ... ]; ``` You can also fetch the org_code by: 1. Sign into [kinde.com](https://kinde.com/). 2. In Kinde, go to **Organizations** and fetch the org_code for which you want to register user’s. ### Fetch organizations ```dart sdk.getOrganization(); // ClaimOrganization(code: "org_1234") sdk.getUserOrganizations(); // ClaimOrganizations(orgCodes: [Organization(code: "org_1234"), Organization(code: "org_abcd")]) ``` To shift users between organizations visit [user-management.](/manage-users/about/) ## Scopes ### Default **scopes** By default the KindeSDK requests the following scopes: - **openid:** Perform an OpenID connect sign-in. - **profile:** Retrieve the user’s profile. - **offline:** Retrieve a Refresh Token for offline access from the application. - **email:** Retrieve the user’s email. ### Overriding scopes You can override this by passing scope into the initializeSDK() function ```dart await KindeFlutterSDK.initializeSDK( ... scopes = ["email", "profile"], ... ); ``` ### Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```typescript sdk.getClaim(claim:'aud'); // { name: "aud", value: ["local-testing@kinde.com"] } sdk.getClaim(claim:'email',tokenType: TokenType.idToken); // { name: "email", value: "first.last@test.com" } sdk.getClaim(claim:'email',tokenType: TokenType.accessToken); ``` ## Feature Flags We have provided a helper to grab any feature flags from the `access_token`: When a user signs in, the access token your product/application receives contains a custom claim called `feature_flags`, which is an object detailing the feature flags for that user. Here’s an example of how to fetch feature_flags directly from the jwt token. ```dart void getFeatureFlags() async { String ? token = await sdk.getToken(); if (token != null) { Map < String, dynamic > decoded = JwtDecoder.decode(token); print(decoded['feature_flags']); } } ``` Decoding the token using the [jwt.io](http://jwt.io/) website also references the following object that is contained within the token: ```json feature_flags: { theme: { "t": "s", "v": "pink" }, is_dark_mode: { "t": "b", "v": true }, competitions_limit: { "t": "i", "v": 5 } } ``` **Note: Setup** [**JwtDecoder**](https://pub.dev/packages/jwt_decoder) **using this link.** In order to minimize the payload in the token we have used single letter keys / values where possible. The single letters represent the following: `t` = type, `v` = value, `s` = String, `b` = Boolean, `i` = Integer, You can set feature flags in your Kinde account by visiting: [Add Feature Flags](/releases/feature-flags/add-feature-flag/) We also provide helper functions to more easily access feature flags: ```dart sdk.getFlag(code: "featureFlagCode",defaultValue: 'defaultValue',type: FlagType) ``` To fetch `featureFlagCode`, In Kinde, navigate to **Releases** **> Feature Flags.** A practical example in code would look something like: ```dart void getFlagInfo() { final Flag ? info = sdk.getFlag(code: 'featureFlagCode', defaultValue: '', type: FlagType.string); print(info?.code); } ``` ## Wrapper functions We also require wrapper functions by type which should leverage `getFlag` above. Boolean wrapper ```dart /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {String} code - The name of the flag. * @param {Boolean} [defaultValue] - A fallback value if the flag isn't found. * @return {Boolean} */ sdk.getBooleanFlag(code, defaultValue); sdk.getBooleanFlag("is_dark_mode"); // true sdk.getBooleanFlag("is_dark_mode", false); // true sdk.getBooleanFlag("new_feature"); // Error - flag does not exist and no default provided sdk.getBooleanFlag("new_feature", false); // false (flag does not exist so falls back to default) sdk.getBooleanFlag("theme", "blue"); // Error - Flag "theme" is of type string not boolean ``` String wrapper ```dart /** * Get a string flag from the feature_flags claim of the access_token. * @param {String} code - The name of the flag. * @param {String} [defaultValue] - A fallback value if the flag isn't found. * @return {String} */ sdk.getStringFlag(code, defaultValue); /* Example usage */ sdk.getStringFlag("theme"); // pink sdk.getStringFlag("theme", "black"); // true sdk.getStringFlag("cta_color"); // Error - flag does not exist and no default provided sdk.getStringFlag("cta_color", "blue"); // blue (flag does not exist so falls back to default) sdk.getStringFlag("is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not string ``` Integer wrapper ```dart /** * Get an integer flag from the feature_flags claim of the access_token. * @param {String} code - The name of the flag. * @param {Integer} [defaultValue] - A fallback value if the flag isn't found. * @return {Integer} */ sdk.getIntegerFlag(code, defaultValue); sdk.getIntegerFlag("competitions_limit"); // 5 sdk.getIntegerFlag("competitions_limit", 3); // 5 sdk.getIntegerFlag("team_count"); // Error - flag does not exist and no default provided sdk.getIntegerFlag("team_count", 2); // false (flag does not exist so falls back to default) sdk.getIntegerFlag("is_dark_mode", false); // Error - Flag "is_dark_mode" is of type boolean not integer ``` Example of wrapper function: ```dart void getTheme() { final theme = sdk.getStringFlag("theme", "black"); if (theme == "black") { //code to execute when theme is black. } else if (theme == "blue") { //code to execute when theme is blue. } } void isDarkMode() { final isDarkMode = sdk.getBooleanFlag("is_dark_mode", false); if (isDarkMode) { //code to execute in dark mode. } else { // code to execute in light mode. } } int getTeamCount() { final teamCount = sdk.getIntegerFlag("team_count", 2); print(teamCount); return teamCount; } ``` ## SDK API Reference ### `authDomain` Either your Kinde instance url or your custom domain. e.g. `https://yourapp.kinde.com/` Type: `string` Required: Yes --- ### `clientId` The id of your application - get this from the Kinde admin area. Type: `string` Required: Yes --- ### `loginRedirectUri` The url that the user will be returned to after authentication. Type: `string` Required: Yes --- ### `logoutRedirectUri` Where your user will be redirected upon logout. Type: `string` Required: Yes --- ### `audience` The audience claim for the JWT. Type: `string` Required: No --- ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No Default: `openid` `profile` `email` `offline` --- ## **KindeSDK Methods** ### `login` Constructs redirect url and sends user to Kinde to sign in. **Usage:** ```dart sdk.login(); ``` ### `register` Constructs redirect url and sends user to Kinde to sign up. **Usage:** ```dart sdk.register(); ``` ### `logout` Logs the user out of Kinde. **Usage:** ```dart sdk.logout(); ``` ### `isAuthenticated` Check if the user is authenticated. **Usage:** ```dart sdk.isAuthenticated(); ``` **Sample output:** ```dart true or false ``` ### `createOrg` Constructs redirect url and sends user to Kinde to sign up and create a new org for your business. **Arguments:** ```dart options?: CreateOrgURLOptions { org_name?: "string"; org_code?: "string"; state?: "string"; } ``` **Usage:** ```dart sdk.createOrg( org_name: "org_1234" ); ``` ### `getClaim` Extract the provided claim from the provided token type in the current session, the returned object includes the provided claim. **Arguments:** ```dart claim: "string", tokenKey?: TokenType "access_token" | "id_token ``` **Usage:** ```dart sdk.getClaim(claim:"given_name", tokenType: TokenType); ``` ### `getPermission` Returns the state of a given permission. **Arguments:** ```dart key: "string ``` **Usage:** ```dart sdk.getPermission("permission"); ``` **Sample output:** ```dart { orgCode : 'org_1234', isGranted : true} ``` ### `getPermissions` Returns all permissions for the current user for the organization they are logged into. **Usage:** ```dart sdk.getPermissions(); ``` **Sample output:** ```dart { orgCode : 'org_1234', permissions : ['create:todos', 'update:todos', 'read:todos'] } ``` ### `getOrganization` Get details for the organization your user is logged into. **Usage:** ```dart sdk.getOrganization(); ``` **Sample output:** ```dart { orgCode : 'org_1234' } ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. **Usage:** ```dart sdk.getUserOrganizations(); ``` **Sample output:** ```dart { orgCodes: ['org_7052552de68', 'org_5a5c29381327'] } ``` ### `getUser` Extracts the user details from the Id token obtained post authentication. **Usage:** ```dart sdk.getUser(); ``` **Sample output:** ```dart { "id":"kp_12345678910", "preferredEmail":"dave@smith.com", "lastName":"smith", "firstName":"dave", } ``` ### `getToken` Returns the access token obtained post authentication. **Usage:** ```dart sdk.getToken(); ``` **Sample output:** ```dart eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ .SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c; ``` --- ### `getUserProfile` Extracts makes use of the `getToken` method above to fetch user details **Usage:** ```dart sdk.getUserProfile(); ``` **Sample output:** ```dart { given_name: 'Dave', id: 'abcdef', family_name : 'Smith', email : 'mailto:dave@smith.com' } ``` ### `getFlag` Get a flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : FlagType[keyof FlagType] flagType? : [key of FlagType] interface FlagType { s: string; b: boolean; i: number; } interface GetFlagType { type?: 'string' | 'boolean' | 'number'; value: FlagType[keyof FlagType]; is_default: boolean; code: "string"; } ``` **Usage:** ```dart sdk.getFlag(code:"theme"); ``` **Sample output:** ```dart { "code": "theme", "type": "string", "value": "pink", "is_default": false } ``` ### `getBooleanFlag` Get a boolean flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : boolean ``` **Usage:** ```dart sdk.getBooleanFlag(code:"is_dark_mode"); ``` **Sample output:** ```dart true or false ``` ### `getStringFlag` Get a string flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : "string ``` **Usage:** ```dart sdk.getStringFlag(code:"theme"); ``` **Sample output:** ```dart pink ``` ### `getIntegerFlag` Get an integer flag from the feature_flags claim of the `access_token` **Arguments:** ```dart code : "string" defaultValue? : number ``` **Usage:** ```dart sdk.getIntegerFlag(code:"team_count"); ``` **Sample output:** ```dart 2 ``` If you need help connecting to Kinde, contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - iOS SDK

> Complete guide for iOS SDK including CocoaPods installation, multiple environment configuration, custom logging, and native iOS authentication integration.

ios sdk, swift, objective-c, cocoapods, appauth, multiple environments, custom logger, url schemes
developer-tools, sdks, ios, native

The Kinde iOS SDK allows developers to quickly and securely integrate a new or existing application into the Kinde platform. You can view the [Kinde iOS SDK](https://github.com/kinde-oss/kinde-sdk-ios) and [iOS starter kit](https://github.com/kinde-starter-kits/ios-starter-kit) in GitHub. ## Before you begin If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. ## **Installation** KindeSDK is available through [CocoaPods](https://cocoapods.org/). To install it, add the following line to your Podfile: ```ruby pod 'KindeSDK' ``` Please note that `KindeSDK` is typically used with CocoaPods dynamic linking (`use_frameworks!`), as it takes a dependency on `AppAuth`. If integrating with other pods that require static linking, follow the instructions provided by CocoaPods. ## **Kinde configuration** ### Callback URLs Here you want to put in the callback URLs for your iOS app: 1. In Kinde, go to **Settings > Applications > [your app] > View details**. 2. Add your callback URLs in the relevant fields. For example: - Allowed callback URLs (also known as redirect URIs): `<your_url_scheme>://kinde_callback` - Allowed logout redirect URLs: `<your_url_scheme>://kinde_logoutcallback` 3. Select **Save**. Note: `your_url_scheme` can be any valid custom URL scheme, such as your app's bundle ID or an abbreviation. It must match the scheme component of the **Allowed callback URLs** (redirect URIs) and **Allowed logout redirect URLs** you configured in the [Application details](/get-started/connect/getting-app-keys/) page for your Kinde application. ### **Environments** If you would like to use our Environments feature as part of your development process. You will need to create them first within your Kinde account. In this case you would use the Environment subdomain in the code block above. ## Configuring your app ### **Environment variables** The Kinde `Auth` service is configured with an instance of the `Config` class. The example uses the bundled `kinde-auth.json` for configuration. To get the details, go to **Settings > Applications > [your app] > View details**. Then scroll to the **App keys** section. - `issuer`: your Kinde domain - `clientId` - you can find this on the **Application details** page - `redirectUri` (**Allowed callback URL**): After the user authenticates we will callback to this address. Make sure this URL is under your allowed callback URLs. - `postLogoutRedirectUri` (**Allowed logout redirect URL**): where you want users to be redirected to after logging out. Make sure this URL is under your allowed logout redirect URLs. ```swift { "issuer": "https://<your-business>.kinde.com", "clientId": "<your-client-id>", "redirectUri": "<your-url-scheme>://kinde_callback", "postLogoutRedirectUri": "<your-url-scheme>://kinde_logoutcallback", "scope": "offline openid email profile" } ``` Replace the values in \<angle brackets> with your own values. For example: ```swift { "issuer": "https://app.kinde.com", "clientId": "abc@live", "redirectUri": "com.example.App://kinde_callback", "postLogoutRedirectUri": "com.example.App://kinde_logoutcallback", "scope": "offline openid email profile" } ``` ## Integrate with your app Before `KindeSDKAPI.auth` can be used, a call to `KindeSDKAPI.configure()` must be made, typically in `AppDelegate` as part of `application(launchOptions)` for a UIKit app, or the `@main` initialization logic for a SwiftUI app. `AppDelegate.swift` ```swift ... import KindeSDK ... class AppDelegate: UIResponder, UIApplicationDelegate { ... func application(...) { ... // The Kinde authentication service must be configured before use KindeSDKAPI.configure(Logger()) ... } ... } ``` ## Multiple environments You may need to test or deploy your app across different environments, such as development, staging, or production. The Kinde iOS SDK now supports configuration for multiple environments, allowing you to easily switch between them. Follow these steps to set up and configure environments in your Kinde account and integrate them into your iOS app. > **Note:** Unless you are on a Kinde Plus or Scale plan, you can only create one additional non-production environment. ### Setting up environments Before you can configure multiple environments in your iOS app, you must first create these environments in your Kinde dashboard. After setting up your environments, create an application under each environment. You will get different App Details (such as issuer, clientId, redirectUri, etc.) for each environment you create. These details will be used to configure your iOS app for the specific environment. - On the Kinde home page, click the **Environment** dropdown in the top-left corner and select **All environments**. - Click **Add environment** and follow the prompts to create each new non-production environment (**deployment, staging, etc**). - For each environment, create a new application under the respective environment. - After creating the app, you'll receive different **App Details** (such as `issuer`, `clientId`, `redirectUri`, etc.) for each environment. ### Configuring multiple environments Once the environments are set up in your Kinde dashboard, you can configure your iOS app to handle multiple environments by using a JSON file for each environment. Create a JSON file for each environment in your project. For example: - `kinde-auth-production.json` - `kinde-auth-development.json` - `kinde-auth-staging.json` (if applicable) Each file should contain the configuration details for that specific environment. Here's an example configuration: ```json { "issuer": "https://<your-business>.kinde.com", "clientId": "<your-client-id>", "redirectUri": "<your-url-scheme>://kinde_callback", "postLogoutRedirectUri": "<your-url-scheme>://kinde_logoutcallback", "scope": "offline openid email profile" } ``` To set up multiple environments in your iOS app, use the `KindeSDKAPI.configure()` method and pass the environment configuration file name. Here's how to do it: #### Example: switch to the production environment ```swift // Use the 'production' environment configuration KindeSDKAPI.configure(fileName: "kinde-auth-production") ``` #### Example: switch to the development environment ```swift // Switch to the 'development' environment KindeSDKAPI.configure(fileName: "kinde-auth-development") ``` To switch to a different environment, simply change the configuration file name in the `KindeSDKAPI.configure()` method. ## Custom Logger (Optional) You can use your own Custom Logger as well by extending `LoggerProtocol`. `CustomLogger.swift` ```swift ... import os.log import KindeSDK ... struct CustomLogger: LoggerProtocol { ..... ..... func log(_ message: String) { print("[INFO]: \(message)") } func log(error: Error) { print("[ERROR]: \(error.localizedDescription)") } } ``` ## Login and register The Kinde client provides methods for an easy to implement login / register flow. You can add buttons in your view as follows: (we’re using UIKit). ```swift ... import KindeSDK ... override func viewDidLoad() { ... view.addSubview(signInButton) view.addSubview(signUpButton) signInButton.addTarget(self, action: #selector(signIn), for: .primaryActionTriggered) signUpButton.addTarget(self, action: #selector(register), for: .primaryActionTriggered) ... } @objc private func signIn(_ target: UIButton) { KindeSDKAPI.auth.login { result in switch result { case let .failure(error): if !KindeSDKAPI.auth.isUserCancellationErrorCode(error) { self.alert("Login failed: \(error.localizedDescription)") } case .success: // Do something here } } } @objc private func register(_ target: UIButton) { KindeSDKAPI.auth.register { result in switch result { case let .failure(error): if !KindeSDKAPI.auth.isUserCancellationErrorCode(error) { self.alert("Registration failed: \(error.localizedDescription)") } case .success: // Do something here } } } ``` ## Handle redirect Once your user is redirected back to your site from Kinde (it means you’ve logged in successfully), use the `getToken` method from `KindeSDKAPI` class to get a user token from Kinde. Let's look at an example of successful login. ```swift KindeSDKAPI.auth.login { result in switch result { case let .failure(error): if !KindeSDKAPI.auth.isUserCancellationErrorCode(error) { self.alert("Login failed: \(error.localizedDescription)") } case .success: self.onLoggedIn() // Calling this function } } func onLoggedIn() { self.isAuthenticated = true self.getToken() } private func getToken() { Task { await asyncGetToken() } } private func asyncGetToken() async -> String { do { let token = try await KindeSDKAPI.auth.getToken() return token } catch { return " } } ``` ## Logout This is implemented in much the same way as logging in or registering. The Kinde SPA client comes with a logout method. ```swift @objc private func logout(_ target: UIButton) { KindeSDKAPI.auth.logout { result in if result { // Do something } } } ``` ## Get user information To access the user information, use the `getUserDetails` helper function: ```swift KindeSDKAPI.auth.getUserDetails() // User(id: 1233, email: "dave@smith.com", given_name: "Dave", family_name: "Smith") ``` ## View users in Kinde Navigate to the **Users** page within Kinde to see your newly registered user. ## User Permissions Once a user has been verified, your application will be returned the JWT token with an array of permissions for that user. You will need to configure your application to read permissions and unlock the respective functions. You set [Permissions](/manage-users/roles-and-permissions/user-permissions/) in your Kinde account, the below is an example set of permissions. ```swift let permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks", ]; ``` We provide helper functions to more easily access permissions: ```swift KindeSDKAPI.auth.getPermission(name: "create:todos"); // Permission(organization: Organization(code: "org_1234"), isGranted: true) KindeSDKAPI.auth.getPermissions(); // Permissions(organization: Organization(code: "org_1234"), permissions: ["create:todos", "update:todos", "read:todos"]) ``` A practical example in code might look something like: ```swift let isGranted = KindeSDKAPI.auth.getPermission(name: "create:todos")?.isGranted ?? false if isGranted { // show Create Todo button in UI } ``` ## Audience An `audience` is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the provided token. The audience of a token is the intended recipient of the token. ```swift { "issuer": "https://<your-business>.kinde.com", "clientId": "<your-client-id>", "redirectUri": "<your-url-scheme>://kinde_callback", "postLogoutRedirectUri": "<your-url-scheme>://kinde_logoutcallback", "scope": "offline openid email profile", "audience": "api.yourapp.com" } ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/) ## Overriding scope By default the `KindeSDK` requests the following scopes: - `profile` - `email` - `offline` - `openid` You can override this by passing scope into the KindeSDK ```swift { "issuer": "https://<your-business>.kinde.com", "clientId": "<your-client-id>", "redirectUri": "<your-url-scheme>://kinde_callback", "postLogoutRedirectUri": "<your-url-scheme>://kinde_logoutcallback", "scope": "offline openid email profile", "audience": "api.yourapp.com" } ``` ## Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```swift KindeSDKAPI.auth.getClaim(key: "aud"); // ["api.yourapp.com"] KindeSDKAPI.auth.getClaim(key: "given_name", token: .idToken); // "David ``` ## Organizations ### Create an organization To create a new organization in your application, you will need to run a similar function to below: ```swift @objc private func createOrg(_ target: UIButton) async { do { try await KindeSDKAPI.auth.createOrg(orgName: "Your Organization") } catch { ... } } ``` ### Sign in and sign up to organizations Kinde has a unique code for every organization. You’ll have to pass this code through when you register a new user. Example function below: ```swift KindeSDKAPI.auth.register(orgCode: "your_org_code"); ``` If you want a user to sign in into a particular organization, pass this code along with the sign in method. ```swift KindeSDKAPI.auth.login(orgCode: "your_org_code"); ``` Following authentication, Kinde provides a `json web token (jwt)` to your application. Along with the standard information we also include the org_code and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: ```json { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": ["openid", "profile", "email", "offline"], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```json { ... "org_codes": ["org_1234", "org_4567"] ... } ``` There are two helper functions you can use to extract information: ```swift KindeSDKAPI.auth.getOrganization(); // Organization(code: "org_1234") KindeSDKAPI.auth.getUserOrganizations(); // UserOrganizations(orgCodes: [Organization(code: "org_1234"), Organization(code: "org_abcd")]) ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## Feature flags We have provided a helper to return any features flag from the access token: ```swift KindeSDKAPI.auth.getFlag(code: "theme") // returns Flag(code: "theme", type: Optional(KindeSDK.Flag.ValueType.string), value: black, isDefault: false) KindeSDKAPI.auth.getFlag(code: "no-feature-flag") // returns notFound KindeSDKAPI.auth.getFlag(code: "no-feature-flag", defaultValue: "default-value") // returns Flag(code: "no-feature-flag", type: nil, value: "default-value", isDefault: true) KindeSDKAPI.auth.getFlag(code: "no-feature-flag", defaultValue: "default-value", flagType: Flag.ValueType.bool) // returns incorrectType("Flag \"theme\" is type string - requested type boolean") ``` We also require wrapper functions by type which should leverage `getFlag` above. ### **Get boolean flags** ```swift KindeSDKAPI.auth.getBooleanFlag(code: "is_dark_mode") // true KindeSDKAPI.auth.getBooleanFlag(code: "is_dark_mode", defaultValue: false) // true KindeSDKAPI.auth.getBooleanFlag(code: "new_feature") // notFound KindeSDKAPI.auth.getBooleanFlag(code: "new_feature", defaultValue: false) // false KindeSDKAPI.auth.getBooleanFlag(code: "theme") // incorrectType("Flag \"theme\" is type string - requested type boolean") ``` ### **Get string flags** ```swift KindeSDKAPI.auth.getStringFlag(code: "theme") // pink KindeSDKAPI.auth.getStringFlag(code: "theme", defaultValue: "black") // pink KindeSDKAPI.auth.getStringFlag(code: "cta_color") // notFound KindeSDKAPI.auth.getStringFlag(code: "cta_color", defaultValue: "blue") // blue KindeSDKAPI.auth.getStringFlag(code: "is_dark_mode") // incorrectType("Flag \"is_dark_mode\" is type boolean - requested type string") ``` ### **Get integer flags** ```swift KindeSDKAPI.auth.getIntegerFlag(code: "user_limit") // 5 KindeSDKAPI.auth.getIntegerFlag(code: "user_limit", defaultValue: 3) // 5 KindeSDKAPI.auth.getIntegerFlag(code: "team_count") // notFound KindeSDKAPI.auth.getIntegerFlag(code: "team_count", defaultValue: 4) // 4 KindeSDKAPI.auth.getIntegerFlag(code: "is_dark_mode") // incorrectType("Flag \"is_dark_mode\" is type boolean - requested type interger") ``` ### Token Storage Once the user has successfully authenticated, you'll have a JWT and a refresh token and that has been stored securely. ## SDK API Reference ### `issuer` Either your Kinde URL or your custom domain. e.g `https://yourapp.kinde.com`. Type: `string` Required: Yes ### `redirectUri` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `clientId` The unique ID of your application in Kinde. Type: `string` Required: Yes ### `postLogoutRedirectUri` Where your user will be redirected when they sign out. Type: `string` Required: No ### `scope` The scopes to be requested from Kinde. Type: `string` Required: No Default: `openid profile email offline` ### `audience` The audience claim for the JWT. Type: `string` Required: No ## **KindeSDK** methods ### `login` Constructs redirect url and sends user to Kinde to sign in. Arguments: ```swift orgCode?: String ``` Usage: ```swift KindeSDKAPI.auth.login(); or KindeSDKAPI.auth.login(orgCode: “your organization code”) // ``` Allow `orgCode` to be provided if a specific org is signed in to. ### `register` Constructs redirect url and sends user to Kinde to sign up. Arguments: ```swift orgCode?: String ``` Usage: ```swift KindeSDKAPI.auth.register(); or KindeSDKAPI.auth.register(orgCode: “your organization code”) // ``` Allow `orgCode` to be provided if a specific org is registered to. ### `enablePrivateAuthSession` Call this method before login/register process to enable or disable message prompt. Usage: ```jsx KindeSDKAPI.auth.enablePrivateAuthSession(true); ``` ### `logout` Logs the user out of Kinde. Usage: ```swift KindeSDKAPI.auth.logout(); ``` ### `getToken` Returns the raw token from URL after logged from Kinde. Usage: ```swift KindeSDKAPI.auth.getToken() ``` Sample output: ```swift eyJhbGciOiJSUzI... ``` ### `createOrg` Constructs a redirect URL and sends the user to Kinde to sign up and create a new organization in your business. Arguments: ```swift orgName: String ``` Usage: ```swift KindeSDKAPI.auth.createOrg(orgName: "Your Organization"); ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```swift key: String, token: TokenType = .accessToken ``` Usage: ```swift KindeSDKAPI.auth.getClaim(key: ”given_name”, token: .idToken); ``` Sample output: `"David"` ### `getPermission` Returns the state of a given permission. Arguments: ```swift name: String ``` Usage: ```swift KindeSDKAPI.auth.getPermission(name: ”read:todos”); ``` Sample output: ```swift Permissions (organization: Organization(code: "org_1234"), isGranted: true) ``` ### `getPermissions` Returns all permissions for the current user for the organization they are signed into. Usage: ```swift KindeSDKAPI.auth.getPermissions(); ``` Sample output: ```swift Permissions (organization: Organization(code: "org_1234"), permissions: ["create:todos", "update:todos", "read:todos"]) ``` ### `getOrganization` Get details for the organization your user is signed into. Usage: ```swift KindeSDKAPI.auth.getOrganization(); ``` Sample output: ```swift Organization(code: "org_1234") ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Usage: ```swift KindeSDKAPI.auth.getUserOrganizations(); ``` Sample output: ```swift UserOrganizations (orgCodes: [Organization(code: "org_1234"), Organization(code: "org_abcd")]) ``` ### `getUserDetails` Get details for the organization your user is signed into. Usage: ```swift KindeSDKAPI.auth.getOrganization(); ``` Sample output: ```swift User (id: 1233, email: "dave@smith.com", given_name: "Dave", family_name: "Smith") ``` ### `isAuthenticated` Return the boolean to demonstrate whether the user is authenticated or not. Usage: ```swift KindeSDKAPI.auth.isAuthenticated() ``` Sample output: `true` or `false` ### `getFlag` Get a flag from the feature_flags claim of the `access_token` Arguments: ```swift code: String defaultValue?: Any flagType?: Flag.ValueType ``` Usage: ```swift KindeSDKAPI.auth.getFlag(code: "theme") ``` Sample output: ```swift Flag(code: "theme", type: Optional(KindeSDK.Flag.ValueType.string), value: black, isDefault: false) ``` ### **`getBooleanFlag`** Get a boolean flag from the `feature_flags` claim of the access token Arguments: ```swift code: String defaultValue?: String ``` Usage: ```swift KindeSDKAPI.auth.getBooleanFlag(code: "is_dark_mode") ``` Sample output: `true` ### **`getStringFlag`** Get a string flag from the `feature_flags` claim of the access token Arguments: ```swift code: String defaultValue?: String ``` Usage: ```swift KindeSDKAPI.auth.getStringFlag(code: "theme") ``` Sample output: `pink` ### **`getIntegerFlag`** Get a integer flag from the `feature_flags` claim of the access token Arguments: ```swift code: String defaultValue?: String ``` Usage: ```swift KindeSDKAPI.auth.getIntegerFlag(code: "user_limit") ``` Sample output: `5` If you need help connecting to Kinde, contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Sdks - React Native SDK

> Comprehensive guide for React Native SDK including Android/iOS setup, native linking, Expo compatibility, and mobile authentication integration.

react native sdk, mobile authentication, android setup, ios setup, expo compatibility, native linking, cocoapods
developer-tools, sdks, react-native, native

The Kinde React Native SDK allows developers to quickly and securely integrate a new or an existing React Native application into the Kinde platform. ## Supported versions ### React Native SDK 0.6x **`Kinde React Native SDK 0.6x`** is compatible with React Native versions 0.60 to 0.69. - GitHub: [kinde-react-native-sdk-0-6x](https://github.com/kinde-oss/kinde-react-native-sdk-0-6x) - NPM: [@kinde-oss/react-native-sdk-0-6x](https://www.npmjs.com/package/@kinde-oss/react-native-sdk-0-6x) ### React Native SDK 0.7x **`Kinde React Native SDK 0.7x`** is compatible with React Native versions 0.70 or higher. - GitHub: [kinde-react-native-sdk-0-7x](https://github.com/kinde-oss/kinde-react-native-sdk-0-7x) - NPM: [@kinde-oss/react-native-sdk-0-7x](https://www.npmjs.com/package/@kinde-oss/react-native-sdk-0-7x) ### Expo **`Kinde React Native SDK 0.6x`** and **`Kinde React Native SDK 0.7x`** are designed to work well with Expo. You can easily incorporate them into your Expo projects by following the instructions provided in the [Expo and React Native SDK documentation](/developer-tools/sdks/native/expo/). Compatible versions: - Expo SDK version 46.0.0: Use [Kinde React Native SDK 0.6x](https://www.npmjs.com/package/@kinde-oss/react-native-sdk-0-6x) - Expo SDK version 47.0.0 or higher: Use [Kinde React Native SDK 0.7x](https://www.npmjs.com/package/@kinde-oss/react-native-sdk-0-7x) You can also check out our starter kits on GitHub: - [Starter kit for Kinde React Native SDK 0.6x](https://github.com/kinde-starter-kits/kinde-react-native-starter-kit-0-6x) - [Starter kit for Kinde React Native SDK 0.7x](https://github.com/kinde-starter-kits/kinde-react-native-starter-kit-0-7x) ## Before you begin - If you haven’t already got a Kinde account, [register for free here](https://app.kinde.com/register) (no credit card required). Registering gives you a Kinde domain, which you need to get started, e.g. `yourapp.kinde.com`. - You will also need Node, the React Native command line interface, a JDK, Android Studio (for Android) and Xcode (for iOS). - Follow [the installation instructions for your chosen OS](https://reactnative.dev/docs/environment-setup) to install dependencies. <Aside type="warning" title="Important"> Fundamentally, both SDK versions have equivalent functionality, so there should be no issue integrating either of them. In this guide, we use examples from version 0.7x. But version 0.6x is identical in terms of integration and application. </Aside> ## **Installation** <PackageManagers pkg="@kinde-oss/react-native-sdk-0-7x" /> ### **Android** The SDK requires the `react-native-keychain` and `react-native-inappbrowser-reborn` packages. Sometimes, they may not be automatically linked correctly, resulting in errors when running your app, such as `"Cannot read properties of undefined (reading 'isAvailable')"`. In such cases, you will need to manually link them: 1. Edit `android/settings.gradle` ```java include ':react-native-keychain' project(':react-native-keychain').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-keychain/android') include ':react-native-inappbrowser-reborn' project(':react-native-inappbrowser-reborn').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-inappbrowser-reborn/android') ``` 2. Edit `android/app/build.gradle` ```java apply plugin: 'com.android.application' android { ... } dependencies { ... implementation project(':react-native-keychain') implementation project(':react-native-inappbrowser-reborn') ... } ``` 3. Edit `MainApplication.java` ```java import com.oblador.keychain.KeychainPackage; import com.proyecto26.inappbrowser.RNInAppBrowserPackage; ... public class MainApplication extends Application implements ReactApplication { private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) { ... @Override protected List<ReactPackage> getPackages() { ... List<ReactPackage> packages = new PackageList(this).getPackages(); packages.add(new KeychainPackage()); packages.add(new RNInAppBrowserPackage()); ... return packages; } ... }; ... } ``` In React Native version 0.73 or above, the `MainApplication.java` file has been replaced with `MainApplication.kt` ```kotlin import com.oblador.keychain.KeychainPackage; import com.proyecto26.inappbrowser.RNInAppBrowserPackage; ... class MainApplication : Application(), ReactApplication { override val reactNativeHost: ReactNativeHost = object : DefaultReactNativeHost(this) { override fun getPackages(): List<ReactPackage> = PackageList(this).packages.apply { // Packages that cannot be autolinked yet can be added manually here, for example: // add(MyReactNativePackage()) add(KeychainPackage()); add(RNInAppBrowserPackage()); } ... } ... } ``` ### **iOS** To update iOS native dependencies, you can use **CocoaPods**. We recommend installing **CocoaPods** using [Homebrew](https://brew.sh/). ```shell brew install cocoapods cd ios && pod install ``` The SDK requires the `react-native-keychain` and `react-native-inappbrowser-reborn` packages. Sometimes, they may not be automatically linked correctly, resulting in errors when running your app, such as `"Cannot read properties of undefined (reading 'isAvailable')"`. In such cases, you will need to manually link them: 1. **Option: With CocoaPods (Highly recommended)** Please add the following lines to your **Podfile**, and then run `pod update`: ```swift pod 'RNKeychain', :path => '../node_modules/react-native-keychain' pod 'RNInAppBrowser', :path => '../node_modules/react-native-inappbrowser-reborn' ``` 2. **Option: Manually link the packages with Xcode** - Go to the **Build Phases** tab and choose **Link Binary With Libraries.** - Select **+** - Add **Other** > **Add Files** > **node_modules/react-native-keychain/RNKeychain.xcodeproj** (similar with **RNInAppBrowser**) - Add **libRNKeychain.a** (similar with **RNInAppBrowser**) - Clean and rebuild. If you encounter any errors during the SDK installation process, you can refer to the General Tips section at the end of this topic. ## K**inde configuration** 1. In Kinde, go to **Settings > Applications.** 2. Select **View details** on the **Front-end app**. 3. Scroll down to the **Callback URLs** section. 4. Add in the callback URLs for your React Native app, which should look something like this: - Allowed callback URLs - `myapp://myhost.kinde.com/kinde_callback` - Allowed logout redirect URLs - `myapp://myhost.kinde.com/kinde_callback` Make sure you press the Save button at the bottom of the page! Note: The `myapp://myhost.kinde.com/kinde_callback` is used as an example of local URL Scheme, change to the local local URL Scheme that you use. ## Environments If you would like to use our Environments feature as part of your development process. You will need to create them first within your Kinde account. In this case you would use the Environment subdomain in the code block above. ## Configure your app ### **Environment variables** Put these variables in your .env file. You can find these variables on the same page as where you set the callback URLs. - `KINDE_ISSUER_URL` - your Kinde domain - `KINDE_POST_CALLBACK_URL` - After the user authenticates we will callback to this address. Make sure this URL is under your allowed callback URLs - `KINDE_POST_LOGOUT_REDIRECT_URL` - where you want users to be redirected to after logging out. Make sure this URL is under your allowed logout redirect URLs - `KINDE_CLIENT_ID` - you can find this on the App Keys page ```typescript KINDE_ISSUER_URL=https://your_kinde_domain.kinde.com KINDE_POST_CALLBACK_URL=myapp://your_kinde_domain.kinde.com/kinde_callback KINDE_POST_LOGOUT_REDIRECT_URL=myapp://your_kinde_domain.kinde.com/kinde_callback KINDE_CLIENT_ID=your_kinde_client_id ``` Configuration example: ```typescript KINDE_ISSUER_URL=https://myhost.kinde.com KINDE_POST_CALLBACK_URL=myapp://myhost.kinde.com/kinde_callback KINDE_POST_LOGOUT_REDIRECT_URL=myapp://myhost.kinde.com/kinde_callback KINDE_CLIENT_ID=myclient@live ``` ## Configuration deep link ### **Android** Open `AndroidManifest.xml` and update your scheme by adding a new block in activity. ```xml <intent-filter> <action android:name="android.intent.action.VIEW" /> <category android:name="android.intent.category.DEFAULT" /> <category android:name="android.intent.category.BROWSABLE" /> <data android:scheme="myapp" android:host="your_kinde_host" /> // Please modify sheme and host to reflect your preferences. </intent-filter> ``` ### **iOS** You need to link `RCTLinking` to your project using the steps below. 1. If you also want to listen to incoming app links during your app's execution, add the following lines to your `AppDelegate.m`. ```swift // iOS 9.x or newer #import <React/RCTLinkingManager.h> - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options { return [RCTLinkingManager application:application openURL:url options:options]; } ``` 2. If you're targeting iOS 8.x or older, use the following code instead. ```swift // iOS 8.x or older #import <React/RCTLinkingManager.h> - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation { return [RCTLinkingManager application:application openURL:url sourceApplication:sourceApplication annotation:annotation]; } ``` 3. Make sure you have a configuration URL scheme in `Info.plist`, so the app can be opened by deep link. ```swift <key>CFBundleURLTypes</key> <array> <dict> <key>CFBundleTypeRole</key> <string>Editor</string> <key>CFBundleURLName</key> <string>myapp</string> // you can change it <key>CFBundleURLSchemes</key> <array> <string>myapp</string> // you can change it </array> </dict> </arra ``` ## Integrate with your app To create a new instance of the KindeSDK object, execute the code below. ```typescript import { KindeSDK } from '@kinde-oss/react-native-sdk-0-7x'; ... ... const client = new KindeSDK(YOUR_KINDE_ISSUER, YOUR_KINDE_REDIRECT_URI, YOUR_KINDE_CLIENT_ID, YOUR_KINDE_LOGOUT_REDIRECT_URI); ``` ## Sign in and registration Kinde provides methods for easily implementing a login / register flow. You can add buttons as follows. ```typescript <View> <View> <Button title="Sign In" onPress={handleSignIn} /> </View> <View> <Button title="Sign Up" color="#000" onPress={handleSignUp} /> </View> </View> ``` Then define new functions that match for each button. **Note**: Before proceeding, make sure you’ve defined the **KindeSDK** as a **client** variable. ```typescript ... const handleSignUp = async () => { const token = await client.register(); if (token) { // User was authenticated } }; const handleSignIn = async () => { const token = await client.login(); if (token) { // User was authenticated } }; ... ``` ## **Log out** This is implemented in much the same way as signing in or registering. The Kinde SPA client comes with a logout method: ```typescript const handleLogout = async () => { const loggedOut = await client.logout(); if (loggedOut) { // User was logged out } }; ``` We have also implemented an API for token revocation. Pass `true` as an argument in the `logout` function. This flag will assist in revoking the token without having to open the website within your apps. ```typescript const handleLogout = async () => { const loggedOut = await client.logout(true); if (loggedOut) { // User was logged out } }; ``` **Note: Handle redirects are now deprecated** Starting from version 1.1 of the SDK, the need to handle redirects has been eliminated. Authentication is now performed by launching a web browser within your app instead of relying on an external browser. For a comprehensive example of how to handle authentication, see below. ## **Full code sample for authentication** ```typescript const checkAuthenticate = async () => { // Using `isAuthenticated` to check if the user is authenticated or not if (await client.isAuthenticated) { // Need to implement, e.g: call an api, etc... } else { // Need to implement, e.g: redirect user to sign in, etc.. } }; useEffect(() => { checkAuthenticate(); }, []); const handleSignIn = async () => { const token = await client.login(); if (token) { // Need to implement, e.g: call an api, etc... } }; const handleSignUp = async () => { const token = await client.register(); if (token) { // Need to implement, e.g: call an api, etc... } }; const handleLogout = async () => { // With open web in your apps const isLoggedOut = await client.logout(); if (isLoggedOut) { // Need to implement, e.g: redirect user to login screen, etc... } // Without open web in your apps const isLoggedOut = await client.logout(); if (isLoggedOut) { // Need to implement, e.g: redirect user to login screen, etc... } }; ``` ## **Get user information** To access the user information, use the `getUserDetails` helper function. ```typescript const userProfile = await client.getUserDetails(); console.log(userProfile); // output: {"given_name":"Dave","id":"abcdef","family_name":"Smith","email":"dave@smith.com"} ``` ## View users in Kinde Go to the Users page in Kinde to see your newly registered user. ### User Permissions Once a user has been verified, your product/application will return the JWT token with an array of permissions for that user. You will need to configure your product/application to read permissions and unlock the respective functions. [Set permissions](/manage-users/roles-and-permissions/user-permissions/) in your Kinde account. Here’s an example set of permissions. ```typescript const permissions = [ "create:todos", "update:todos", "read:todos", "delete:todos", "create:tasks", "update:tasks", "read:tasks", "delete:tasks ]; ``` We provide helper functions to more easily access permissions. ```typescript await client.getPermission("create:todos"); // {orgCode: "org_1234", isGranted: true} await client.getPermissions(); // {orgCode: "org_1234", permissions: ["create:todos", "update:todos", "read:todos"]} ``` A practical example in code might look something like. ```typescript if ((await client.getPermission("create:todos")).isGranted) { // show Create Todo button in UI } ``` ## Audience An audience is the intended recipient of an access token - for example the API for your application. The audience argument can be passed to the Kinde client to request an audience be added to the token. The audience of a token is the intended recipient of the token. ```typescript const client = new KindeSDK( YOUR_KINDE_ISSUER, YOUR_KINDE_REDIRECT_URI, YOUR_KINDE_CLIENT_ID, YOUR_KINDE_LOGOUT_REDIRECT_URI, YOUR_SCOPES, { audience: "api.yourapp.com" } ); ``` For details on how to connect, see [Register an API](/developer-tools/your-apis/register-manage-apis/). ## Overriding scope By default the `KindeSDK` requests the following scopes: - profile - email - offline - openid You can override this by passing scope into the KindeSDK. ```typescript const client = new KindeSDK( YOUR_KINDE_ISSUER, YOUR_KINDE_REDIRECT_URI, YOUR_KINDE_CLIENT_ID, YOUR_KINDE_LOGOUT_REDIRECT_URI, "profile email offline openid ); ``` ## Getting claims We have provided a helper to grab any claim from your id or access tokens. The helper defaults to access tokens: ```typescript await client.getClaim("aud"); // { name: "aud", value ["api.yourapp.com"] } await client.getClaim("given_name", "id_token"); // { name: "given_name", value: "David" } ``` ## Organizations ### Create an organization To create a new organization within your application, you will need to run a similar function to this. ```typescript <Button title="Create Organization" onPress={handleCreateOrg} /> ``` Then define the function of the button. Make sure you've already defined `KindeSDK` as the **client** in the state. ```typescript const handleCreateOrg = () => { client.createOrg(); }; // You can also pass `org_name` as your organization client.createOrg({org_name: "Your Organization"}); ``` ### Sign in and sign up to organizations Kinde has a unique code for every organization. You’ll have to pass this code through when you register a new user. Example function below: ```typescript client.register({orgCode: "your_org_code"}); ``` If you want a user to sign in into a particular organization, pass this code along with the sign in method. ```typescript client.login({orgCode: "your_org_code"}); ``` Following authentication, Kinde provides a json web token (jwt) to your application. Along with the standard information we also include the `org_code` and the permissions for that organization (this is important as a user can belong to multiple organizations and have different permissions for each). Example of a returned token: Example of a returned token: ```typescript { "aud": [], "exp": 1658475930, "iat": 1658472329, "iss": "https://your_subdomain.kinde.com", "jti": "123457890", "org_code": "org_1234", "permissions": ["read:todos", "create:todos"], "scp": ["openid", "profile", "email", "offline"], "sub": "kp:123457890" } ``` The `id_token` will also contain an array of organizations that a user belongs to - this is useful if you wanted to build out an organization switcher for example. ```typescript { ... "org_codes": ["org_1234", "org_4567"] ... } ``` There are two helper functions you can use to extract information. ```typescript await client.getOrganization(); // {orgCode: "org_1234"} await client.getUserOrganizations(); // {orgCodes: ["org_1234", "org_abcd"]} ``` For more information about how organizations work in Kinde, see [Kinde organizations for developers](/build/organizations/orgs-for-developers/). ## **Feature Flags** We have provided a helper to return any features flag from the access token: ```typescript client.getFlag('theme') // returns { "is_default": false "value": "pink", "code": "theme", "type": "string", } client.getFlag('no-feature-flag') // Error: This flag 'no-feature-flag' was not found, and no default value has been provided client.getFlag('no-feature-flag', 'default-value') // returns { "is_default": true "code": "no-feature-flag", "value": "default-value", } client.getFlag('theme', 'default-theme', 'b') // Error: Flag 'theme' is type string - requested type boolean ``` We also require wrapper functions by type which should leverage `getFlag` above. ### **Get boolean flags** ```typescript /** * Get a boolean flag from the feature_flags claim of the access_token. * @param {String} code - The name of the flag. * @param {Boolean} [defaultValue] - A fallback value if the flag isn't found. * @return {Boolean} */ kindeClient.getBooleanFlag(code, defaultValue); kindeClient.getBooleanFlag("is_dark_mode"); // true kindeClient.getBooleanFlag("is_dark_mode", false); // true kindeClient.getBooleanFlag("new_feature"); // Error: This flag 'new_feature' was not found, and no default value has been provided kindeClient.getBooleanFlag("new_feature", false); // false (flag does not exist so falls back to default) kindeClient.getBooleanFlag("theme", "blue"); // Error: Flag 'theme' is type string - requested type boolean ``` ### Get string flags ```typescript /** * Get a string flag from the feature_flags claim of the access_token. * @param {String} code - The name of the flag. * @param {String} [defaultValue] - A fallback value if the flag isn't found. * @return {String} */ kindeClient.getStringFlag(code, defaultValue); /* Example usage */ kindeClient.getStringFlag("theme"); // pink kindeClient.getStringFlag("theme", "black"); // true kindeClient.getStringFlag("cta_color"); // Error: This flag 'cta_color' was not found, and no default value has been provided kindeClient.getStringFlag("cta_color", "blue"); // blue (flag does not exist so falls back to default) kindeClient.getStringFlag("is_dark_mode", false); // Error: Flag 'is_dark_mode' is type string - requested type boolean ``` ### **Get integer flags** ```typescript /** * Get an integer flag from the feature_flags claim of the access_token. * @param {String} code - The name of the flag. * @param {Integer} [defaultValue] - A fallback value if the flag isn't found. * @return {Integer} */ kindeClient.getIntegerFlag(code, defaultValue); kindeClient.getIntegerFlag("competitions_limit"); // 5 kindeClient.getIntegerFlag("competitions_limit", 3); // 5 kindeClient.getIntegerFlag("team_count"); // Error: This flag 'team_count' was not found, and no default value has been provided kindeClient.getIntegerFlag("team_count", 2); // 2 (flag does not exist so falls back to default) kindeClient.getIntegerFlag("is_dark_mode", false); // Error: Flag 'is_dark_mode' is type boolean - requested type integer+ ``` ## Token Storage Once the user has successfully authenticated, you'll have a JWT and a refresh token and that has been stored securely. E.g. using the `getAccessToken` method of the `Storage` class to get an access token. ```typescript ... import { Storage } from '@kinde-oss/react-native-sdk-0-7x' ... const accessToken = await Storage.getAccessToken(); console.log('access_token', accessToken); ``` We're using the [react-native-keychain](https://www.npmjs.com/package/react-native-keychain) for `React Native` The storage handler can be found at: [Storage class](https://github.com/kinde-oss/kinde-react-native-sdk-0-7x/blob/main/dist/SDK/Storage/index.d.ts) ## **How to test** Run the test suite using the following command at the root of your React Native. ```shell npm run test ``` Note: Ensure you have already run `npm install`. ## SDK API Reference ### `issuer` Either your Kinde URL or your custom domain. e.g `https://yourapp.kinde.com`. Type: `string` Required: Yes ### `redirectUri` The URL that the user will be returned to after authentication. Type: `string` Required: Yes ### `clientId` The unique ID of your application in Kinde. Type: `string` Required: Yes ### `logoutRedirectUri` Where your user will be redirected when they sign out. Type: `string` Required: Yes ### `scope` The scopes to be requested from Kinde. Type: `boolean` Required: No Default: `openid profile email offline` ### `additionalParameters` Additional parameters that will be passed in the authorization request. Type: `object` Required: No Default: `{}` ### `additionalParameters` `- audience` The audience claim for the JWT. Type: `string` Required: No ### **KindeSDK** methods ### `login` Constructs a redirect URL and sends the user to Kinde to sign in. Arguments: ```typescript { audience?: string; isCreateOrg?: boolean; orgCode?: string; orgName?: string; connectionId?: string; lang?: string; loginHint?: string; } ``` Usage: ```typescript await kinde.login(); // or await kinde.login({orgCode: "your organization code"}); ``` Allow `orgCode` to be provided if a specific organization is being signed into. Sample output: ```typescript { "access_token": "eyJhbGciOiJSUzI...", "expires_in": 86400, "id_token": "eyJhbGciOiJSU...", "refresh_token": "yXI1bFQKbXKLD7AIU...", "scope": "openid profile email offline", "token_type": "bearer" } ``` ### `register` Constructs a redirect URL and sends the user to Kinde to sign up. Arguments: ```typescript { audience?: string; isCreateOrg?: boolean; orgCode?: string; orgName?: string; connectionId?: string; lang?: string; loginHint?: string; } ``` Usage: ```typescript await kinde.register(); // or await kinde.register({orgCode: "your organization code"}); ``` Allow `orgCode` to be provided if a specific organization is being registered to. Sample output: ```typescript { "access_token": "eyJhbGciOiJSUzI...", "expires_in": 86400, "id_token": "eyJhbGciOiJSU...", "refresh_token": "yXI1bFQKbXKLD7AIU...", "scope": "openid profile email offline", "token_type": "bearer" } ``` ### `logout` Logs the user out of Kinde. Arguments: ```typescript isRevoke: boolean; // default is false ``` Usage: ```typescript await kinde.logout(); // or await kinde.logout(true); ``` Sample output: `true` or `false` ### `getToken` Returns the raw Access token from URL after logged from Kinde. Arguments: ```typescript url?: string ``` Usage: ```typescript await kinde.getToken(url); // or await kinde.getToken(); ``` You need to have already authenticated. Otherwise, an error will occur. Sample output: ```typescript { "access_token": "eyJhbGciOiJSUzI...", "expires_in": 86400, "id_token": "eyJhbGciOiJSU...", "refresh_token": "yXI1bFQKbXKLD7AIU...", "scope": "openid profile email offline", "token_type": "bearer" } ``` ### `createOrg` Constructs a redirect URL and sends the user to Kinde to sign up and create a new organization in your business. Arguments: ```typescript { org_name?: string } ``` Usage: ```typescript await kinde.createOrg(); // or await kinde.createOrg({org_name: 'your organization name'}); _**//**_ ``` Allow `org_name` to be provided if you want a specific organization name when you create. Sample output: ```typescript { "access_token": "eyJhbGciOiJSUzI...", "expires_in": 86400, "id_token": "eyJhbGciOiJSU...", "refresh_token": "yXI1bFQKbXKLD7AIU...", "scope": "openid profile email offline", "token_type": "bearer" } ``` ### `getClaim` Gets a claim from an access or ID token. Arguments: ```typescript claim: string; tokenKey?: string ``` Usage: ```typescript await kinde.getClaim("given_name", "id_token"); ``` Sample output: ```typescript { name: "give_name", value: "David"} ``` ### `getPermission` Returns the state of a given permission. Arguments: `key: string` Usage: ```typescript await kinde.getPermission("read:todos"); ``` Sample output: ```typescript { "orgCode": "org_1234", "isGranted": true } ``` ### `getPermissions` Returns all permissions for the current user for the organization they are signed into. Usage: ```typescript await kinde.getPermissions(); ``` Sample output: ```typescript { "orgCode":"org_1234", "permissions": ["create:todos","update:todos","read:todos"] } ``` ### `getOrganization` Get details for the organization your user is signed into. Usage: ```typescript await kinde.getOrganization(); ``` Sample output: ```typescript { "orgCode": "org_1234" } ``` ### `getUserDetails` Returns the profile for the current user. Usage: ```typescript await kinde.getUserDetails(); ``` Sample output: ```typescript { "given_name": "Dave", "id": "abcdef", "family_name": "Smith", "email": "dave@smith.com" } ``` ### `getUserOrganizations` Gets an array of all organizations the user has access to. Usage: ```typescript await kinde.getUserOrganizations(); ``` Sample output: ```typescript { "orgCodes": ["org1234", "org5678"] } ``` ### `isAuthenticated` Return the boolean to demonstrate whether the user is authenticated or not. Usage: ```typescript await kinde.isAuthenticate; ``` Sample output: `true` or `false` ### **`getFlag`** Get a flag from the feature_flags claim of the `access_token`. Arguments: ```typescript flagName : string; options? : OptionalFlag = {} flagType? : FlagType type FlagType = 's' | 'b' | 'i'; type OptionalFlag = { defaultValue?: string | boolean | number } ``` Usage: ```typescript kinde.getFlag("theme"); ``` Sample output: ```typescript { "code": "theme", "type": "string", "value": "pink", "is_default": false } ``` ### **`getBooleanFlag`** Get a boolean flag from the `feature_flags` claim of the access token Arguments: ```typescript flagName: string defaultValue?: boolean ``` Usage: ```typescript kinde.getBooleanFlag("is_dark_mode"); ``` Sample output: `true` ### **`getStringFlag`** Get a string flag from the `feature_flags` claim of the access token Arguments: ```typescript flagName: string defaultValue?: string ``` Usage: ```typescript kinde.getStringFlag("theme"); ``` Sample output: `black` ### **`getIntegerFlag`** Get a integer flag from the `feature_flags` claim of the access token Arguments: ```typescript flagName: string defaultValue?: number ``` Usage: ```typescript kinde.getIntegerFlag("team_count"); ``` Sample output: `2` ## General tips ### **Building issues** **`'value'`** **is unavailable: introduced in iOS 12.0** If you got the error **'value' is unavailable: introduced in iOS 12.0** when trying to build the app, you can follow the below steps to fix that: 1. In your Xcode project navigator, select **Pods.** 2. Under Targets, select **React-Codegen**. 3. Select the **Build Settings** tab. 4. Under **Deployment**, set **iOS Deployment Target** to **12.4.** 5. Clean project and rebuild: **Product > Clean Build Folder, Product > Build.** <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/e441dff0-bc34-40a6-5854-2f390e805300/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 6. Dependency `'androidx.browser:browser:1.6.0-beta01'` requires libraries and applications that depend on it to compile against version 34 or later of the Android APIs The solution is add `androidXBrowser = "1.4.0"` in your project. ```java // android/build.gradle buildscript { ... ext { // ... androidXBrowser = "1.4.0 // .... } ... } ``` 7. Duplicate class **kotlin.collections.jdk8.CollectionsJDK8Kt** found in modules **jetified-kotlin-stdlib-1.8.10** (org.jetbrains.kotlin:kotlin-stdlib:1.8.10) and **jetified-kotlin-stdlib-jdk8-1.7.22** (org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.22) The solution is add `org.jetbrains.kotlin:kotlin-bom:1.8.0` dependency in your project. ```java // android/app/build.grade dependencies { ... implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0")) ... } ``` ### **Caching issues** Sometimes there will be issues related to caching when you develop React Native. There are some recommendations for cleaning the cache: 1. Remove `node_modules`, `yarn.lock` or `package-lock.json`. 2. Clean cache: `yarn cache clean` or `npm cache clean --force`. 3. Make sure you have changed values in `.env` file. 4. Trying to install packages again: `yarn install` or `npm install`. 5. Run Metro Bundler: `yarn start --reset-cache` or `npm start --reset-cache`. Assume your StarterKit path is `<StarterKit_PATH>`. **Clean cache for Android** - Run this: ```shell cd <StarterKit_PATH>/android ./gradlew clean ``` **Clean cache for iOS** 1. Run this: ```shell cd <StarterKit_PATH>/ios rm -rf Pods && rm Podfile.lock ``` 2. Clean build folders on **Xcode**. If you need help connecting to Kinde, please contact us at [support@kinde.com](mailto:support@kinde.com).

# Developer tools - Your apis - Give others access to your API

api access, m2m application, third party access, app keys, client credentials, audience
developer-tools, your-apis

There are a number of ways to provide your users with programmatic access to your API and applications via Kinde. You need to [register your API with Kinde](/developer-tools/your-apis/register-manage-apis/) before you begin. ## API access via an M2M application Here’s the process: - Create a machine to machine (M2M) application - Connect the application to your API - Provide access to the user via token or app keys ### Create a M2M application You will want to create a separate M2M application for each user, system, or business who needs to access your API. It is not secure to share access via the same tokens or app keys. 1. Go to **Settings > Applications.** 2. Select **Add Application**. 3. In the dialog that opens, give the application a name, and select **Machine to Machine** as the **Application type**. 4. Select **Save**. App keys - including **Domain** details, **Client ID** and **Client Secret** - are issued for the application. ### Authorize the API to access the application 1. In the application list, find the M2M app you created and select **View details**. 2. Select **APIs** in the menu. A list of all available APIs shows. 3. Select the three dots next to the API you want the application to access, and select **Authorize**. 4. Select **Save**. If you need to cut off access to your API for a user, select the three dots menu and select **Revoke authorization**. ## API access via API keys Allow users to manage their own API keys to access your API, including initializing the request, rotating, and deleting keys. Follow this [quickstart guide](/manage-your-apis/about-api-keys/api-keys-quick-start/). This is much more secure and preferable than manually copying the app keys from the M2M application and providing them to the third-party. ## Provide access via a token A third party can request a token using the relevant `audience` in the claim, for example: ```jsx POST https://yourbusiness.kinde.com/oauth2/token { "client_id": "XXX", "client_secret": "XXX", "grant_type": "client_credentials", "audience": "http://api.example.com/api" } ``` Granting access this way means you don't have to share the Client ID and Secret with anyone. ## Get a test token to test API access Follow this guide to [quickly generate a test token](/developer-tools/your-apis/test-token-from-kinde/) to test access to your API.

# Developer tools - Your apis - Manage API scopes for M2M applications

api scopes, m2m applications, granular access, permissions claim, token customization
developer-tools, your-apis

Kinde allows you to manage API scopes for your M2M applications, providing granular access control and better security between systems. You need to [register your API](/developer-tools/your-apis/register-manage-apis/) and [secure your API](/developer-tools/your-apis/custom-api-scopes/) before you can do this. ## Enable API scopes for an application 1. Go to **Settings > Applications** and select **View details** on the relevant application. 2. Select **APIs** in the side menu. 3. If the application is not yet authorized, select the three dots menu next to the API you’re giving the app access to, and then select **Authorize application**. 4. In the same three dots menu, select **Manage scopes**. 5. In the window that opens, switch on or off the scopes allowed for the application. 6. Select **Save**. ## Include scopes in the permissions claim You can include API scopes in the `permissions` claim and add them as part of the user’s access token. 1. Open the relevant M2M application and select **Tokens** in the menu. 2. Scroll to the **Token customization** section and select **Customize** on the **M2M token**. 3. In the dialog, switch on **Include API scopes in the permissions claim**. 4. Select **Save**.

# Developer tools - Your apis - Secure your API using scopes

custom scopes, api security, granular control, permissions, authorization, scope management
developer-tools, your-apis

<Aside type="upgrade"> You must be on the [Kinde Plus or Scale plan](https://kinde.com/pricing/) to use this feature. </Aside> Kinde lets you add custom scopes to help manage others who access to your APIs. Scopes define token permissions used by your APIs, and provide a reliable way to control access to your API resources. You need to have [registered your APIs](/developer-tools/your-apis/register-manage-apis/) in Kinde to secure them using scopes. <Aside> Note that this topic is NOT about adding custom scopes for the Kinde Management API, it is only related to adding custom scopes to your own APIs. For information about Kinde Management API scopes, see [this topic](/developer-tools/kinde-api/connect-to-kinde-api/). </Aside> ## Benefits of using scopes - **Granular control**: Instead of broad permissions like `read` or `write`, you can create scopes tailored to different levels of access, such as `read:userprofile` or `write:roles`. - **Security**: You only need to grant the permissions necessary for each operation, minimizing the risk of unauthorized access to sensitive data or actions within your system. - **Flexibility**: As your application grows and requirements change, you can easily add, remove, or modify scopes without affecting other parts of your system. - **Better UX**: They simplify the authorization process and improve overall user experience. - **Compliance**: They help you align with regulatory requirements or industry standards by ensuring that access to sensitive data is properly managed and audited. ## Add scopes to an API 1. In Kinde, go to **Settings > APIs**. 2. Select **View details** on the API you want to add scopes for. 3. In the menu, select **Scopes**. 4. Select **Add scope**. 5. In the **Add scope** window, enter a name for the scope. This will be the name you use in your code to recognize the scope. We recommend following a consistent naming convention, such as `read:user_status` or `write:mobilephone`. 6. Add a description that explains what the scope is for and what it does. 7. Select **Save**. 8. Repeat from step 4 for all the scopes you want to add for this API. 9. Repeat from step 1 to add scopes for a different API. ## Authorize and enable scopes for an application 1. Go to **Settings > Applications** and select **View details** on the relevant application. 2. Select **APIs** in the side menu. 3. If the application is not yet authorized, select the three dots menu next to the API you’re giving the app access to, and then select **Authorize application**. 4. In the same three dots menu, select **Manage scopes**. 5. In the window that opens, switch on or off the scopes allowed for the application. 6. Select **Save**. ## Edit and delete scopes <Aside type="warning"> Take care deleting scopes. If a scope is in use, it can cause breaking changes for users and applications that are dependent on them. </Aside> 1. Go to **Settings > APIs** and select **View details** on the relevant API tile. 2. Select **Scopes** in the menu. 3. Find the scope you want to change. 4. Select the dots menu (far right) and select: - **Edit scope.** You can only change the scope description. Select **Save**. - **Delete scope**. Confirm that you want to delete and select **Delete scope**. ## Request a subset of scopes for an authorized application By default token requests for an authorized application will return all the scopes enabled in the section above. However, you can also optionally ask for a subset of enabled scopes to be returned by including them in the body of the access token request. You might do this to add more security to access requests for your API, or because you want your users to be very specific in their requests. Example request ``` curl --request POST \ --url 'https://<your_subdomain>.kinde.com/oauth2/token' \ --header 'content-type: application/x-www-form-urlencoded' \ --data grant_type=client_credentials \ --data 'client_id=<your_m2m_client_id>' \ --data 'client_secret=<your_m2m_client_secret>' \ --data 'audience=<your_api_audience>\ --data 'scope=join:competitions update:competitions' ``` ## API Key scopes If you manage access to your APIs using API keys, you can [set scopes for the API keys](/manage-your-apis/add-manage-api-keys/scopes-for-api-keys/), giving you more granular control over access, depending who has the keys.

# Developer tools - Your apis - Integrate Kinde auth into .NET-based APIs

> Comprehensive guide to integrating Kinde authentication into .NET-based APIs with JWT bearer tokens, authorization policies, and Swagger UI configuration

dotnet, aspnet, jwt bearer, authorization policies, minimal apis, swagger ui, openid connect
developer-tools, your-apis

{/* @case-police-ignore Uri */} {/* @case-police-ignore Jwt */} This article walks through configuring an ASP.NET application to accept and validate an access token from Kinde. Where users are logged into a front end or mobile application, the access token can be passed in a bearer authorization header to secure requests to back end APIs. A complete sample project can be found in the .NET [starter kit](https://github.com/kinde-starter-kits/dotnet-webapi-starter-kit). ## Configure your project 1. Install the packages that handle tokens. ```bash dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer dotnet add package Microsoft.IdentityModel.Protocols.OpenIdConnect ``` 2. Configure application services (typically `Program.cs`) to use the package. ```csharp builder.Services .AddAuthentication(JwtBearerDefaults.AuthenticationScheme) .AddJwtBearer(options => { // These two lines map the Kinde user ID to Identity.Name (optional). options.MapInboundClaims = false; options.TokenValidationParameters.NameClaimType = "sub"; }); ``` 3. Configure `appsettings.json` for your Kinde application. Replace `<your-domain>` with your Kinde domain and `<your-audience>` with the audience associated with your API in Kinde. ```json "Authentication": { "Schemes": { "Bearer": { "Authority": "https://<your-domain>.kinde.com", "ValidAudiences": [ "<your-audience> ] } } } ``` .NET authentication requires an audience. If you don’t already have an audience defined, you will need to do this by [registering your API](/developer-tools/your-apis/register-manage-apis/). ## Manage authorization with policies Access tokens contain information (claims) about what a user is authorized to do when they sign in. You can create policies to manage authorization. ### Via permission claims (recommended) Create a policy that allows only users with certain permission claims, e.g. `read:weather`: ```csharp builder.Services .AddAuthorization(options => { options.AddPolicy("ReadWeatherPermission", policy => policy.RequireAssertion( context => context.User.Claims.Any(c => c.Type == "permissions" && c.Value == "read:weather") )); }); ``` [Set up permissions](/manage-users/roles-and-permissions/user-permissions/) in Kinde. ### Via role claims 1. [Set up Roles](/manage-users/roles-and-permissions/user-permissions/) in Kinde. 2. Add roles to the access token via custom claims, see the [token customization](/build/tokens/token-customization/) procedure. 3. Create a policy for a particular role, for example: ```csharp builder.Services .AddAuthorization(options => { options.AddPolicy("AdminRole", policy => policy.RequireAssertion( context => context.User.Claims.Any(c => c.Type == "roles" && c.Value == "admin") )); }); ``` Note roles defined in Kinde do not map to roles as defined in ASP.NET, so the related functionality, such as `RequireRole()`, cannot be used. ## Secure controller-based APIs To protect routes, add the `[Authorize]` attribute (from the `Microsoft.AspNetCore.Authorization` package) to any controllers or actions required. For example, allow access only to users that satisfy the policy defined in the previous section: ```csharp [Authorize(Policy = "ReadWeatherPermission")] [HttpGet()] public IEnumerable<WeatherForecast> Get() ``` See the [ASP.NET](http://ASP.NET) Core documentation for more details on [authorization](https://learn.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-8.0#use-the-authorize-attribute). ## Secure minimal APIs To protect routes for minimal APIs, the `RequireAuthorization()` method can be called, and optionally pass in a policy, for example: ```csharp app.MapGet("/protected", () => "Hello") .RequireAuthorization(); app.MapGet("/requires_specific_permission", () => "G'day") .RequireAuthorization("ReadWeatherPermission"); ``` See the ASP.NET Core documentation for more details about [securing minimal APIs](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/security?view=aspnetcore-8.0). ## Swagger UI Swagger UI provides an easy way to test APIs while in development. For secured APIs, an access token is sent from your front end application with each request. Swagger UI can be configured to initiate auth and populate the token for you. 1. Configure Swagger with the details of Kinde’s OpenID Connect configuration: ```csharp builder.Services.AddSwaggerGen(options => { var authority = builder.Configuration["Authentication:Schemes:Bearer:Authority"]; options.AddSecurityDefinition( "oidc", new OpenApiSecurityScheme { Type = SecuritySchemeType.OpenIdConnect, OpenIdConnectUrl = new Uri(authority + "/.well-known/openid-configuration") } ); options.AddSecurityRequirement( new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "oidc" }, }, new string[] { } } } ); }); ``` 2. Configure Swagger UI to pre-populate the relevant parameters: ```csharp app.UseSwaggerUI(c => { c.OAuthClientId("<frontend-app-client-id>"); c.OAuthAdditionalQueryStringParams(new Dictionary<string, string> { { "audience", builder.Configuration["Authentication:Schemes:Bearer:ValidAudiences:0"] ?? "" } }); c.OAuthUsePkce(); }); ``` 3. Swap `<frontend-app-client-id>` with your front end application’s client ID shown in Kinde. 4. Add the callback URL to your front end application’s [allowed callbacks](/get-started/connect/callback-urls/) so that the Swagger UI initiates auth and returns to Swagger UI after auth. For local development, the callback will look like the following, though the port may differ: ```csharp https://localhost:7179/swagger/oauth2-redirect.html ``` 5. Once this is set up, use the `Authorize` button to initiate auth. On return, API requests should be automatically populated with the access token. Note for front end applications, implicit flow is not supported, only PKCE is supported. ## Troubleshooting When mismatched versions of dependent libraries are resolved, requests to the API may fail with HTTP 401 and a token validation error. It will look something like this: ```csharp Bearer error="invalid_token",error_description="The signature key was not found ``` For example, if version 7.4.0 or later of `System.IdentityModel.Tokens.Jwt` is installed with a version of `Microsoft.AspNetCore.Authentication.JwtBearer` that is dependent on an earlier version of `Microsoft.IdentityModel.Protocols.OpenIdConnect`. To fix, you would update the version of `Microsoft.IdentityModel.Protocols.OpenIdConnect` to match your version of `System.IdentityModel.Tokens.Jwt`. E.g. ensure they are both 7.4.0.

# Developer tools - Your apis - Protect your API

> Guide to protecting APIs with Kinde authentication, including frontend setup, backend verification, and JWT handling

api protection, jwt verification, audience, bearer token, jwks, authentication
developer-tools, your-apis

It’s common that front-end UI and back-end APIs are decoupled and that you will want to call your back-end API knowing it is securely authenticated. ## **Set up Kinde** For additional security we recommend you [register your endpoint as an API](/developer-tools/your-apis/register-manage-apis/) in Kinde. ## **Set up front end** ### **Audience** If you have registered your API in Kinde as above, you will need to make sure to pass the `audience` as a parameter in your authentication url. If you are using our [React](/developer-tools/sdks/frontend/react-sdk/#audience) or [JavaScript](/developer-tools/sdks/frontend/javascript-sdk/#audience) SDK this is handled for you. This ensures the access token you receive when the user signs in, will contain the `audience` claim. ### **Calling your API** When you make the call to your API you will want to ensure the access token is sent in the headers. An example in React for a bookstore app might be: ```jsx const { getAccessToken } = useKindeAuth(); const [books, setBooks] = useState([]); const fetchBooks = async () => { try { const accessToken = await getAccessToken(); const res = await fetch(`https://api.myapp.com/books`, { headers: { Authorization: `Bearer ${accessToken}` } }); const {data} = await res.json(); setBooks(data.books); } catch (err) { console.log(err); } }; ``` ## **Setup back end** Now that the token is being passed from the front end you will need to verify it when it hits your API. ### **Libraries** We recommend that you use a library to verify your token. If you are using ExpressJS you can use [our library](/developer-tools/sdks/backend/express-sdk/#verify-jwt) or the OpenID Foundation has [a list of libraries for working with JWT tokens](https://openid.net/developers/jwt/). ### **JSON Web Key** It’s likely the library you decide to use will require the url for your public JSON Web Key (also known as a jwks file). The file can be found here: `https://<your_subdomain>.kinde.com/.well-known/jwks` ### **Audience** If you opted to register your API with Kinde as per the `Setup Kinde` step then you will need to make sure you pass the `audience` you registered on Kinde to whichever library you are using.

# Developer tools - Your apis - Register and manage APIs

> Guide to registering and managing APIs in Kinde, including audience configuration and authorization setup

api registration, audience, aud claim, m2m token, user token, authorization
developer-tools, your-apis

If you manage your application’s data using APIs, you can register them with Kinde. Doing this facilitates authentication between your back-end code framework and front-end application where users sign in. When you register your API with Kinde and link it to a Kinde application, the API can be included in the audience (`aud`) claim of the token. To have it included, your front-end must request the audience by passing it when initializing the SDK or making a token request. Once included, the token can be used to make a request from the front-end to the back-end, which verifies the token and checks the `aud` claim. ## To register an API in Kinde 1. Go to **Settings** > **APIs**. 2. Select **Add API**. 3. Enter an **API name** and **Audience**. The audience (`aud`) is a unique identifier for this API. Often a short code or the URL of the API is used. 4. Select **Save**. The details window for the API opens. You’ll notice that an ID has been created, but it is not editable and neither is the audience. You can copy these details, however. 5. To authorize this API for your apps, select **Applications** in the left menu. 6. Select the three dots menu next to the relevant application, then choose **Authorize application**. ## Request an audience be added to a token ### Audience in a user token Our SDKs accept an `audience` parameter. As an example for the React SDK you would use: ```jsx <KindeProvider audience="api.example.com/v1 clientId="someClientId domain="https://kinde.example.com > <MyApp /> </KindeProvider> ``` When the request is received, Kinde will check that an API with a matching audience has been registered and is enabled for the application with the requested clientId. (In the example above `someClientId`). If there is a match it will return the `aud` claim as part of the Access token. For example: ```jsx { aud: ["api.example.com/v1"]; } ``` When you use this Access token in your product and send it to your product’s API, you can check for the existence of this `aud` claim in the token as part of your verification checks. ### Audience in an M2M token If you are using Postman, you can include the `audience` claim in a token request. If you’re doing it manually, send a POST request to this endpoint: `https://<your_subdomain>.kinde.com/oauth2/token` and include the following in the body. ```jsx { grant_type: "client_credentials", client_id: "<your_M2M_client_id>", client_secret: "<your_M2M_client_secret>", audience: "<your_audience_value>", scope: "read:finance write:accounts" } ``` ## Create API keys If you want, you can also give access to your API via [API keys](/manage-your-apis/add-manage-api-keys/create-an-api-key/). These can be created by you and then managed by your customer via the [self-serve portal](/build/self-service-portal/self-serve-portal-for-orgs/) (optional). You can also [scope API keys to an organization](/manage-your-apis/about-api-keys/organization-api-keys/). ## Authorize or revoke authorization of an app from the API 1. Go to **Settings** > **APIs**. 2. Select **Configure** on the relevant API card. The API detail opens. 3. Select **Applications** in the left. 4. Select the three dots menu next to an application, then choose **Authorize application** or **Revoke authiorization**. ## Delete an API If you no longer need to have an API registered in Kinde, you can delete it. This action cannot be reversed. 1. Go to **Settings** > **APIs**. 2. On the API you want to delete, select the three dots and then select **Delete API**. A confirmation window appears. 3. To confirm, select **Delete API**.

# Developer tools - Your apis - Get a M2M token to test your APIs

> Quick guide to generating M2M test tokens in Kinde for API testing without using external tools

m2m token, test token, api testing, token generation
developer-tools, your-apis

Kinde lets you quickly generate a test token for testing your APIs with Kinde. This can save you time generating a token via Postman or other service. This process assumes you have [registered](/developer-tools/your-apis/register-manage-apis/) your API with Kinde, and have [authorized an M2M application](/developer-tools/your-apis/register-manage-apis/#authorize-or-revoke-authorization-of-an-app-from-the-api) to access it. 1. In Kinde, go to **Settings > APIs**. 2. Select **View details** on your API. 3. Select **Test** in the menu. 4. Select an authorized application to test API access. 5. Select **Get token**. An access token and copyable code snippets are generated. 6. You can copy the token and inspect it. ![image of token generated in Kinde to test your api](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/7149ab96-02f5-4b03-265e-5ffe0e52d900/public) 7. Use the provided token to test your API.

# Developer tools - Your apis - Get a M2M access token to test your APIs (Postman method)

> Step-by-step guide to testing M2M access tokens for APIs using Postman with OAuth2 Client Credentials flow

m2m token, postman, client credentials, oauth2, audience, custom scopes, jwt verification
developer-tools, your-apis

This doc describes how to test the security of token exchange for your API connection and M2M apps, using Postman and Authorization code (with PKCE). You can use this process to request tokens for your own and third-party APIs, and to test custom scopes added to claims. Below are the steps to generate `id` and `access` tokens with Postman. If you are testing user access tokens, see [Get a user access token to test your APIs](/developer-tools/your-apis/test-your-api-user-token/). ## Step 1: Add your API to Kinde If you haven’t already, [register your API with Kinde](/developer-tools/your-apis/register-manage-apis/) and set the audience. ## Step 2: (Optional) Set up custom scopes for API access If you have the relevant Kinde plan, you can add custom scopes to M2M access tokens for added API security. You might want to test these as part of this procedure. - [Secure your API with scopes](/developer-tools/your-apis/custom-api-scopes/) - [Manage API scopes for M2M applications](/developer-tools/your-apis/api-scopes-m2m-applications/) ## Step 3: Send request via Postman To securely connect to Kinde’s API, you need to obtain an access token. This procedure describes how to get the token using [Postman](https://www.postman.com/) - an API platform - but you can follow similar steps in your own app environment. We recommend you do this in a non-production environment first. If you decide to use Postman, we recommended that you set up a Postman **environment.** 1. Add your machine to machine [application keys](/get-started/connect/getting-app-keys/) as environment variables. ![Adding environment variables in Postman](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/69800dc4-2d22-468c-4300-71e4b4ee8b00/public) 2. Set up a new collection or use your existing one. 3. Go to the **Authorization** tab and ensure the **Type** is **OAuth 2.0** and the **Header Prefix** is set to **Bearer**. 4. In the **Configure New Token** section, set the **Grant Type** to **Client Credentials**. This is the grant type for hitting your API. 5. Enter the **Access Token URL**, using the domain variable you created above. For example, `https://yourbusiness.kinde.com/oauth2/token`. Note that even if you use a custom subdomain domain, the access token URL needs to include the `kinde.com` domain. ![Entering the access token URL](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/8149baf6-e3b7-406d-7447-390fe4bc2100/public) 6. Enter the **Client ID** and **Client Secret** for the M2M application you created in Kinde. 7. Set the **audience** to match the `audience` value for the API you registered in Kinde. To do this: 1. Scroll down and expand the **Advanced** section. 2. Add `audience` as the **key** and paste the URL as the **value**. 3. Set **Send in** to `Request body` 8. In the **Authorization** section, select **Get New Access Token**. If it works, you should see a confirmation message. ![Access Token in Postman](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/b736bc91-3f30-4d48-62c6-37f131e88300/public) 9. Select **Use Token**. You should now have the access token. ## Step 4: Validate the token in your API Check that the token contains the required information and is valid. Testing methods may vary depending on your framework, here’s a general topic for [verifying JWTs](/build/tokens/verifying-json-web-tokens/) and some [recommended libraries](https://openid.net/developers/jwt-jws-jwe-jwk-and-jwa-implementations/). Things to check, include: - Audience - Lifetime / validity - Scopes

# Developer tools - Your apis - Get a user access token to test your APIs (Postman method)

> Step-by-step guide to testing user access tokens for APIs using Postman with OAuth2 Authorization Code flow and PKCE

user access token, postman, oauth2, pkce, authorization code, audience, custom scopes, jwt verification
developer-tools, your-apis

This doc describes how to test user access tokens for your API connection, using Postman and Authorization code (with PKCE). You can use this process to request tokens for your own and third-party APIs, and to test custom scopes added to claims. Below are the steps to generate `id` and `access` tokens with Postman. See the instructions on [how to test M2M tokens](/developer-tools/your-apis/test-your-api-m2m-token/). ## Before you begin ### Register your API (recommended) If you use audiences in your application, we recommend you register your API with Kinde so that you can include `audience` in the token request. An `audience` defines the recipient of the token and ensures the token can only be used by the intended system. You can trust the token as is, but we would recommend you to use the API authentication using `audience`. If you haven’t already, [register your API with Kinde](/developer-tools/your-apis/register-manage-apis/) and set the audience. ### Add custom scopes to the access token If you have the relevant Kinde plan, and your API is registered, you can add custom scopes to user access tokens for added API security. You might want to test these as part of this procedure. - [Secure your API with scopes](/developer-tools/your-apis/custom-api-scopes/) - [Manage API scopes for users](/developer-tools/your-apis/user-api-scopes/) ## Step 1: Add callback URLs to your application in Kinde 1. In Kinde, go to **Settings > Applications**. 2. Select **View details** on the tile for the application you’re testing. 3. In the **Allowed callback URLs** section, add this Postman callback URL, `https://oauth.pstmn.io/v1/callback` as a separate entry on a new line. 4. Select **Save**. ## Step 2: Send request via Postman If you are using audiences in your application, we recommend you 1. In Postman, create a new GET request. 2. Go to the **Authorization** tab. 3. In the **Type** field, select **OAuth 2.0**. 4. Scroll down to the **Configure New Token** section and set the **Grant Type** as **Authorization Code (With PKCE)**. 5. Select the **Authorize using browser** checkbox. 6. Set the **Auth URL**. For example: ```jsx https://yourbusiness.kinde.com/oauth2/auth?prompt=login ``` Where: - `yourbusiness.kinde.com` is the domain - `prompt=login` forces asking for user credentials every login to disable SSO. 7. (If you’ve registered your API and use `audience` claims in your product) Add the `audience` key to the token request, with a value of `https://yourproduct.com/api`. Note that Kinde supports multiple audiences. <Aside> **Older versions of Postman** Add the `audience` parameter to the request url, e.g. `https://yourbusiness.kinde.com/oauth2/auth?prompt=login&audience=https://yourproduct.com/api` </Aside> 8. In the **Access Token URL** field enter your Kinde domain URL, e.g. `https://yourbusiness.kinde.com/oauth2/token`. 9. In the **Client ID** field, add the **Client ID** listed in the application the API is authorized for. You can find this in Kinde by going to **Settings > Applications > View details > App keys** section. 10. If you are testing a back-end app, Enter the **Client Secret**. This can be left blank for front-end apps. 11. Set the **Code Challenge Method** to **SHA-256**. 12. Leave the **Code verifier** field blank. 13. Set the value of **Scope** to **openid email offline**. 14. Enter a random value in the **State** field. It must be at least 8 characters long. 15. Select **Get New Access Token**. This should be the result: - The **ID token** contains an `aud` claim for two audiences, one for the application ID, one for the issuing party. - The **Access token** contains the `aud` claim for the requested (intended) audience to authenticate the API. - The `azp` claim represents the application `client_id` you are using to issue the token. 16. The access token you received can now be used to test and secure your APIs. ![Access token in Postman](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/1fc6f61c-a544-4cce-83c6-7d691f785700/public) ## Step 3: Validate the token in your API Check that the token contains the required information and is valid for accessing your application or site. Test may vary depending on your framework, here’s a general topic for [verifying JWTs](/build/tokens/verifying-json-web-tokens/) and some [recommended libraries](https://openid.net/developers/jwt-jws-jwe-jwk-and-jwa-implementations/). Things to check, include: - Audience - Lifetime / validity - Scopes

# Developer tools - Your apis - Manage API scopes for users

> Guide to managing API scopes for users through roles, additional scopes, and permissions claims

api scopes, user permissions, role management, permissions claim, audience, token customization
developer-tools, your-apis

There are two ways to manage user API scopes. - Include API scopes in roles and assign the role to the user - Add additional API scopes to the user (in addition to role) You also have the option to add API scopes for users through the `permissions` claim. ## Before you begin - Make sure the scopes already exist for your API. See [Create and manage API scopes](/developer-tools/your-apis/custom-api-scopes/) - Add your API as an `audience` in the .env file of your SDK. For example, request multiple audiences by providing a white space separated list: ``` KINDE_AUDIENCE=<your-api-1> <your-api-2> ``` ## Apply API scopes via user role 1. In Kinde, go to **Settings > Roles**. 2. Add a new role or edit an existing role. 3. In the dialog that appears, switch on **API scopes** at the bottom of the window. 4. Select **Save**. 5. Go back to the home page in Kinde. 6. Select **Users**. 7. Find and open the record for the user you want. 8. Select **Roles** in the menu. 9. [Assign the role with the relevant scopes to the user](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/). ## Apply additional API scopes for a user 1. In Kinde, go to **Settings > Users**. 2. Find and open the record for the user you want. 3. Select **API scopes** in the side menu. 4. In the **Additional API scopes** section, select **Add scopes**. 5. In the dialog, switch on the scopes you want. 6. Select **Save**. ## View API scopes for a user 1. In Kinde, go to **Settings > Users**. 2. Find and open the record for the user you want. 3. Select **API scopes** in the side menu. All the scopes applied to the user - via role and additional - are shown. ## Include API scopes in the permissions claim You can include API scopes in the `permissions` claim if you want them included as part of the user’s Access token. 1. Go to **Settings > Applications** and select **View details** on the relevant application for the permissions. 2. Select **Tokens** in the side menu. 3. Scroll to the **Token customization** section and select **Customize** on the **Access token** tile. 4. In the dialog, switch on **Include API scopes in the `permissions` claim.** 5. Select **Save**.

