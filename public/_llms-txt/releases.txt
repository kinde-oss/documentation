---
page_id: 2c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f
title: Kinde Documentation - Releases
description: "Complete documentation for Kinde's releases section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - releases
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - releases
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's releases section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Releases

This is the complete documentation for Kinde's releases section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Releases - About - About feature flags

> Comprehensive overview of feature flags in Kinde including flag types, use cases, override mechanisms, and implementation examples for controlled feature releases

feature flags, feature toggles, boolean flags, string flags, integer flags, json flags, flag types, flag values, flag overrides, continuous delivery
releases, about

Feature flags, along with other kinds of development flags, are an essential part of building and managing digital products. Feature flags (sometimes called feature toggles) control who can see features in specific environments for your app or site. Feature flags are defined by a `key` identifier, flag `type`, and flag `value`, which gets included in your code. ## What to use feature flags for Feature flags let you control user access to specific features as they are being built. They keep untested features out of the hands of your customers and safe from accidental discovery. A simple application of a feature flag is to create a flag when you start working on a feature, then remove the flag when the feature is ready for release. There’s many benefits to using feature flags. - Engineers can keep their in-progress work confined to a development environment - Allows for more secure feature testing prior to release - Enables more granular release control, e.g. for continuous delivery - Gives you the ability to target users with specific features ## Types of feature flags in Kinde There are several types of feature flags that can be used for different reasons. Kinde currently offers: - **Boolean** - operate like an on/off switch using `true | false` values. Ideal for showing and hiding features or switching functions on and off. - **String** - to pass configuration values, e.g. colour, and content such as label text, etc. Say if you want to test if a green or a red button gets more clicks. - **Integer** - for updating numeric values using whole numbers only. Decimal numbers will be trimmed after the decimal point. The integer range is -2147483648 to +2147483647. - **JSON** - allow you to define a set of key-value pairs in a JSON file, where each key represents a feature or functionality in your application. ## Overriding feature flags Feature flag values cascade downward from the business level setting. You can also allow overrides to be applied in environments, organizations, or at the user level, as part of the flag definition. See [override feature flag values](/releases/feature-flags/edit-feature-flag/). | When the value is set or changed… | then the value is defined for… | | ----------------------------------------- | -------------------------------------------------------------- | | at the business level where it is created | all users in the environment and organizations in the business | | in an environment | all users in the environment | | for an organization | all users in the organization | | for a user | that user in every organization they belong to | ## Feature flag use cases ### Boolean You’re building a new major feature such as ‘notifications’ and you want to make sure that nobody can use it until development is complete. You set the feature value to `false` for everyone, to ensure it is hidden. But because you want to test it later, you also make sure that the value can be overriden for your testing environment. Once you’ve finished building and you’re ready to test, you change the value to `true` for the testing environment to enable your internal QA team to look at it. When it’s finished and bug-free, you can go back and change the value to `true` so all environments and organizations can access it. Released! ### String You want to test out some new button names in your app. You create a string type flag called `buy-button` where the value can be overridden for different environments and organizations. Instead of making changes in production, test them behind a flag to select organizations or cohorts before you decide what works best. For example, you could test if `buy it now` or `add to cart` is a more effective call to action. Another use for string flags is to apply a unique color scheme for each different environment you work in. Developers frequently switch between production, staging, and local environments as they work, and with string flags it’s easy to make these visually distinct. In his own project, one of Kinde’s founders created the `heading-color` string flag to distinguish each of his three environments: `yellow` for local, `orange` for staging, and `pink` for production. ### Integer Less used for releasing features than for controlling various elements in your app or site, integer flags enable more granular control in certain situations. For example, say you want to set the number of items you display on a page in your online store, you can use an integer flag to create a page limit. You might set the display limit to 12 for mobile devices, and to 24 for desktop. Integer flags can also be used to set other limits, such as limiting the number of concurrent requests to an API endpoint, or to limit the number of password attempts before locking a user out. The advantage of using a flag for this is being able to edit the value and deploy changes quickly and easily, without major code updates. ### JSON With JSON feature flags, you can define a set of key-value pairs in a JSON file, where each key represents a feature or functionality in your application. For example: ```json { "is_dark_mode": true, "font_size": "large", "employee_count": 5 } ``` JSON feature flags might suit you if you use a separate feature flag management system or library for your application.

# Releases - Feature flags - Add a feature flag in Kinde

> Step-by-step guide to adding feature flags in Kinde including flag types, key naming, value configuration, and override settings for controlled feature releases

add feature flag, feature flag creation, flag types, boolean flags, string flags, integer flags, json flags, flag keys, flag values, flag overrides
releases, feature-flags

Kinde’s feature flags enable you to control how you release features to your users. You can add them through the Kinde admin interface, or you can connect and add flags via API. The procedure below is for adding them in Kinde. Learn more about flags. ## Add a feature flag 1. Go to **Releases > Feature flags**. 2. Select **Add feature flag**. 3. Enter a **Name** and **Description** for the flag. Try to keep names short, but be descriptive enough to recognize the flag purpose. 4. Enter a **Key** for the flag. This will be referenced in your code. For example `feature-key` or `feature_key`. Stick to whatever naming pattern you use in your code, such as hyphen separated (kebab case), or underscore separated (snake case), etc. <Aside type="danger"> Keys cannot be edited later or your code might break </Aside> <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/2b576fb7-2a3e-4bac-ddfd-7940ff736500/public" alt="Adding a feature flag" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 5. Define the flag by selecting a **Type** and **Value**. - **Boolean** - operate like an on/off switch using `true | false` values. Ideal for showing and hiding features or switching functions on and off. - **String** - to pass configuration values, e.g. color, and content such as label text, etc. Say if you want to test if a green or a red button gets more clicks. - **Integer** - for updating numeric values using whole numbers only. Decimal numbers will be trimmed after the decimal point. The integer range is -2147483648 to +2147483647. - **JSON** - allow you to define a set of key-value pairs in a JSON file, where each key represents a feature or functionality in your application. <Aside type="danger"> The flag type cannot be edited later or your code might break </Aside> <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/5470f527-c511-4190-e93e-2c220a6f2b00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 6. For String, Integer, and JSON type flags, enter the flag value in the field that appears. 7. Select if you want to allow the flag value to be set differently in environments, for users, or for organizations. You might do this, for example, if a feature is to have a limited release for testing. Note that currently, you cannot edit this once the flag has been added. Consider if you want to enable this option now. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/1ea5f847-6480-4022-9c2b-a31861662d00/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 8. Select **Save**.

# Releases - Feature flags - Override feature flag values

> Guide to overriding feature flag values at environment, organization, and user levels including inheritance rules and testing scenarios

override feature flags, flag overrides, environment overrides, organization overrides, user overrides, flag values, flag inheritance, feature testing, early access, flag cascading
releases, feature-flags

It’s common practice to override feature flag values for specific environments or for specific organizations or users. This might be done to enable feature testing, to analyse the effectiveness of a change, or to give early access to a preferred customer. Feature flags values cascade from business to environment to organization to user. But overrides can be applied if they are available. ## Check if a flag override is available 1. Go to **Releases > Feature flags**. 2. Find the flag in the list. 3. Check the column indicating where overrides can be applied. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/a0c63a40-d3ae-4cde-31cd-4648569ff300/public" alt="The column showing where an override can be applied" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> If overrides are allowed, follow one of the below procedures. ## Override feature flag value in an environment When you apply an override in an environment, it will be applied to all users in the environment. 1. Go to **Settings > Environment > Feature flags**. All the feature flags are listed. 2. Find the flag you want to update and select **Edit value**. You can only do this if the flag value can be overridden for environments. 3. In the **Edit feature flag** window: 1. For Boolean flag types, select the new value and then select **Save**. 2. For string, integer, or JSON flag types, enter the new value and then select **Save**. 4. If you want to revert to the inherit default value, in the **Edit feature flag** window: 1. For Boolean flag types, select the default value and then select **Save**. 2. For string, integer, or JSON flag types, enter the new value and then select **Save**. ## Override feature flag value for an organization When you apply a value override for an organization, it will be applied for all users in the organization. 1. Go to **Organizations** and select the organization. The **Organization details** window opens. 2. Select **Feature flags**. All the feature flags are listed. 3. Find the flag you want to update and select **Edit value**. You can only do this if the flag value can be overridden for organizations. 4. In the **Edit feature flag** window: 1. For Boolean flag types, select the new value and then select **Save**. 2. For string, integer, or JSON flag types, enter the new value and then select **Save**. 5. If you want to revert to the inherit default value, in the **Edit feature flag** window: 1. For Boolean flag types, select the default value and then select **Save**. 2. For string, integer, or JSON flag types, enter the new value and then select **Save**. ## Override feature flag value for a user When you apply a value override for a user, it will be applied for that user across all organizations. 1. Go to **Users** and select the user. Their profile opens. 2. Select **Feature flags**. All the feature flags available to this user are listed. 3. Find the flag you want to update and select **Edit value**. You can only do this if the flag value can be overridden for users. 4. In the **Edit feature flag** window: 1. For Boolean flag types, select the new value and then select **Save**. 2. For string, integer, or JSON flag types, enter the new value and then select **Save**. 5. If you want to revert to the inherit default value, in the **Edit feature flag** window: 1. For Boolean flag types, select the default value and then select **Save**. 2. For string, integer, or JSON flag types, enter the new value and then select **Save**.

# Releases - Feature flags - Manage feature flags through the Kinde API

> Guide to managing feature flags through the Kinde API including setup requirements and available flag management functions

feature flags api, kinde api, m2m application, access token, add flag, edit flag, override flag, delete flag, api management, management api
releases, feature-flags

You can add and manage Kinde’s feature flags through the Kinde API as well as through the main admin interface. ## What you need - A machine to machine application set up to [connect to the Kinde Management API](/developer-tools/kinde-api/connect-to-kinde-api/) - [A valid access token](/developer-tools/kinde-api/connect-to-kinde-api/) ## Current flag functions in the API If you plan to use feature flags through the Kinde API, you will be able to do the following: - Add a new flag - Edit a flag - Override a flag value in an environment or organization - Delete a flag [See relevant posts and responses in the API documentation.](/kinde-apis/management#tag/feature-flags)

# Releases - Feature flags - Manage feature flags

> Guide to managing feature flags in Kinde including searching, editing, deleting, and best practices for flag lifecycle management

manage feature flags, edit feature flags, delete feature flags, flag search, flag sorting, flag editing, breaking changes, flag deletion, beta access, incremental rollout
releases, feature-flags

Feature flags let you control user access to specific features in your app or site. Typically, feature flags are used to restrict feature access while a feature is being built. You can incrementally roll the feature out by giving beta access to specific users, organizations, or environments, and then remove the flag when the feature is ready for global release. Once a flag is created, you can only edit the name, description and default value. If you’re not familiar with feature flags, you might want to read up about feature flags first. ## Find a feature flag You can search feature flags by name or key. 1. Go to **Releases > Feature flags**. <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/d5b6da7f-3e05-45d7-b39f-2d88df6eb600/public" alt="The Feature flags page in Kinde" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> 2. Click a column heading to sort the list. 3. Type a flag name in the search bar above the list to find a specific flag. 4. Press **Enter** to show results. 5. Clear the list by deleting the search term and pressing **Enter**. ## Edit a feature flag You can only change the name, description, and default value of a feature flag. This changes the default value for all users that inherit the flag value. <Aside type="danger" title="You cannot edit the key, type, or override definitions of a feature flag"> Editing these fields in a feature flag that is in use will cause breaking changes in your code, which is why we don’t allow it. We suggest you create a new flag in cases where you make an error when you create a flag, or if you want to re-purpose a flag. </Aside> 1. Go to **Releases > Feature flags**. 2. Select the three dots menu on the flag entry, and select **Edit feature flag**. 3. Edit the **Name** or **Description**. 4. Edit the **Default value**. 5. Select **Save**. The changes will apply to all environments, organizations, and users that inherit the flag value. If you just want to edit the flag value in a specific environment or for a particular organization or user, see [Override feature flag values](/releases/feature-flags/edit-feature-flag/). ## Delete a feature flag You can delete a feature flag in Kinde. Deleting also removes any flag value overrides in environments, organizations, and for users. This action is not reversible. 1. Go to **Releases > Feature flags**. 2. Select the three dots menu on the flag entry, and select **Delete feature flag**. 3. In the confirmation window that appears, select **Delete feature flag**.

# Releases - Guides - Guide to app store reviews

> Comprehensive guide to preparing apps for app store reviews including Apple App Store and Google Play Store authentication setup and feature flag integration

app store review, apple app store, google play store, testflight, sandbox receipt, hidden login, deep link, feature flags, review environment, authentication
releases, guides

This guide is designed to help prepare your app for an app store review if you’re using Kinde for auth. It provides recommendations and solutions for setting up reviewer access. This isn’t a complete list of preparation tasks, and there’s no guarantee your app will pass using only this guide, but it’s a solid starting point. We’ll continue updating it as new scenarios arise. If you have suggestions, let us know. ## Prepare for Apple App Store review Here’s how to set up Kinde in preparation for an Apple App Store review. We recommend setting up a hidden login route that’s only active when your app is being reviewed by Apple. Here’s how: ### Step 1: Detect the App Store review environment Apple doesn’t offer an official way to detect its review environment, but you can use a few indirect methods. **Method A: Check for a sandbox receipt** When Apple reviews your app, all transactions occur in a sandbox environment. On iOS, you can check whether the app’s receipt is a sandbox receipt: ```swift func isRunningInTestFlightOrAppStoreReview() -> Bool { #if DEBUG return false // Debug builds should not use the hidden route #else if let url = Bundle.main.appStoreReceiptURL { return url.lastPathComponent == "sandboxReceipt } return false #endif } ``` This method works because Apple’s review devices generate a `sandboxReceipt` file. **Method B: Check TestFlight for a sandbox receipt** If your app is distributed via TestFlight, you can also check for a sandbox receipt: ```swift func isRunningInTestFlight() -> Bool { return Bundle.main.appStoreReceiptURL?.lastPathComponent == "sandboxReceipt } ``` ### Step 2: Create a hidden login route for Apple testers Once you detect that the app is running in Apple’s review environment, you can enable a special login route. **Method A: Display a hidden sign-in button** Using this method, you display a hidden sign-in button only when `isRunningInTestFlightOrAppStoreReview()` returns `true`. Testers can then sign in with predefined credentials: ```swift if isRunningInTestFlightOrAppStoreReview() { showHiddenLoginButton() } ``` **Method B: Provide a deep link for signing in** Using this method, you provide Apple with a deep link like `myapp://hidden-login`. You must ensure this route is only active when the app is in review mode. You can set this up so that when Apple taps the link, they are signed in automatically or they are shown a sign-in screen with pre-filled demo credentials. You might need to set up a webhook or other alert so you know when the link is clicked. ### Step 3: Add notes in the App Store review submission Whatever method you use, clearly explain how testers can access your app in the **App Review Notes**. Provide the method and the credentials they can use. Example message: > Dear Apple Reviewer, Since our app does not use email/password authentication, we have created a hidden sign in option for you to test. If you are testing in `TestFlight` or the App Store review environment, a special sign in button will appear. Alternatively, access the sign in screen via this deep link: `myapp://hidden-login` Test credentials: review@myapp.com P******d > ## Google Play Store Here’s how to set up Kinde in preparation for an Google Play review. We recommend setting up a hidden login route that’s only active when your app is being reviewed by Google. Here’s how to set up a hidden authentication route for the Google Play app review process. ### Step 1: Detect the Google Play review environment Google Play doesn’t offer an official review environment flag, but you can use indirect methods to detect it: - **Check the installer package**: Apps installed from Google Play will have `com.android.vending` as the installer. - **Check device characteristics**: Review devices may share common traits, though this is less reliable. **Example (Kotlin):** ```kotlin import android.content.Context import android.content.pm.PackageManager fun isGooglePlayReviewEnvironment(context: Context): Boolean { val installer = context.packageManager.getInstallerPackageName(context.packageName) return installer == "com.android.vending } ``` ### **Step 2: Restrict access to the hidden auth route** Once you detect the review environment, create a secure, hidden API route. 1. Check for a secret token in the request header. 2. Allow access only if the token matches your predefined key. **Example (Next.js API Route):** ```kotlin import { NextResponse } from 'next/server'; export async function POST(req: Request) { const playStoreSecret = req.headers.get('x-play-review-secret'); const isPlayStoreReview = playStoreSecret === process.env.PLAY_REVIEW_SECRET; if (isPlayStoreReview) { return NextResponse.json({ message: 'Hidden auth route accessed!' }); } else { return NextResponse.json({ error: 'Forbidden' }, { status: 403 }); } } ``` ### **Step 3: Add a secret header in the app (during review only)** When the app detects it's running in the Google Play review environment, send the secret header. **Example (Kotlin using Retrofit):** ```kotlin val isReview = isGooglePlayReviewEnvironment(context) if (isReview) { val request = Request.Builder() .url("https://yourapi.com/hidden-auth") .header("x-play-review-secret", "your-secret-key") .build() } ``` **Official resources** - [Requirements for providing login credentials for app access](https://support.google.com/googleplay/android-developer/answer/15748846?hl=en&sjid=2614470000031657771-NC) - [Make your app available for review](https://playacademy.exceedlms.com/student/collection/260728/path/345815/activity/776873) ## Use Kinde feature flags to switch on review mode You can use Kinde feature flags to dynamically enable hidden routes or functionality during the app review process—without needing to redeploy or hard-code conditions. ### Step 1: Create a feature flag 1. In **Kinde** go to **Settings > Feature Flags.** 2. Select **Add feature flag**. The **Add feature flag** window opens. ![feature flag top half of screen](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/59e501e6-77d6-4cf6-feed-b88a46a96f00/public) 3. Fill out the name, description, and key (e.g., `app_store_review_mode`). 4. Select **Boolean** as the flag type. ![feature flag screen bottom half in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/abd5ae55-cb13-4467-0d4b-d7eae2d7f800/public) 5. Set the **Boolean definition** to `false` (default state). 6. Select **Save**. You’ll toggle this flag to `true` during the review period, then back to `false` afterward. ### Step 2: Manage the flag in your backend You’ll now use the flag in your backend logic to control access to a hidden login route. **Example: Next.js API Route with Kinde Feature Flag:** ```tsx import { NextResponse } from 'next/server'; import { getKindeServerSession } from '@kinde-oss/kinde-auth-nextjs/server'; export async function POST(req: Request) { const { getBooleanFlag } = getKindeServerSession(); const isFeatureEnabled = await getBooleanFlag( 'app_store_review_mode', // Your feature flag key false // Default value ); if (isFeatureEnabled.value) { return NextResponse.json({ message: 'Hidden auth route accessed via feature flag!' }); } else { return NextResponse.json({ error: 'Forbidden' }, { status: 403 }); } } ``` ### Step 3: Toggle the flag during review When you submit your app for review: - Set the flag `app_store_review_mode` to **true** in the Kinde dashboard. - After approval, set it back to **false** to hide the route again. ## You're ready to give app access to app store reviewers! With these strategies, you can securely provide access to your app, for both Apple and Google Play reviewers, while keeping the login routes hidden from real users. Using tools like Kinde feature flags, deep links, and environment checks ensures your review process is smooth and secure. ## Need help? Join the [Kinde community on Slack](https://join.slack.com/t/thekindecommunity/shared_invite/zt-1vyq8qilj-jFH5V27jfFnHk~BuBSU0ZA) or the [Kinde community on Discord](https://discord.com/invite/tw5ng5tK6V) for support and advice from our team and other legends working with Kinde.

