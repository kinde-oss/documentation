---
page_id: 8e9f0a1b-2c3d-4e5f-6a7b-8c9d0e1f2a3b
title: Kinde Documentation - Manage users
description: "Complete documentation for Kinde's manage users section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
sidebar:
  order: 1
topics:
  - llm
  - documentation
  - training
  - manage-users
sdk: []
languages:
  - markdown
  - text
audience: developers
complexity: beginner
keywords:
  - llm training
  - documentation
  - manage-users
  - section
  - frontmatter
  - metadata
  - kinde
updated: 2025-09-18
featured: false
deprecated: false
ai_summary: "Complete documentation for Kinde's manage users section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section for LLM training"
---

# Kinde Documentation - Manage users

This is the complete documentation for Kinde's manage users section containing titles, descriptions, keywords, topics, and full content from all documentation files in this section.

# Manage users - About - About user management

> Overview of user management in Kinde including user lifecycle, organization management, and access control features for comprehensive user administration.

user management, organizations, user profiles, user identities, permissions, roles, self sign up, profile sync, enterprise connections
manage-users, about

User management is about managing user records, and controlling what users can do and access within your product. You can set this up to be simple or complex, depending on your company’s needs. ## **Default user settings** ### **Users and organizations** Whether or not you [manage multiple organizations](/build/organizations/add-and-manage-organizations/) in Kinde, all users need to belong to at least one organization. You can specify which organization users are added to, or else they are added to the default organization. You can add users to other organizations or [change the organizations](/manage-users/about/manage-users-across-organizations/) they belong to at any time. If a user belongs to multiple organizations, they will be prompted to select an organization when they sign in. ### **Users can sign themselves up** By default, users will be allowed to sign up to your applications without being invited. If you would prefer your users to be invitation only, go to **Settings > Environment > Policies** and switch off the **Allow self-sign up** option. Tip: If users can sign themselves up, you might want to also [set a default role](/manage-users/roles-and-permissions/default-user-roles/) for new users. ### **User profiles are synced to Kinde** When a user signs in, some of their basic profile details (email, name, picture, etc.) from the external provider (MS Entra ID, Google, etc.) are passed to Kinde as well. For example, if you manage user access via a SAML connection, then their profile stored with the external identity provider is synced to Kinde each time they sign in. You should leave this switched on if you are using [enterprise connections](/authenticate/enterprise-connections/about-enterprise-connections/) for authenticating users. If you want, you can disable it in **Settings > Environment > Policies** by de-seleting the **Sync user profiles on sign in** option. ## User identities are different to profiles User profiles are not quite the same as [user identities](/manage-users/add-and-edit/add-manage-user-identities/), which can also include contact information, access rights, and sign in credentials. User may have just one, or multiple identities (e.g. a username+password, and a Google SSO identity). Manage user identities via the dashboard or via API. ## **Options for adding users** You can [add users manually](/manage-users/add-and-edit/add-and-edit-users/), [import them from a CSV file](/manage-users/add-and-edit/import-users-in-bulk/), or add them [via API](/kinde-apis/management#tag/users/post/api/v1/user). If you are transferring user details from another service, such as Auth0, you need to obtain the details from the service before you can import. ## **Permissions and roles** Permissions and roles are defined at the ‘Business’ level in your Kinde account - which is the global level; but they are applied per user at an ‘organization’ level. This means you just have to create them once and they are made available across your whole business structure. Kinde provides the ability to set individual [permissions](/manage-users/roles-and-permissions/user-permissions/) at a user level, and to create [roles](/manage-users/roles-and-permissions/user-roles/) (sets of permissions) for easier user management. A user can be assigned multiple roles, and assigned permissions on top of these. We recommend you work out a model for managing this, starting with basic permissions. You can [include user roles in access tokens](/manage-users/roles-and-permissions/user-roles/#add-roles-to-the-access-token). **Recommended approach** While everyone’s needs are different, we recommend you write your code based on permissions, not roles, as it gives you more control and will scale better when you are managing a lot of users.

# Manage users - About - Manage users across organizations

> Guide to managing users across multiple organizations including moving users between organizations, bulk operations, and sign-in experience for multi-org users.

multi-organization, user management, organization switching, bulk import, external_organization_id, roles and permissions, sign in experience, enterprise authentication
manage-users, about

If you have [multiple organizations](/build/organizations/multi-tenancy-using-organizations/) set up, you can easily switch the organization a user belongs to and add them to other organizations. - to do this per user, following the procedure below. - to add users to an organization in bulk, [re-import the users](/manage-users/add-and-edit/import-users-in-bulk/) and include the external_organization_id with the CSV. ## **Move a user between organizations** 1. In Kinde, go to **Users**. A list of all your organization’s users shows. 2. Find the user in the list. 3. Select their name to open their profile. 4. Check and uncheck the boxes to add and remove them from an organization. 5. Select **Save**. 6. You will need to [separately add roles and permissions](/manage-users/roles-and-permissions/apply-roles-and-permissions-to-users/) for this user in the organization. If a user belongs to multiple organizations, they will be prompted to select the organization they want to access when they sign in. ## Sign in experience for users in multiple organizations If a user belongs to multiple organizations, they will be prompted to select an organization when they sign in. If you use enterprise authentication, users will be recognized by their email domain and will be forwarded to the correct identity provider.

# Manage users - Access control - Accept policies at signup

> Guide to configuring policy acceptance at user signup in Kinde including terms of service, privacy policy, and legal compliance requirements.

policy acceptance, terms of use, privacy policy, clickwrap agreement, explicit acceptance, sign up flow, third party signup, acceptance tracking, compliance
manage-users, access-control

When a user signs up to your app, site, or platform via Kinde, their acceptance of product terms and privacy policy is implied (see the left image). However, some businesses want to record explicit acceptance and track who has accepted, this is also known as a clickwrap agreement, click-accept, click-to-sign, or clickthrough agreement (see the right image). <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/7933c9f0-7285-431c-b702-3607a0a98100/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Switch on explicit acceptance of policies When you switch on explicit acceptance, it is set at the business level and will apply to all environments and organizations in your business. 1. Go to **Settings > Business details**. 2. Add the URL location of the **Terms of use URL** or **Privacy policy URL**, or both. Both are not required. You may have already added these when you set up authentication. 3. In the **Global display settings** section, switch on the **Show a policy acceptance checkbox on sign up** toggle. 4. Select **Save**. ## Acceptance experience for users The next time a user signs up, they will be prompted to select the acceptance checkbox before they are allowed to sign up to your service. - If they sign up with email, the acceptance box appears inline, on the sign up page (see image above). - If they sign up using a third party service like Google or GitHub, a dialog will appear, prompting them to accept (see image below). <img src="https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/4bf1e7ff-ed53-445b-206b-6c1fe2121000/public" alt="" width="672px" height="auto" fetchpriority="low" loading="lazy" decoding="async" /> ## Check if a user has accepted You can see in a user’s profile when they accepted the policies, terms and conditions. 1. In Kinde, go to **Users**. 2. Filter the list and select the user you want to view. 3. In the **Activity** section for the user, the dates of acceptance are shown in the **Log** list, with **Terms of use accepted on** and **Privacy policy accepted on** shown in the description. These are shown as a log activity because when one of the policies is updated and new acceptance is recorded, the accepted date will also change.

# Manage users - Access control - Delete or suspend users

> Guide to deleting or suspending users in Kinde including user deactivation, permanent deletion, and access control management.

delete users, suspend users, user suspension, user deletion, access control, user restoration, admin permissions, user management, self sign up
manage-users, access-control

If you want to prevent access by a user, you can suspend or delete them. You need to be a Kinde Owner or Admin to do this. ## **Suspend a user** 1. On the Kinde home page, select **Users**. 2. Find the user you want to suspend. 3. Select the three dots menu, then select **Suspend user.** A ‘suspended’ badge appears next to their name on the user list. When the user tries to sign in, they will receive an error and will not be able to sign in. ## **Restore a suspended user** 1. On the Kinde home page, select **Users**. 2. Find the suspended user you want to restore. 3. Select the three dots menu, then select **Restore user**. This reinstates their access. When the user tries to sign in, their access will be restored. ## **Delete a user** 1. On the Kinde home page, select **Users**. 2. Find the user you want to delete. 3. Select the three dots menu, then select **Delete user**. A confirmation window opens. 4. Select the extent to which you want to delete the user: 1. Select the first option to remove the user’s access and ability to sign in to all organizations, but leave their profile in Kinde. 2. Select the second option to completely remove the user record from Kinde, including access and all subscriber lists. 5. Select **Delete user**. When the user tries to sign in, they will be prompted to sign up (if self-sign-up is allowed in your business).

# Manage users - Access control - Reset multi-factor authentication for a user

> Guide to resetting multi-factor authentication for users in Kinde including MFA bypass, re-enrollment, and security management.

mfa reset, multi-factor authentication, authenticator app, recovery codes, mfa setup, organization mfa, environment mfa, mfa methods, access control
manage-users, access-control

You can reset multi-factor authentication (MFA) for individual users. You might do this because: - they can’t access their authenticator app. - they need to reset or re-install an authenticator app. - they have previously opted out of MFA but now want to enable it. They should be able to use their recovery codes to get in to the system in the meantime. ## **To reset MFA for a user** 1. In Kinde, go to the **Users** page. 2. Select the user’s name to view their details. 3. Select **Multi-factor auth** in the menu. Depending on how MFA is set up in the environment and how many organizations the user belongs to, you will see: - a section for the default MFA (environment-level settings), if this applies. - a section for MFA for each organization the user belongs to. 4. Select the three dots next to the relevant MFA method and then select **Reset multi-factor auth**. A confirmation message opens. 5. Select **Reset**. 6. If a user has multiple MFA methods set up, you need to remove each method to fully reset MFA for the environment or organization. Repeat from step 4. The next time the user signs in to the environment or organization they will be prompted to set up their MFA. If the user has previously opted out of MFA, they will be prompted to opt-in again before setting up MFA.

# Manage users - Access control - Reset a user's password

> Guide to resetting user passwords in Kinde including password reset workflows, temporary passwords, and user authentication management.

password reset, user password, admin reset, api reset, password change, authentication, admin permissions, user management
manage-users, access-control

If your user’s authenticate using passwords, you can reset their password through the Kinde admin (instructions below), or [through our API](/kinde-apis/management#tag/users/patch/api/v1/user) using `{"is_password_reset_requested": true}` in the body of a request. Note that you need to be a Kinde admin or have sufficient permissions to reset a user’s password. 1. In Kinde, go to **Users**. The list of all your users is displayed. 2. Filter, browse, or search the list for the user who’s password needs to be reset. 3. Select their name to open their profile, then scroll down the **Profile** window and select **Reset Password**. 4. Select **Reset** in the confirmation message that appears. The next time the user signs in, they will be prompted to change their password.

# Manage users - Access control - Set temporary password

> Guide to setting temporary passwords for users in Kinde including password expiration, forced password changes, and security best practices.

temporary password, single-use password, password authentication, hashed password, bcrypt, md5, sha256, salt, security warning, api password

If you have set up [password authentication](/authenticate/authentication-methods/password-authentication/) for your users, you might want to set or update their password. Kinde lets you set a single-use, temporary password to enable authentication. There are a number of reasons why you might need to do this, for example: - You don’t allow self-sign-up, so you provide sign in and password details to all new users - You don’t have a valid email for the user - The user cannot access their email or phone, to receive a reset password code When you set a temporary password, you’ll need to communicate it to the user via your own method. Kinde cannot send a temporary password via email or SMS. ## Security warning Setting a temporary password is not a very secure way of helping a user sign in. The password might be overheard or intercepted after you send it, and it could be misused and make your systems vulnerable. If you have an email for the user, we recommend triggering a [password reset](/manage-users/access-control/reset-user-password/) instead. ## Signing in with a temporary password To use a temporary password, the user signs in with their email, or other identity credential, and uses the temporary password. They will be immediately prompted to set a new password of their own creation. Once used, the temporary password becomes invalid. ## Set a temporary password in Kinde 1. In Kinde, go to **Users**, then open the profile of the user. 2. Scroll to the bottom of the page to the **Admin actions** section. 3. In the **Manage passwords** area, select **Set temporary password**. 4. In the window that appears, enter a password. <Aside> The password must be more than 8 characters, not common or guessable (e.g. not `Password123`). We recommend a mix of alphanumeric characters in upper and lowercase. Special characters are optional. </Aside> 5. To view the password, select the ‘eye’ icon. 6. Select **Set temporary password**. 7. Communicate the password to the user. ## Set or update a password via Kinde API The [Set user password API](/kinde-apis/management#tag/users/put/api/v1/users/{user_id}/password) allows you to supply a hashed password for a user. If you pass the `is_temporary_password: true` to the API it will set a password as being single-use. <Aside type="warning"> We only accept password hashes and will never allow plain text passwords </Aside> Include the following information for the password API: - `hashed_password` - the user’s password encrypted using a hashing method or algorithm - `hashing_method` - the name of the algorithm used to encrypt the user’s password. Currently **crypt**, **bcrypt**, **md5**, **SHA256**, and **wordpress** are supported. <Aside title="bcrypt $2b variant support"> If you are importing bcrypt hashes with the $2b variant, Kinde will substitute this for the $2a variant. These are interchangeable as long as you were not running OpenBSD at the time the hashes were generated. </Aside> <Aside title="sha256 support:"> Provide the hash in hex format. For the `salt_format`, specify how the salt should be interpreted: e.g. **hex** for a hex-encoded string (68656c6c6f for hello). By default, the salt is treated as a plain string, and escape sequences (like \n or \v) are treated as literal characters. </Aside> - `salt` - extra characters added to passwords to make them stronger - `salt_position` - position of salt in password string. Prefix (before) or suffix (after). | Hashing method | Salt | Salt position | | -------------- | -------- | ------------------------- | | md5 | Optional | required if salt included | | bcrypt | | | | crypt | Optional | | | wordpress | Optional | | | SHA256 | Optional | required if salt included | - `is_temporary_password` - indicates a single use password, the user will be prompted to set a new password after the first time they use it.

# Manage users - Add and edit - Manually add and edit users

> Guide to manually adding and editing users in Kinde including user creation, editing details, and organization assignment.

add users, edit users, user management, manual user creation, user details, organizations, bulk import
manage-users, add-and-edit

You can manually add and edit users in Kinde. You can also import users in bulk from CSV. See [Import users in bulk](/manage-users/add-and-edit/import-users-in-bulk/). ## **Add a user** 1. Go to **Users**. A list of users across all your organizations is shown. 2. Select **Add user**. 3. In the window that appears, enter the user details including name, email, and other relevant details. 4. Select the **Organizations** you want to add them to. Your business’s default organization is selected by default. 5. Select **Save**. ## **Edit user details** 1. Go to **Users**. A list of users across all your organizations is shown. 2. Find the user whose details you want to edit. 3. Open the user’s record. 4. Use the side menu to navigate the pages and make the changes you want. Select **Save** on each page as you go.

# Manage users - Add and edit - Add and manage user identities

> Guide to adding and managing user identities in Kinde including email addresses, phone numbers, and social login connections for multi-identity support.

user identities, identity management, profile identities, contact information, sign in identity, primary identity, enterprise identities, username case sensitivity, api management

You can add and manage a user’s identity in Kinde. This includes their Kinde profile, contact, and sign in identity information. [Learn more about identities in Kinde](/authenticate/about-auth/identity-and-verification/). This topic explains how to add profile identities manually in Kinde - you might do it this way as a one-off task. You can also add identities via [the Kinde Management API](/kinde-apis/management/). You might do it this way for bulk processes. <Aside> Users with enterprise identities in Kinde can't also have other identity types in Kinde. E.g. a user can have an email identity and a social identity. But if a user has an enterprise identity, they cannot have other identities. </Aside> ## Add an identity 1. In Kinde, go to **Users**. 2. Search or browse for the user you want to update. 3. In the **Profile** page for the user, in the **Identities** section, select **Add identity**. 4. In the dialog, choose the identity type and enter the details. 5. Select **Save**. Create a username, email or phone identity via API: `POST /users/{user_id}/identities` ## Delete an identity You can’t edit an identity record as it can break authentication for a user. Instead, add a new identity before you delete the old one. 1. In Kinde, go to **Users**. 2. Search or browse for the user you want to update. 3. In the **Profile** page for the user, in the **Identities** section, locate the identity you want to delete. 4. Select the three dots menu and select **Delete identity**. Delete a username, email or phone identity via API: `DELETE /identities/{identity_id}` ## Make a contact identity primary Primary contact information gets passed in the ID token for the user. You can change the primary identity. 1. In Kinde, go to **Users**. 2. Search or browse for the user you want to update. 3. In the **Profile** page for the user, in the **Identities** section, locate the identity you want to make primary. 4. Select the three dots menu and select **Make primary**. Make an identity the primary one (`is_primary`) via API: `PATCH /identities/{identity_id}` ## Update a user identity You can’t directly edit identities in Kinde. You need to add a new identity and delete the old one to update identity records. ## Cases in usernames Kinde treats usernames as case-insensitive. In other words, we ignore case. We do this because it eliminates the possibility of auth issues and fraud when two usernames are identical in every aspect except the case of one of their letters. We are happy to support users choosing an aesthetically pleasing username combination, like `RosyRose` or `BuilderBob`. We just don't also support separate identities for `rosYrosE` and `BUilderbob`. Before adding users, we recommend checking that all usernames are unique in more than just case.

# Manage users - Add and edit - Import users in bulk from Auth0

> Comprehensive guide to importing users in bulk to Kinde from Auth0 using the JSON format, validation rules, and error handling for large-scale user management.

auth0 migration, user migration, password import, roles and permissions, hashed passwords, external_organization_id, username case sensitivity
manage-users, add-and-edit

This topic is for people who want to import users in bulk to Kinde from Auth0. For other formats, see [import users via JSON or CSV](/manage-users/add-and-edit/import-users-in-bulk/). ## File requirements - Auth0 data - User details and passwords need to be in NDJSON (Newline Delimited JSON) format - File size up to 20MB supported If you’ve got large user sets (over 20MB) or are concerned about file size limits, you might consider importing in batches, or contact us for import support. ## Before you import users - [Create organizations in Kinde](/build/organizations/add-and-manage-organizations/) - only if you use this function to support multi-tenancy (for example, in a B2B structure) or if you manage separate user groups this way. - Add [roles](/manage-users/roles-and-permissions/user-roles/) and [permissions](/manage-users/roles-and-permissions/user-permissions/) in Kinde, if you intend to import these details with users. - If your users sign on with passwords, make sure you [Enable password authentication](/authenticate/authentication-methods/set-up-user-authentication/) before importing them ## Cases in usernames Kinde treats usernames as case-insensitive. In other words, we ignore case. We do this because it eliminates the possibility of auth issues and fraud when two usernames are identical in every aspect except the case of one of their letters. We are happy to support users choosing an aesthetically pleasing username combination, like `RosyRose` or `BuilderBob`. We just don't also support separate identities for `rosYrosE` and `BUilderbob`. Before importing users, we recommend checking that all usernames are unique in more than just case. ## Prepare Auth0 data When you export user details from Auth0: - select all the default fields and add the `identities` field to the import list. - select the JSON file format for export. `Identities` data distinguishes the type of identity, specifically the `connection` attribute. e.g. username, phone, GitHub, Google, etc. ### How Auth0 user identities are treated on import Social identities without an email can be imported, and are identified by the connection type. You can import users with multiple identities, these will be listed under the user’s profile. Kinde supports migrating the following authentication methods from Auth0: Usernames, Email, Phone, Google, Apple, Microsoft, Facebook, GitHub, Twitch, Bitbucket. Auth methods are shown in the `connection` attribute. These are represented as follows in the identity data: - Username-Password-Authentication - email - sms - google-oauth2 - apple - microsoft - github - twitch - facebook - bitbucket - windowslive ### Import options When importing users from Auth0, you have two options: 1. **Import users only** - choose this method if you want to allow users to reset their password or sign in another way. 2. **Import passwords only** - only choose this if you have already imported users. ## How to import users 1. In Kinde, go to **Users**, then select **Import users**. 2. Select **From Auth0**. 3. Follow the on-screen prompts to import the data. 4. If there are any [errors with the import](/manage-users/add-and-edit/troubleshoot-user-import-errors/), you will be able to view them afterwards. 5. Most import errors can be fixed by editing the JSON file and then re-importing into Kinde. Any records that have already been imported and are unchanged, will be ignored. ## Impact on end-users Importing all your existing users and passwords should mean that your end users won’t notice anything when they next sign in. This is the optimal experience. However: - If a user changes their password after the user export and while the migration is in progress, they will be prompted to reset their password on the next sign in. - If you have set up a new authentication method as part of the user migration (for instance, going passwordless) your users will be prompted to use the new method on sign in. - If you add or remove roles or permissions, they may gain/lose access to parts of your system. ## Weak passwords are not rejected on import When you import passwords, Kinde does not check for password strength. However, if you do not also include a `TRUE` in the `password_verified` column of the CSV, Kinde will send a one-time password to the user the first time they try to sign in, in order to verify their identity. In future, we may add the ability to check password strength and initiate a password change if it's deemed to weak by standard password criteria. ## Re-importing can update user info If you add a user via import and they start authenticating via Kinde, and then you import their records again with changes - for example, you import name and email, but with a new permission - that information will be updated Kinde. We do not recommend making user updates via import, instead, manage updates via the Kinde admin, or via API. ## Communication to users Kinde does not send any notifications or invitations to users when they are added to Kinde via import. The idea is that your users have a seamless experience that feels (almost) like it always has in your app. If you’ve made changes to their sign in experience — for example adding multi-factor authentication — then consider contacting your users to let them know their sign in experience will be changed.

# Manage users - Add and edit - Import users via CSV or JSON

> Comprehensive guide to importing users in bulk to Kinde including custom CSV and NDJSON format requirements, validation rules, and error handling for large-scale user management.

bulk import, csv import, auth0 migration, user migration, password import, organization assignment, roles and permissions, hashed passwords, external_organization_id, username case sensitivity
manage-users, add-and-edit

You can import users in bulk, from CSV or JSON. If you are moving to Kinde from Auth0, see [this guide](/manage-users/add-and-edit/import-users-from-auth0/) instead. ## File requirements - CSV - User details and passwords need to be in UTF-8 encoded CSV format - JSON - User details and passwords need to be in NDJSON (Newline Delimited JSON) format - File size up to 20MB supported If you’ve got large user sets (over 20MB) or are concerned about file size limits, you might consider importing in batches, or contact us for import support. ## Before you import users - [Enable password authentication](/authenticate/authentication-methods/set-up-user-authentication/) before importing passwords - [Create organizations in Kinde](/build/organizations/add-and-manage-organizations/) - only if you use this function to support multi-tenancy (for example, in a B2B structure) or if you manage separate user groups this way. - Add [roles](/manage-users/roles-and-permissions/user-roles/) and [permissions](/manage-users/roles-and-permissions/user-permissions/) in Kinde, if you intend to import these details with users. **Note: Importing users from Entra ID (formerly Azure)** Set up the [MS Entra ID connection in Kinde](/authenticate/enterprise-connections/azure/) before you import your users. Then when you import, Kinde will match users to the relevant connection based on their email address. ## Cases in usernames Kinde treats usernames as case-insensitive. In other words, we ignore case. We do this because it eliminates the possibility of auth issues and fraud when two usernames are identical in every aspect except the case of one of their letters. We are happy to support users choosing an aesthetically pleasing username combination, like `RosyRose` or `BuilderBob`. We just don't also support separate identities for `rosYrosE` and `BUilderbob`. Before importing users, we recommend checking that all usernames are unique in more than just case. ## Prepare NDJSON data Before importing, make sure that you set up data that you want user records to be linked to, e.g. roles, permissions, organizations. Organizations are linked based on the 'external_organization_id' field , the value of which needs to be added against the organization object with 'external_id' in your import file. Using the NDJSON format you can import users with the following user data: - Permissions - Roles - Property values - Identities - Feature flags - Scopes - Profiles NDJSON files are line separated JSON objects with each JSON object representing a user. The following schema can be used for importing NDJSON files, note this schema represents one line within the file. ```json { "$schema": "http://json-schema.org/draft-07/schema#", "title": "User", "description": "A user object for importing", "type": "object", "properties": { "id": { "type": "string", "description": "A unique external identifier for the user (e.g., 'your_external_user_id_001')." }, "password": { "type": "object", "description": "Password metadata including salt, hash, and algorithm used.", "properties": { "salt": { "type": ["string", "null"], "description": "The salt value used when hashing the password, if applicable." }, "salt_format": { "type": ["string", "null"], "enum": ["hex", "string", null], "description": "Format of the salt value. Can be 'hex', 'string', or null if not used." }, "salt_position": { "type": ["string", "null"], "enum": ["prefix", "suffix", null], "description": "Position of the salt relative to the password. Can be 'prefix', 'suffix', or null." }, "hashed_password": { "type": "string", "description": "The resulting hashed password string." }, "hashing_algorithm": { "type": "string", "enum": ["crypt", "bcrypt", "sha256", "md5", "wordpress"], "description": "The algorithm used to hash the password." } } }, "first_name": { "type": "string", "description": "The user's first name." }, "last_name": { "type": "string", "description": "The user's last name." }, "identities": { "type": "array", "description": "A list of identity records such as email, username, or social.", "items": { "type": "object", "description": "An identity record associated with the user.", "properties": { "type": { "type": "string", "description": "The type of identity.", "enum": [ "email", "phone", "username", "oauth2:slack", "oauth2:apple", "oauth2:github", "oauth2:facebook", "oauth2:twitter", "oauth2:twitch", "oauth2:gitlab", "oauth2:xero", "oauth2:linkedin", "oauth2:discord", "oauth2:bitbucket", "oauth2:stripe", "oauth2:microsoft", "oauth2:clever", "oauth2:roblox" ] }, "identity": { "type": "string", "description": "The actual identifier value (e.g., email address, username, or provider user ID)." }, "is_verified": { "type": "boolean", "description": "Whether this identity has been verified." }, "provider": { "type": "string", "description": "The name of the provider (e.g., 'google') for OAuth identities." }, "profile": { "type": "object", "description": "Optional key/value pairs returned from the provider.", "additionalProperties": true } } } }, "properties": { "type": "array", "description": "Custom metadata key-value pairs associated with the user.", "items": { "type": "object", "properties": { "key": { "type": "string", "description": "The name of the property." }, "value": { "type": "string", "description": "The value of the property." } } } }, "feature_flags": { "type": "array", "description": "A list of feature flags for the user.", "items": { "type": "object", "properties": { "key": { "type": "string", "description": "The name of the feature flag." }, "value": { "type": "string", "description": "The value of the flag." } } } }, "organizations": { "type": "array", "description": "Organizations this user is associated with, including roles, permissions and api scopes.", "items": { "type": "object", "properties": { "external_id": { "type": "string", "description": "An external identifier for the organization (e.g., 'your_external_org_id_001')." }, "roles": { "type": "array", "description": "List of roles assigned to the user within the organization.", "items": { "type": "string" } }, "permissions": { "type": "array", "description": "List of specific permissions granted to the user within the organization.", "items": { "type": "string" } }, "scopes": { "type": "array", "description": "API scopes assigned to the user for this organization.", "items": { "type": "object", "properties": { "audience": { "type": "string", "format": "uri", "description": "The audience or API this scope applies to (e.g., 'https://your-api.com')." }, "scope": { "type": "string", "description": "The name of the scope (e.g., 'scope_1')." } } } } } } } } } ``` Here's an single-line example: ```txt {"id":"your_external_user_id_001","password":{"salt":null,"salt_format":null,"salt_position":null,"hashed_password":"$2a$10$t8Jz3hJCCTFk/Acja7bw3OpamB3xuLPhpJlRHb31bXIjfzeTfn8rq","hashing_algorithm":"bcrypt"},"last_name":"One","first_name":"User","identities":[{"type":"username","identity":"userone"},{"type":"email","identity":"userone@example.com","is_verified":true},{"type":"oauth2:google","profile":{"custom_provider_fields":"custom key/values from google"},"identity":"123456","provider":"google","is_verified":true}],"properties":[{"key":"property_1","value":"false"}],"feature_flags":[{"key":"feature_flag_1","value":"true"}],"organizations":[{"external_id":"your_external_org_id_001","roles":["admin","member"],"permissions":["read","write"],"scopes":[{"audience":"https://your-api.com","scope":"scope_1"}]}]} ``` Example, but a bit easier to read. ```jsx { "id": "your_external_user_id_001", "password": { "salt": null, "salt_format": null, "salt_position": null, "hashed_password": "$2a$10$t8Jz3hJCCTFk/Acja7bw3OpamB3xuLPhpJlRHb31bXIjfzeTfn8rq", "hashing_algorithm": "bcrypt" }, "last_name": "One", "first_name": "User", "identities": [ { "type": "username", "identity": "userone" }, { "type": "email", "identity": "userone@example.com", "is_verified": true }, { "type": "oauth2:google", "profile": { "custom_provider_fields": "custom key/values from google" }, "identity": "123456", "provider": "google", "is_verified": true } ], "properties": [{ "key": "property_1", "value": "false" }], "feature_flags": [{ "key": "feature_flag_1", "value": "true" }], "organizations": [ { "external_id": "your_external_org_id_001", "roles": ["admin", "member"], "permissions": ["read", "write"], "scopes": [{ "audience": "https://your-api.com", "scope": "scope_1" }] } ] } ``` ## Prepare CSV files When exporting data from another auth system or your own system via CSV, the file needs to be set up with specific headings and formats for the data you are importing. These are detailed below. If you are migrating from Auth0, see the **Prepare JSON data (for Auth0 imports)** section. ### Required **data** - `email` or `phone` - minimum required identity information - `external_organization_id` - assign users to organizations, optional unless you are importing roles and permissions <Aside> There are special considerations if you are importing users who will share a phone number to authenticate via a mobile device. Contact support@kinde.com for advice on the best way to import users where the phone is the primary identity and numbers are shared. </Aside> ### Other user data <Aside> The more data that you include for import, the easier we can set up your users in Kinde. Kinde will not duplicate users with existing email addresses. </Aside> - `first_name` and `last_name` - `id` (also referred to as `provided_id`) - unique to the auth provider and helps us match records as they are imported. - `username` - if usernames are part of a user’s identity - `phone` - in the [E.164](https://en.wikipedia.org/wiki/E.164) format [+][country code][number]. For example, +6155511555. Required for phone authentication. - `phone_verified` - phone number verification status: TRUE or FALSE - `email` - the user’s email address - `email_verified` - email verification status: `TRUE` or `FALSE`. TRUE only applies if you are also importing the user's password. If they have not set a password and you set this to `TRUE`, they will be prompted to set one using a one-time code the first time they sign in. This verifies their identity. - `role_key` - the role key for the role a user will be assigned on import. If the user is to be assigned more than one role, use a comma separated list. - `permission_key` - the permissions key for the permission a user will be assigned (that is not included in their role). If the user is to be assigned more than one permission, use a comma separated list. - `external_organization_id` - your supplied 'external_id' for the organization that you want the user to be imported into. Optional unless you are importing roles and permissions with user data. If the user belongs to more than one organization, use a comma separated list wrapped in double quotes. If left empty the user will be assigned to the default organization, if the 'Add users to this organization if no organization is specified' policy is enabled. <Aside> Note that this is NOT the same as the **Organization code** in Kinde, which is a Kinde-supplied ID. You can define your ID in the organization 'external_id' field. </Aside> ### Password data (optional) - `hashed_password` - the user’s password encrypted using a hashing method or algorithm. - `hashing_method` - the name of the algorithm used to encrypt the user’s password. Currently **crypt**, **bcrypt**, **sha256**, **md5**, and **wordpress** are supported. [Contact us](https://kinde-21631392.hs-sites.com/en-au/feature-request) if you need a different method. - `salt` - extra characters added to passwords to make them stronger - `salt_position` - position of salt in password string. E.g. prefix (before) or suffix (after). - `salt_format` - format of the salt, e.g. hex, string, etc. <Aside title="bcrypt $2b variant support:"> Please note if you are importing bcrypt hashes with the $2b variant, Kinde will substitute this for the $2a variant. These are interchangeable as long as you were not running OpenBSD at the time the hashes were generated. </Aside> <Aside title="sha256 support:"> Provide the hash in hex format. Import the salt using the `salt` column. For the `salt_format`, specify how the salt should be interpreted: e.g. **hex** for a hex-encoded string (68656c6c6f for hello). By default, the salt is treated as a plain string, and escape sequences (like \n or \v) are treated as literal characters. </Aside> | Hashing method | Salt | Salt position | | -------------- | -------- | ------------------------- | | md5 | Optional | required if salt included | | bcrypt | | | | crypt | Optional | | | wordpress | Optional | | | sha256 | Optional | required if salt included | ### **Example simple csv import** ```text email,id,first_name,last_name,roles,permissions,external_organization_id jen@kinde.com,0001,"Jen","Smith","role_1","permission_1","ext_org_id_1,ext_org_id_2 elmo@kinde.com,0002,"Elmo","Smith","role_1","permission_2","ext_org_id_1,ext_org_id_2 ``` ### Users with multiple orgs and multiple roles If you’re importing users who belong to multiple organizations and they have different roles in those organizations, you can set up the CSV to duplicate the user on a separate line for each organization they belong to, with the relevant roles to match. For example: ```text email,id,first_name,last_name,roles,permissions,external_organization_id jen@kinde.com,0001,"Jen","Smith","role_1,role_2","permission_1,permission_2","ext_org_id_1 jen@kinde.com,0001,"Jen","Smith","role_3","permission_3,permission_4","ext_org_id_2,ext_org_id_3 ``` Alternatively, you can import your users first, then import their roles and organizations in a separate file: ```text File 1 email,id,first_name,last_name jen@kinde.com,0001,"Jen","Smith ``` ```text File 2 id,roles,permissions,external_organization_id 0001,"role_1,role_2","permission_1,permission_2","ext_org_id_1 0001,"role_3,role_4","permission_3,permission_4","ext_org_id_2 ``` ## How to import users 1. In Kinde, go to **Users**, then select **Import users**. 2. Select the option for your situation: - Custom CSV - Custom NDJSON 3. Follow the on-screen prompts to import the data. 4. If there are any [errors with the import](/manage-users/add-and-edit/troubleshoot-user-import-errors/), you will be able to view them afterwards. 5. Most import errors can be fixed by editing the CSV or NDJSON file and then re-importing into Kinde. Any records that have already been successfully imported, will be ignored. ## Impact on end-users Importing all your existing users and passwords should mean that your end users won’t notice anything when they next sign in. This is the optimal experience. However: - If a user changes their password after the user export and while the migration is in progress, they will be prompted to reset their password on the next sign in. - If you have set up a new authentication method as part of the user migration (for instance, going passwordless) your users will be prompted to use the new method on sign in. - If you add or remove roles or permissions, they may gain/lose access to parts of your system. ## Weak passwords are not rejected on import When you import passwords via CSV, Kinde does not check for password strength. However, if you do not also include a `TRUE` in the `password_verified` column of the CSV, Kinde will send a one-time password to the user the first time they try to sign in, in order to verify their identity. In future, we may add the ability to check password strength and initiate a password change if it's deemed to weak by standard password criteria. ## Re-importing does not update user info If you add a user via import and they start authenticating via Kinde, and then you import their records again with changes - for example, a name change or a new email - that information will not be updated in Kinde. Similarly, if a user has changed the spelling of their name or has new permissions, and you import data from a CSV containing outdated information, the older data will NOT override their current record in Kinde. We recommend managing updates to user information via the Kinde admin, or via API. ## Communication to users Kinde does not send any notifications or invitations to users when they are added to Kinde via import. The idea is that your users have a seamless experience that feels (almost) like it always has in your app. Similarly, if you add users via API, Kinde does not send an email or notification to the user. If you’ve made changes to their sign in experience — for example adding multi-factor authentication — then consider contacting your users to let them know their sign in experience will be changed.

# Manage users - Add and edit - Manage subscribers

> Guide to managing subscribers in Kinde including subscriber status, billing integration, and subscription lifecycle management for SaaS applications.

subscribers, subscriber management, lead generation, newsletters, campaigns, subscription form, convert to user, contact management, access requests
manage-users, add-and-edit

In Kinde, you can build a list of subscribers so you can communicate to them about your business, products, and services. For example, you might use the subscriber form for: - lead generation - newsletters - campaigns - product or feature communication Once a contact is in your subscriber list, they can be easily converted to users later. This list is different to your [Access request contacts](/build/set-up-options/manage-access-requests/), who’s details you collected when they registered interest in your product. ## Set up a subscription form Kinde allows you to design the page where customers can go to subscribe to your newsletter or other product updates. See [Set up a subscription form](/design/pages/subscription-form/). ## View subscriber details 1. In Kinde, go to **Users > Subscribers**. A list of contacts is shown. 2. To see when a person subscribed, find them in the list, select the three dots menu and select **View details**. A panel slides out showing added information. ## Add a subscriber 1. Go to **Users > Subscribers** and select **Add subscriber**. 2. In the window that appears, enter their name and email address. 3. Select **Save**. ## Convert a subscriber to a user 1. Go to **Users > Subscribers** and find the contact you want to convert to a user. 2. Select the three dots menu and select **Convert to user**. A window appears, prompting you to select the organization the user will belong to. You can only select one. 3. Select **Convert**. The contact will now appear on the **All users** list, but will also remain a subscriber. See [Manage users across organizations](/manage-users/about/manage-users-across-organizations/) if you want to assign the user to other organizations. ## Delete a subscriber 1. Go to **Users > Subscribers** and find the contact you want to delete. 2. Select the three dots menu and select **Delete subscriber**. A confirmation message appears. 3. Confirm you want to delete the subscriber and select **Delete subscriber**. The person is permanently removed from the subscriber list.

# Manage users - Add and edit - Move users between Kinde environments and businesses

> You can move users between Kinde environments or businesses by exporting and importing them.

transfer users, bulk import, organization assignment, roles and permissions, hashed passwords
manage-users, add-and-edit

If you need to move users between Kinde environments or Kinde businesses, you can do this using a JSON export and import routine. ## File requirements - User details and passwords need to be in NDJSON (Newline Delimited JSON) format, with a file size up to 20MB supported. - If you’ve got large user sets (over 20MB) or are concerned about file size limits, you might consider importing in batches. ## Data that can be transferred Using the NDJSON format you can export/import users with the following data: - First name, last name - Permissions - Roles - Property values - Identities - Feature flags - Scopes - Profiles - Passwords ## Set up the business or environment First, set up the business or environment you are moving users to. For example: - [Enable password authentication](/authenticate/authentication-methods/set-up-user-authentication/) before importing passwords - [Create organizations in Kinde](/build/organizations/add-and-manage-organizations/) if relevant - Add [roles](/manage-users/roles-and-permissions/user-roles/) and [permissions](/manage-users/roles-and-permissions/user-permissions/) in Kinde, if you intend to import these details with users. ## Export users from Kinde environment In the business or environment you want to export users from - follow this [export procedure](/manage-your-account/your-data/exporting-data/). ## Import users to a Kinde environment In the environment you want to import users into - follow this [JSON import procedure](/manage-users/add-and-edit/import-users-in-bulk/). ## About the NDJSON format NDJSON files are line separated JSON objects, with each JSON object representing a user. The following schema can be used for importing NDJSON files, note this schema represents one line within the file. ```json { "$schema": "http://json-schema.org/draft-07/schema#", "title": "User", "description": "A user object for importing", "type": "object", "properties": { "id": { "type": "string", "description": "A unique external identifier for the user (e.g., 'your_external_user_id_001')." }, "password": { "type": "object", "description": "Password metadata including salt, hash, and algorithm used.", "properties": { "salt": { "type": ["string", "null"], "description": "The salt value used when hashing the password, if applicable." }, "salt_format": { "type": ["string", "null"], "enum": ["hex", "string", null], "description": "Format of the salt value. Can be 'hex', 'string', or null if not used." }, "salt_position": { "type": ["string", "null"], "enum": ["prefix", "suffix", null], "description": "Position of the salt relative to the password. Can be 'prefix', 'suffix', or null." }, "hashed_password": { "type": "string", "description": "The resulting hashed password string." }, "hashing_algorithm": { "type": "string", "enum": ["crypt", "bcrypt", "sha256", "md5", "wordpress"], "description": "The algorithm used to hash the password." } } }, "first_name": { "type": "string", "description": "The user's first name." }, "last_name": { "type": "string", "description": "The user's last name." }, "identities": { "type": "array", "description": "A list of identity records such as email, username, or social.", "items": { "type": "object", "description": "An identity record associated with the user.", "properties": { "type": { "type": "string", "description": "The type of identity.", "enum": [ "email", "phone", "username", "oauth2:slack", "oauth2:apple", "oauth2:github", "oauth2:facebook", "oauth2:twitter", "oauth2:twitch", "oauth2:gitlab", "oauth2:xero", "oauth2:linkedin", "oauth2:discord", "oauth2:bitbucket", "oauth2:stripe", "oauth2:microsoft", "oauth2:clever", "oauth2:roblox", "oauth2:google" ] }, "identity": { "type": "string", "description": "The actual identifier value (e.g., email address, username, or provider user ID)." }, "is_verified": { "type": "boolean", "description": "Whether this identity has been verified." }, "provider": { "type": "string", "description": "The name of the provider (e.g., 'google') for OAuth identities." }, "profile": { "type": "object", "description": "Optional key/value pairs returned from the provider.", "additionalProperties": true } } } }, "properties": { "type": "array", "description": "Custom metadata key-value pairs associated with the user.", "items": { "type": "object", "properties": { "key": { "type": "string", "description": "The name of the property." }, "value": { "type": "string", "description": "The value of the property." } } } }, "feature_flags": { "type": "array", "description": "A list of feature flags for the user.", "items": { "type": "object", "properties": { "key": { "type": "string", "description": "The name of the feature flag." }, "value": { "type": "string", "description": "The value of the flag." } } } }, "organizations": { "type": "array", "description": "Organizations this user is associated with, including roles, permissions and api scopes.", "items": { "type": "object", "properties": { "external_id": { "type": "string", "description": "An external identifier for the organization (e.g., 'your_external_org_id_001')." }, "roles": { "type": "array", "description": "List of roles assigned to the user within the organization.", "items": { "type": "string" } }, "permissions": { "type": "array", "description": "List of specific permissions granted to the user within the organization.", "items": { "type": "string" } }, "scopes": { "type": "array", "description": "API scopes assigned to the user for this organization.", "items": { "type": "object", "properties": { "audience": { "type": "string", "format": "uri", "description": "The audience or API this scope applies to (e.g., 'https://your-api.com')." }, "scope": { "type": "string", "description": "The name of the scope (e.g., 'scope_1')." } } } } } } } } } ``` Here's an single-line example: ```txt {"id":"your_external_user_id_001","password":{"salt":null,"salt_format":null,"salt_position":null,"hashed_password":"$2a$10$t8Jz3hJCCTFk/Acja7bw3OpamB3xuLPhpJlRHb31bXIjfzeTfn8rq","hashing_algorithm":"bcrypt"},"last_name":"One","first_name":"User","identities":[{"type":"username","identity":"userone"},{"type":"email","identity":"userone@example.com","is_verified":true},{"type":"oauth2:google","profile":{"custom_provider_fields":"custom key/values from google"},"identity":"123456","provider":"google","is_verified":true}],"properties":[{"key":"property_1","value":"false"}],"feature_flags":[{"key":"feature_flag_1","value":"true"}],"organizations":[{"external_id":"your_external_org_id_001","roles":["admin","member"],"permissions":["read","write"],"scopes":[{"audience":"https://your-api.com","scope":"scope_1"}]}]} ``` Example, but a bit easier to read. ```jsx { "id": "your_external_user_id_001", "password": { "salt": null, "salt_format": null, "salt_position": null, "hashed_password": "$2a$10$t8Jz3hJCCTFk/Acja7bw3OpamB3xuLPhpJlRHb31bXIjfzeTfn8rq", "hashing_algorithm": "bcrypt" }, "last_name": "One", "first_name": "User", "identities": [ { "type": "username", "identity": "userone" }, { "type": "email", "identity": "userone@example.com", "is_verified": true }, { "type": "oauth2:google", "profile": { "custom_provider_fields": "custom key/values from google" }, "identity": "123456", "provider": "google", "is_verified": true } ], "properties": [{ "key": "property_1", "value": "false" }], "feature_flags": [{ "key": "feature_flag_1", "value": "true" }], "organizations": [ { "external_id": "your_external_org_id_001", "roles": ["admin", "member"], "permissions": ["read", "write"], "scopes": [{ "audience": "https://your-api.com", "scope": "scope_1" }] } ] } ```

# Manage users - Add and edit - Send user invitations with webhooks

> Describes several methods for sending invitations to end users, including from one organization member to another.

users, user invitations, add users, invite users, welcome email

If you add users to your Kinde business manually or via API, you can send them a welcome or invitation email using a webhook. ## Use webhooks to send an invitation or welcome email 1. Go to **Settings > Webhooks** and select **Add webhook**. 2. Fill in the name and details, and select an endpoint for receiving the hook. This might be in your product. 3. Choose the `user.created` event trigger. 4. Select **Save**. ## Prepare to receive the webhook - Set up the email template you want to send via the webhook. The email should be sent from your email server and contain a link to the sign-in screen. - Verify the webhook signature before processing to ensure the request is authentic. - Respond with a 2xx quickly after queuing work; use retries and make processing idempotent (e.g., de-duplicate by event ID). - Filter the webhook payload to determine whether the user was created manually or via API. The `source` field is `admin` or `api`. Treat these differently if needed. Payload example: ```json { "type": "user.created", "id": "evt_123", "data": { "user_id": "usr_abc", "email": "new.user@example.com", "source": "admin" } } ``` ## Test the webhook 1. Add a fake user to an organization either manually or via the Kinde Management API using an email address you can access. 2. Check that the hook works and the email is sent. 3. When the user goes to sign in for the first time with the same email address, they should automatically be synced by Kinde with the invited profile.

# Manage users - Add and edit - Troubleshoot user import errors

> Guide to troubleshooting user import errors in Kinde including common validation issues, error messages, and solutions for bulk user import problems.

import errors, troubleshooting, duplicate records, invalid email, missing information, organization errors, role errors, permission errors, password errors, csv validation
manage-users, add-and-edit

When you import users in bulk from a file, Kinde checks to see if there are errors that will prevent a new user record from being created or updated. Common errors include: - Duplicate records (based on the ID or email) - Invalid email - Missing or invalid information - An organization, role, or permission does not exist in Kinde. You can view the error log immediately after you import to review any errors. ## To view errors After the import, you have the option to view the error list. This will tell you which items are in error. 1. In the file, find the error and correct it. 2. Re-import the file. 3. If you cannot correct an error, you may want to [add the user manually](/manage-users/add-and-edit/add-and-edit-users/), which will trigger a password reset the next time they sign in. If you find any errors you cannot resolve, [contact our support team](mailto:support@kinde.com). ## Fixing errors The best appraoch is to fix errors in the file and then [import the users](/manage-users/add-and-edit/import-users-in-bulk/) again. For JSON format imports, we recommend using a JSON validator tool to check for errors. - You can re-import as many times as you need to. - You don’t need to delete records that have already been imported. - Kinde ignores any information that exists already, unless you made any changes to it. ### Password errors When importing JSON passwords, Kinde will look for a user matching the ID or email address in the user details file. We will let you know if a match is not found, if the hashing algorithm is not supported, or related columns are incorrect. User’s whose passwords cannot be imported will be prompted to reset their password once you switch on the connection. ### Bad data from previous provider If there are a lot of errors, you may need to go back to your old auth provider to get a new file. ### Importing users with organization IDs, roles, or permissions Organizations, roles, and permissions need to exist in Kinde before you bring these details in as part of a user import. If an organization match is not found in Kinde, the user will be added to the default organization. To correct this, you may need to [add them to others manually,](/manage-users/about/manage-users-across-organizations/) or re-import. Similarly, if the role or permission key does not exist in Kinde _exactly_ the way you referenced in the CSV, then the user might not be assigned the role or permission.

# Manage users - Roles and permissions - Apply roles and permissions to users

> Guide to applying roles and permissions to users in Kinde including manual assignment, bulk operations, and organization-specific role management.

apply roles, apply permissions, user assignment, organization roles, multi-organization, role management, permission management, bulk assignment, access control
manage-users, roles-and-permissions

Roles and permissions are defined at the business level, but set at the level of an **Organization**. So if you have users who belong to multiple organizations, you’ll need to set their roles and permissions separately. <Aside> Users must belong to an organization before you can assign them roles or permissions. </Aside> You can add and remove roles and permissions for users in an organization. If you can’t find a role or permission, you may need to add it. See [Define user permissions](/manage-users/roles-and-permissions/user-permissions/) and [Define user roles](/manage-users/roles-and-permissions/user-roles/). You can also assign roles and permissions to users by [updating their profiles in bulk](/manage-users/add-and-edit/import-users-in-bulk/). ## **Apply and edit roles and permissions** <Aside type="warning"> Roles and permissions cannot be assigned to a user unless they belong to an organization. </Aside> 1. Go to **Users** and click on the user you want to edit to view their details. 2. To add or edit roles: 1. Select **Roles**. 2. If the user belongs to multiple organizations, select one from the dropdown menu. The list of roles for the organization is listed. 3. Use the switches next to each role to turn them on and off for the user. 4. Select **Save**. 5. Repeat from step b for each organization they belong to. 3. To add or edit permissions: 1. Select **Permissions**. 2. If the user belongs to multiple organizations, select one from the dropdown menu. The list of available permissions is listed. 3. Use the switches next to each permission to turn them on and off for the user. 4. Select **Save**. 5. Repeat from step b for each organization they belong to. 4. Repeat for each user who’s permissions you want to change.

# Manage users - Roles and permissions - Set default user roles

> Guide to setting default user roles in Kinde including automatic role assignment for new users and organization-specific default configurations.

default roles, new user signup, automatic assignment, organization roles, scale plan, advanced features, role creation, access control, user onboarding

When users first sign up to your app or service, you can automatically assign them roles and permissions. This means users are able to interact with your application immediately - in the way you define - without waiting for additional access. For example, you might assign everyone a role for basic access permissions, and assign more advanced functions on request. You can also set up default roles in organizations if you are on the Kinde [Scale plan](https://kinde.com/pricing/). This topic covers default roles for applications and for organizations. [permissions](/manage-users/roles-and-permissions/user-permissions/) [roles](/manage-users/roles-and-permissions/user-roles/) ## Create a new role and enable it as default 1. Go to **Settings** > **Roles**. If you already have roles set up, these are shown here. 2. Select **Add role**. The **Add role** window opens. ![Addrole window in Kinde](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/7030c2ab-6b59-4e99-b5d1-5f4d0c204700/public) 3. Give the role a **Name**. Keep it short and descriptive, so you can easily understand what it is for. For example, ‘Basic access’. 4. Enter a **Description**. Describe what a user with this role can do. For example ‘Allows anyone assigned this role basic system access.’ 5. Enter a **Key**. The key is how your code references the role in Kinde. Ideally, it’s a word that is easy to reference in code and match in your product. You should also follow a naming convention to help maintain your code. E.g. `basic-system-access`. 6. Select the **Assign to new users** option. 7. Select the permissions that are included in the role by switching them on. 8. Select **Save**. All new users who sign up to your application will be assigned this role. 9. If you want to make this a default role in an organization, see the procedure below. ## Make an existing role a default role This procedure assumes you have roles and permissions set up already. 1. Go to **Settings > User management > Roles**. 2. Find the role you want to make default, select the three dots menu then **Edit role**. 3. In the dialog that opens, switch on the **Assign to new users** option. 4. Select **Save**. ## Enable default roles in an organization This procedure assumes you have roles and permissions set up already, that you are on a [Scale](https://kinde.com/pricing/) plan, and have activated the [advanced features](/authenticate/custom-configurations/advanced-organization/) for the target organization. 1. Go to **Organizations** and view the details of the organization you want to edit. 2. Select **Policies**. 3. In the **Default roles** section, switch on the roles you want to be assigned by default when users join the organization. ![Default roles in org screen shot](https://imagedelivery.net/skPPZTHzSlcslvHjesZQcQ/6fc3e960-8bfe-427e-1e34-051b515aa600/public) 4. Select **Save**.

# Manage users - Roles and permissions - Define user permissions

> Guide to defining user permissions in Kinde including permission creation, management, and integration with roles for granular access control.

user permissions, permission management, access control, permission keys, naming conventions, role grouping, dynamic permissions, token refresh, permission deletion
manage-users, roles-and-permissions

It’s easy to manage and control user access with permissions. Once you set up permissions, they can be grouped into [roles](/manage-users/roles-and-permissions/user-roles/), to make assigning them managing access easier. ## **First time creating permissions?** For each permission you create on Kinde, you need to assign a unique ‘key’ that your product code will reference to apply the permission. We suggest you create permissions first, and then if you want, create roles to group sets of permissions to apply to users. ## **Add a new user permission** 1. Go to **Settings** **> User Management >** **Permissions**. If you already have permissions added, you’ll see a list of them. 2. Select **Add permission**. 3. Give the permission a **Name**. Keep it short and descriptive, so you can easily understand what it is for. For example, ‘View financial reports’. 4. Enter a **Description**. Provide additional context to help users understand this permission and the effect it will have. For example ‘Allows users to view, but not update, financial reports for the business.’ 5. Enter a **Key**. The key is how your code references the permission in Kinde. It should be a word that is easy to reference in code and match in your product. For example `read-reports`. It’s a good idea to follow a naming convention pattern to help maintain your code. Here’s what it might look like: `[action_type]:[functional_area]` e.g `read:reports` 6. Select if you want this permission to be automatically added when a new role is created. You might do this for example, if the permission is something all users need to be allowed to do. 7. Select **Save**. ## **Edit permission** User permissions are dynamic and refreshed via the issued token. This means that any changes you make will be applied to users, the next time they sign in. We don’t recommend editing permission keys, once a permission is in use. It will break the code link between your product and the defined permission. 1. Go to **Settings** **> User Management > Permissions**. If you already have permissions, you’ll see a list of them. 2. Select the three dots next to the permission you want to edit and choose **Edit permission**. 3. Make the changes you want and select **Save**. ## Delete user permissions When you delete a permission, you remove the permission access from all users who are assigned that permission, and from all users who have that permission as part of a role. This can’t be reversed. 1. Go to **Settings > User Management > Permissions**. Your list of permissions is shown. 2. Select the three dots next to the permission and choose **Delete**. A confirmation / warning message appears. 3. Select **Delete permission**. The permission is permanently deleted.

# Manage users - Roles and permissions - Manage user roles

> Comprehensive guide to managing user roles in Kinde including role creation, editing, deletion, API integration, and token customization for access control.

user roles, role management, permissions, access control, organization roles, role keys, default roles, token claims, api management, role assignment
manage-users, roles-and-permissions

Roles allow you to group [permissions](/manage-users/roles-and-permissions/user-permissions/) into buckets. A role in Kinde could represent a collection of permissions available to an `owner`, an `administrator`, a `member` or whatever role structure is relevant to your business. This topic covers how to manage roles in the Kinde platform and [via the Kinde Management API](/kinde-apis/management#tag/roles). ## Important things to know about Kinde roles - User roles are defined at the business level, but applied to users at an [organization](/build/organizations/orgs-for-developers/) level - A user can have multiple roles per organization - The same user can have [different roles in different organizations](/manage-users/about/manage-users-across-organizations/). They could have the `admin` and `owner` role in Org A and a `member` role in Org B - We recommend you use permissions for controlling access to features within your application, then use roles to group the permissions. - Roles (and permissions) cannot be assigned to a user unless they belong to an organization. <Aside> Tip: [Set default roles when a user signs up to an organization](/manage-users/roles-and-permissions/default-user-roles/) </Aside> ## Add user roles in Kinde 1. In Kinde, go to **Settings > User Management > Roles**. The **User roles** page opens showing any user roles already defined. 2. Select **Add role**. The **Add role** window opens. 3. Give the role a **Name**. Keep it short and descriptive, so you can easily understand what it is for. For example, ‘Accounts management’. 4. Enter a **Description**. Describe what a user with this role can do. For example ‘Allows users to perform all basic accounts functions.’ 5. Enter a **Key**. The key is how your code references the role in Kinde. It should be a word that is easy to reference in code and match in your product. You should also follow a naming convention for all roles to help maintain your code. 6. Select if the role should be assigned to all new users by default when they sign up. 7. Select the permissions that are included in the role by switching them on. See also [Define user permissions](/manage-users/roles-and-permissions/user-permissions/). 8. Select **Save**. ## **Edit user roles** You can [update user roles via the Kinde Management API](/kinde-apis/management#tag/roles/patch/api/v1/roles/{role_id}) or using the procedure below. User roles are dynamic and refreshed via the issued token. This means that any changes you make will be applied to all users assigned that role, the next time they sign in. We don’t recommend editing role keys, once a role is in use. It will break the code link between your product and the defined role. 1. Go to **Settings > User Management > Roles**. If you already have roles, you’ll see a list of them. 2. Select the three dots next to the role you want to edit and choose **Edit**. 3. Make the changes you want and select **Save**. ## Delete user roles You can [delete user roles via the Kinde Management API](/kinde-apis/management#tag/roles/delete/api/v1/roles/{role_id}) or using the procedure below. When you delete a user role, you will remove the role as well as all the associated permissions from all users who are assigned that role. This can’t be reversed. 1. Go to **Settings > User Management > Roles**. Your list of roles is shown. 2. Select the three dots next to the role and choose **Delete**. A confirmation / warning message appears. 3. Select **Delete role**. The role is deleted permanently. ## **Add user roles via API** You can add user roles via the Kinde API. Use the [Add Organization User Role](/kinde-apis/management#tag/organizations/post/api/v1/organizations/{org_code}/users/{user_id}/roles) end point to assign a role to a user, and get the role IDs from the [Roles](/kinde-apis/management#tag/roles) endpoint. ## Add roles to the access token When a user authorizes against an organization in Kinde, you can enable their roles to be returned as an array of IDs in the `roles` claim of the `access_token`. This is part of an additional claim. ### To add roles to tokens 1. Go to **Settings > Applications > [Your application] > Tokens**. 2. Scroll to the **Token Customization** section. 3. Select **Customize** on the **Access tokens** card. 4. Switch on **Roles (array**) in the **Additional claims** section. Our SDKs commonly ship with a `getClaim` method to help with this. For example in React you could use something like: ```jsx getClaim("roles"); // {name: "roles", value: ["admin", "owner"]} ``` ## Other role-related functions in the Kinde Management API - [View a list of roles](/kinde-apis/management#tag/roles/get/api/v1/roles) - [View a list of permissions for a role](/kinde-apis/management#tag/roles/get/api/v1/roles/{role_id}/permissions) - [Edit permissions for a role](/kinde-apis/management#tag/roles/patch/api/v1/roles/{role_id}/permissions) - [Remove permissions from a role](/kinde-apis/management#tag/roles/delete/api/v1/roles/{role_id}/permissions/{permission_id})

# Manage users - View activity - Track user sign-in with Hotjar

> Guide to integrating Hotjar with Kinde for tracking user sign-in events and user behavior analytics.

hotjar, user tracking, behavior analytics, user insights, privacy, security, site id, authentication flow, session recording

If you use Hotjar to track user behaviour on your site, you can now add it to Kinde. <Aside> You need your own [Hotjar](https://www.hotjar.com/) account to use this feature. </Aside> Hotjar is a tool for recording and tracking user behavior. It is designed to give you insights about how users interact with your site or app. ## Privacy and security with Hotjar Kinde adds Hotjar’s tracking script to the initial sign up and sign in screens. We do not add it to any screens that include sensitive data entry such as password / OTP entry or MFA details. In Hotjar recordings, you’ll see the user redirecting to Kinde and select an authentication option. The rest of the auth flow will not be captured. Hotjar then stitches together the session by recording your application, and gives you a single recording with the sensitive parts of the auth flow omitted. ## Add your Hotjar credentials in Kinde 1. Go to **Settings > Environment > Details**. 2. Scroll down to the **Tracking** section. 3. Add your **Hotjar Site ID**. 4. Select **Save**. You can now track user interactions with Hotjar. <Aside> Note that Kinde does not allow Hotjar to record a user’s personal auth details, such as passwords. </Aside>

# Manage users - View activity - Track user sign-in with Google Analytics

> Guide to integrating Google Analytics with Kinde for tracking user sign-in events and authentication analytics.

google analytics, user tracking, sign in events, g-code, ua-code, measurement id, tracking id, google tag manager, security principles
manage-users, view-activity

If you use Google Analytics to track activity on your app or website, you can now add these in Kinde to track user sign in events. No activity in Kinde is tracked, but you will be able to see where a user’s journey ended in signing in or signing up via our platform. ## **Set up Google Analytics in Kinde** 1. In Kinde, go to **Settings > Environment > Details**. 2. Scroll to the **Tracking** section and enter your G- or UA- code in the **Google Analytics** field. 3. Select **Save**. ## **Find your Google codes** ### **G- code** Sign in to your GA account, select **Admin** and then **Data Streams**. Select the data stream you want. The G-Code appears under the **Measurement ID** field. ### **UA- code** If you use Universal Analytics (UA) for a website, sign in to your GA account and select **Admin**. Locate the **Property** you have set up for UA. The UA- code can be found in the **Tracking ID** field. ## **Google tag manager** We know some people really wanted us to add functionality for Google Tag Manager, but we looked into it and there’s a security concern that could introduce a vulnerability that contravenes our [guiding security principles](/trust-center/security/security-at-kinde/).

# Manage users - View activity - View audit log

> Guide to viewing audit logs in Kinde including system-wide activity monitoring, filtering options, and detailed activity tracking.

audit log, user activity log, activity tracking, authentication events, access tokens, policy acceptance, event details, ip address, location tracking, environment specific
manage-users, view-activity

You can keep track of user activity and actions through the Kinde Audit log. You can also view individual user activity in their user profile. Audit logs are environment-specific, so you’ll need to choose your environment first to view the relevant logs. ### To view the Audit log Open an environment, then go to **Settings > Audit log**. ## Events logged Kinde currently records the following events. If you need us to track other events, [let us know](https://kinde-21631392.hs-sites.com/en-au/feature-request). - Self-serve sign up events - Authentication events - Access tokens granted - Acceptance of policies ## Event details When an event is logged, the following details are captured. - User - Email - User ID - Organizations - Date and time of event - Event details - IP address - Application - Location

# Manage users - View activity - Audit log

> Guide to viewing individual user activity logs including activity history, sign-in methods, and detailed activity monitoring in Kinde.

audit log, user activity, activity history, sign in methods, sign in activity, user monitoring, activity logs, user details
manage-users, view-activity

You can view activities for individual end users in their user profile. To get a view of activities across organizations and users, [view the audit log](/manage-users/view-activity/view-audit-log/). ## Check the user activity log 1. Go to **Users** and click on the user name to view their details. 2. In the left menu, select **Activity**. A summary of the user’s activity shows at the top of the page. 3. Check the **Logs** list to see a full activity history. 4. To view an activity in detail, select the three dots next to the activity and select **View details**. A panel slides out showing full details of the activity. ## View sign-in methods and sign-in activity 1. Go to **Users** and click on the user name to view their details. 2. On their **Profile** page, scroll to the **Identities** section. You can see: - the email or identity method they used to sign in - how many times they have signed in with each method - when they last signed in with the method

